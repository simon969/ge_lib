{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to GE_LIB The ge_lib is a library of useful geotechnical functions that can be installed in your local python environment You can use the library to build your own applications safe in the knowledge that the functions you are relying on have been fully QA/QC checked and verified. If there are other functions that you find useful and think others may find useful you can also contribute these the library","title":"Home"},{"location":"#welcome-to-ge_lib","text":"The ge_lib is a library of useful geotechnical functions that can be installed in your local python environment You can use the library to build your own applications safe in the knowledge that the functions you are relying on have been fully QA/QC checked and verified. If there are other functions that you find useful and think others may find useful you can also contribute these the library","title":"Welcome to GE_LIB"},{"location":"AGS/","text":"Welcome to AGS data file Processing ================ Code Examples First import the module. from python_ags4 import AGS4 Summarised multiple AGS4 files: Important: avsb ;qklkldk qkd Create tables from AGS files ================================ Create single group value tables geology grouped test value tables from AGS files: #read AGS files into panda dataframws using python_AGS4 tables, headings = AGS4.AGS4_to_dataframe('path/to/file.ags') result = ge_lib.ags.get_tables(tables, headings, 'output.ags') Create charts from AGS files Create charts from tables geology grouped #read AGS files into panda dataframws using python_AGS4 tables, headings = AGS4.AGS4_to_dataframe('path/to/file.ags') result = ge_lib.ags.get_charts(tables, ) Development =============== Please refer contacts for details about the development environment and how to get involved in the project. Implementations","title":"AGS Processing"},{"location":"AGS/#welcome-to-ags-data-file-processing","text":"================","title":"Welcome to AGS data file Processing"},{"location":"AGS/#code-examples","text":"First import the module. from python_ags4 import AGS4","title":"Code Examples"},{"location":"AGS/#summarised-multiple-ags4-files","text":"Important: avsb ;qklkldk qkd","title":"Summarised multiple AGS4 files:"},{"location":"AGS/#create-tables-from-ags-files","text":"================================ Create single group value tables geology grouped test value tables from AGS files: #read AGS files into panda dataframws using python_AGS4 tables, headings = AGS4.AGS4_to_dataframe('path/to/file.ags') result = ge_lib.ags.get_tables(tables, headings, 'output.ags')","title":"Create tables from AGS files"},{"location":"AGS/#create-charts-from-ags-files","text":"Create charts from tables geology grouped #read AGS files into panda dataframws using python_AGS4 tables, headings = AGS4.AGS4_to_dataframe('path/to/file.ags') result = ge_lib.ags.get_charts(tables, )","title":"Create charts from AGS files"},{"location":"AGS/#development","text":"=============== Please refer contacts for details about the development environment and how to get involved in the project.","title":"Development"},{"location":"AGS/#implementations","text":"","title":"Implementations"},{"location":"about/","text":"About ge_lib","title":"About ge_lib"},{"location":"about/#about-ge_lib","text":"","title":"About ge_lib"},{"location":"contribute/","text":"Contributing to ge_lib For full documentation visit mkdocs.org . Project layout mkdocs.yml # The mkdocs build configuration file. pyproject.toml # The build setup file setup.cfg # the setup config file docs/ index.md # The documentation homepage. AGS.md found.md motions.md plaxis.md general.md ... # Other markdown pages, images and other files. src/ge_lib/ ags found general motions plaxis tunnel ... # Other function library modules src/tests/ test_ags/ data test_found/ data test_motions/ data test_plaxis/ data ... # Other function tests modules Check existing modules Create a module Check the src\\ge_lib\\ folder for existing modules and create a folder to save your modules in If you are contributing to an existing module than you can just save any additional files and folders there. Create a documentation files Install local markup libraries pip install mkdocs - Install MkDocs pip install mkdocstrings - Install plugin for mkdocs mkdocstrings pip install mkdocstrings-python - Install python handler for mkdocstrings mkdocstrings-python pip install mkdocs-gen-files - Installs plugin for mkdocstrings mkdocs-gen-files Add a documentation markup file (*.md) in the docs directory The comments in your code will automatically generate markup files, see mkdocstrings/recipes . You should also include additional documentation for use cases for functions Run the MkDocs server to view your documentation files along with all others mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Create unit_tests Create unit tests in a new folder in src\\tests that confirm that your functions are producing the correct results. Test input data and output results for your module should be saved in src\\tests\\[my_module]\\data folder These tests are run across the whole library and a report is produced to confirm that it complies with QA/QC.","title":"Contributing"},{"location":"contribute/#contributing-to-ge_lib","text":"For full documentation visit mkdocs.org .","title":"Contributing to ge_lib"},{"location":"contribute/#project-layout","text":"mkdocs.yml # The mkdocs build configuration file. pyproject.toml # The build setup file setup.cfg # the setup config file docs/ index.md # The documentation homepage. AGS.md found.md motions.md plaxis.md general.md ... # Other markdown pages, images and other files. src/ge_lib/ ags found general motions plaxis tunnel ... # Other function library modules src/tests/ test_ags/ data test_found/ data test_motions/ data test_plaxis/ data ... # Other function tests modules","title":"Project layout"},{"location":"contribute/#check-existing-modules-create-a-module","text":"Check the src\\ge_lib\\ folder for existing modules and create a folder to save your modules in If you are contributing to an existing module than you can just save any additional files and folders there.","title":"Check existing modules Create a module"},{"location":"contribute/#create-a-documentation-files","text":"Install local markup libraries pip install mkdocs - Install MkDocs pip install mkdocstrings - Install plugin for mkdocs mkdocstrings pip install mkdocstrings-python - Install python handler for mkdocstrings mkdocstrings-python pip install mkdocs-gen-files - Installs plugin for mkdocstrings mkdocs-gen-files Add a documentation markup file (*.md) in the docs directory The comments in your code will automatically generate markup files, see mkdocstrings/recipes . You should also include additional documentation for use cases for functions Run the MkDocs server to view your documentation files along with all others mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Create a documentation files"},{"location":"contribute/#create-unit_tests","text":"Create unit tests in a new folder in src\\tests that confirm that your functions are producing the correct results. Test input data and output results for your module should be saved in src\\tests\\[my_module]\\data folder These tests are run across the whole library and a report is produced to confirm that it complies with QA/QC.","title":"Create unit_tests"},{"location":"footing/","text":"Calculate Footing Resistances Ground resistances calculated in accordance with the Eurocode BS EN 1997 and BS EN 8004","title":"Footing Resistances"},{"location":"footing/#calculate-footing-resistances","text":"Ground resistances calculated in accordance with the Eurocode BS EN 1997 and BS EN 8004","title":"Calculate Footing Resistances"},{"location":"found/","text":"Foundation Design Calculations Calculate Pile Resistances Subsection ~~~~~~~~~~ Calculate Footing Resistances Ground resistances calculated in accordance with the Eurocode BS EN 1997 and BS EN 8004 JSON Data Validation JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa). JSON data can be validated at https://jsonlint.com/ this will confirm if your json data is validated The JSON data for pile resistances and footing resistances have a particular JSON schemas and so can be further validated at https://www.jsonschemavalidator.net/","title":"Foundation Design Calculations"},{"location":"found/#foundation-design-calculations","text":"","title":"Foundation Design Calculations"},{"location":"found/#calculate-pile-resistances","text":"Subsection ~~~~~~~~~~","title":"Calculate Pile Resistances"},{"location":"found/#calculate-footing-resistances","text":"Ground resistances calculated in accordance with the Eurocode BS EN 1997 and BS EN 8004","title":"Calculate Footing Resistances"},{"location":"found/#json-data-validation","text":"JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa). JSON data can be validated at https://jsonlint.com/ this will confirm if your json data is validated The JSON data for pile resistances and footing resistances have a particular JSON schemas and so can be further validated at https://www.jsonschemavalidator.net/","title":"JSON Data Validation"},{"location":"general/","text":"General Purpose Functions","title":"General Purpose Functions"},{"location":"general/#general-purpose-functions","text":"","title":"General Purpose Functions"},{"location":"groundwater/","text":"Groundwater Analysis Functions","title":"Groundwater Analysis Functions"},{"location":"groundwater/#groundwater-analysis-functions","text":"","title":"Groundwater Analysis Functions"},{"location":"license/","text":"","title":"License"},{"location":"motions/","text":"Seismic Motions Library Welcome to the Sesimic Motions python function library Section Subsection CalculateAriasIntensity ( accValues , timeStep , n ) Source code in src\\ge_lib\\motions\\methods.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def CalculateAriasIntensity ( accValues , timeStep , n ): g1 = accValues [ 0 : - 1 ] g2 = accValues [ 1 :] ariasIntensity = np . pi / 2 / 3 * timeStep * np . cumsum ( g1 ** 2 + g1 * g2 + g2 ** 2 ) ariasIntensity = np . append ( 0 , ariasIntensity ) diff = np . clip ( ariasIntensity - 0.05 * ariasIntensity [ - 1 ], None , 0 ) i = np . argmax ( diff ) - 1 t5 = i * timeStep + timeStep / 2 diff = np . clip ( ariasIntensity - 0.75 * ariasIntensity [ - 1 ], None , 0 ) i = np . argmax ( diff ) - 1 t75 = i * timeStep + timeStep / 2 diff = np . clip ( ariasIntensity - 0.95 * ariasIntensity [ - 1 ], None , 0 ) i = np . argmax ( diff ) - 1 t95 = i * timeStep + timeStep / 2 return ariasIntensity [ - 1 ], t5 , t75 , t95 , n , timeStep , ariasIntensity CalculateMotionComponentStatistics ( values , n ) Source code in src\\ge_lib\\motions\\methods.py 57 58 59 60 61 def CalculateMotionComponentStatistics ( values , n ): peak = np . max ( np . abs ( values )) mean = np . sum ( values ) / n standardDeviation = np . sqrt ( np . sum (( values - mean ) ** 2 ) / n ) return peak , mean , standardDeviation CalculatePowerSpectralDensity ( accValues , tSignificant , timeStep , n ) Source code in src\\ge_lib\\motions\\methods.py 24 25 26 27 def CalculatePowerSpectralDensity ( accValues , tSignificant , timeStep , n ): fourierFrequencies , fourierTransform = FourierTransform ( accValues , timeStep * ( n - 1 ), timeStep ) psd = np . abs ( fourierTransform ) ** 2 / ( np . pi * tSignificant ) return fourierFrequencies , psd FourierTransform ( vals , duration , timeStep ) Source code in src\\ge_lib\\motions\\fourier.py 5 6 7 8 9 10 def FourierTransform ( vals , duration , timeStep ): signalIntervalsNo = ( duration / timeStep ) . __round__ () fourierFrequenciesIntervalsNo = ( signalIntervalsNo + 1 ) // 2 fourierFrequencies = np . linspace ( 0 , fourierFrequenciesIntervalsNo , fourierFrequenciesIntervalsNo + 1 ) / duration . __float__ () fourierTransform = np . fft . rfft ( vals ) * timeStep . __float__ () return fourierFrequencies , fourierTransform FourierTransformMotionEquationSolution ( accValues , duration , timeStep , f , ksi ) Source code in src\\ge_lib\\motions\\fourier.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def FourierTransformMotionEquationSolution ( accValues , duration , timeStep , f , ksi ): # Fourier transform shall give a partial solution fourierFrequencies , fourierTransform = FourierTransform ( accValues , duration , timeStep ) dispValsP , _ , _ = FourierTransformInverse ( fourierTransform / ( f ** 2 + 2 * ksi * f * 1 j * fourierFrequencies - fourierFrequencies ** 2 ), duration , timeStep ) dispValsP /= - 4 * np . pi ** 2 velValsP , _ , _ = FourierTransformDerivative ( dispValsP , duration , timeStep ) accValsP , _ , _ = FourierTransformDerivative ( velValsP , duration , timeStep ) # Set up constants for homogeneous solution ksi0 = np . sqrt ( 1 - ksi ** 2 ) c2 = - dispValsP [ 0 ] c1 = - dispValsP [ 0 ] * ksi / ksi0 - velValsP [ 0 ] / ( 2 * np . pi * f * ksi0 ) t = np . linspace ( 0 , duration . __float__ (),( duration / timeStep ) . __round__ () + 1 ) exp_minus_ksi_omega_t = np . exp ( - 2 * np . pi * f * ksi * t ) sin_ksi0_omega_t = np . sin ( 2 * np . pi * f * ksi0 * t ) cos_ksi0_omega_t = np . cos ( 2 * np . pi * f * ksi0 * t ) c1_sin_plus_c2_cos = c1 * sin_ksi0_omega_t + c2 * cos_ksi0_omega_t c1_cos_minus_c2_sin = c1 * cos_ksi0_omega_t - c2 * sin_ksi0_omega_t # Homogeneous solution dispVals0 = exp_minus_ksi_omega_t * c1_sin_plus_c2_cos velVals0 = 2 * np . pi * f * exp_minus_ksi_omega_t * ( ksi0 * c1_cos_minus_c2_sin - ksi * c1_sin_plus_c2_cos ) accVals0 = ( 2 * np . pi * f ) ** 2 * exp_minus_ksi_omega_t * (( ksi ** 2 - ksi0 ** 2 ) * c1_sin_plus_c2_cos - 2 * ksi * ksi0 * c1_cos_minus_c2_sin ) # Final solution accVals = accValsP + accVals0 velVals = velValsP + velVals0 dispVals = dispValsP + dispVals0 return accVals , velVals , dispVals , duration , timeStep MotionComponentAccelerationCalculateResponseSpectra ( accValues , duration , timeStep , frequencies , ksi , velValues , dispValues , accType , velType , dispType , nCores ) Source code in src\\ge_lib\\motions\\methods.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def MotionComponentAccelerationCalculateResponseSpectra ( accValues , duration , timeStep , frequencies , ksi , velValues , dispValues , accType , velType , dispType , nCores ): if nCores == 0 : accVals , accTimes , velVals , velTimes , dispVals , dispTimes = [],[],[],[],[],[] for frequency in frequencies : accVal , accTime , velVal , velTime , dispVal , dispTime = MotionComponentAccelerationCalculateResponseSpectraOrdinates ( accValues , duration , timeStep , frequency , ksi , velValues , dispValues , accType , velType , dispType ) accVals . append ( accVal ) accTimes . append ( accTime ) velVals . append ( velVal ) velTimes . append ( velTime ) dispVals . append ( dispVal ) dispTimes . append ( dispTime ) accVals , accTimes , velVals , velTimes , dispVals , dispTimes = np . array ( accVals ), np . array ( accTimes ), np . array ( velVals ), np . array ( velTimes ), np . array ( dispVals ), np . array ( dispTimes ) else : if nCores is None : nCores = mp_cpu_count () n = len ( frequencies ) with mp_Pool ( nCores ) as pool : res = pool . starmap ( MotionComponentAccelerationCalculateResponseSpectraOrdinates , zip ( iter_repeat ( accValues , n ), iter_repeat ( duration , n ), iter_repeat ( timeStep , n ), frequencies , iter_repeat ( ksi , n ), iter_repeat ( velValues , n ), iter_repeat ( dispValues , n ), iter_repeat ( accType , n ), iter_repeat ( velType , n ), iter_repeat ( dispType , n )) ) res = np . array ( res ) . T accVals , accTimes , velVals , velTimes , dispVals , dispTimes = np . array ( res [ 0 ], dtype = np . float64 ), res [ 1 ], np . array ( res [ 2 ], dtype = np . float64 ), res [ 3 ], np . array ( res [ 4 ], dtype = np . float64 ), res [ 5 ] return accVals , accTimes , velVals , velTimes , dispVals , dispTimes MotionComponentAccelerationCalculateResponseSpectraOrdinates ( accValues , duration , timeStep , frequency , ksi , velValues , dispValues , accType , velType , dispType ) Source code in src\\ge_lib\\motions\\methods.py 84 85 86 87 88 89 90 91 92 93 94 95 96 def MotionComponentAccelerationCalculateResponseSpectraOrdinates ( accValues , duration , timeStep , frequency , ksi , velValues , dispValues , accType , velType , dispType ): accVals , velVals , dispVals , _ , _ = FourierTransformMotionEquationSolution ( accValues , duration , timeStep , frequency , ksi ) if accType == 'absolute' : accVals += accValues if velType == 'absolute' : velVals += velValues if dispType == 'absolute' : dispVals += dispValues accVals = np . abs ( accVals ) velVals = np . abs ( velVals ) dispVals = np . abs ( dispVals ) return np . array ([ accVals . max (), accVals . argmax () * timeStep , velVals . max (), accVals . argmax () * timeStep , dispVals . max (), dispVals . argmax () * timeStep ]) MotionComponentCorrelationFactor ( thisValues , thisMean , thisStandardDeviation , thatValues , thatMean , thatStandardDeviation , n ) Source code in src\\ge_lib\\motions\\methods.py 79 80 81 def MotionComponentCorrelationFactor ( thisValues , thisMean , thisStandardDeviation , thatValues , thatMean , thatStandardDeviation , n ): corrCoeff = np . sum (( thisValues - thisMean ) * ( thatValues - thatMean )) / ( n * thisStandardDeviation * thatStandardDeviation ) return corrCoeff MotionComponentDifferentiateSimpson ( vals , timeStep ) Source code in src\\ge_lib\\motions\\methods.py 70 71 72 73 74 75 76 def MotionComponentDifferentiateSimpson ( vals , timeStep ): vals1 = vals [ 0 : - 1 ] vals2 = vals [ 1 :] res = np . zeros ( vals . size ) for i in range ( 1 , vals . size ): res [ i ] = 2 * ( vals [ i ] - vals [ i - 1 ]) / timeStep - res [ i - 1 ] return res MotionComponentIntegrateSimpson ( vals , timeStep ) Source code in src\\ge_lib\\motions\\methods.py 64 65 66 67 def MotionComponentIntegrateSimpson ( vals , timeStep ): vals1 = vals [ 0 : - 1 ] vals2 = vals [ 1 :] return np . append ([ 0 ], timeStep / 2 * np . cumsum ( vals1 + vals2 )) MotionSuiteOptimiseFactorsToMatchSpectrum ( motFreqs , motOrds , freqs , ords ) Source code in src\\ge_lib\\motions\\methods.py 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 def MotionSuiteOptimiseFactorsToMatchSpectrum ( motFreqs : np . ndarray , motOrds : 'list[np.ndarray]' , freqs : np . ndarray , ords : np . ndarray ) -> np . ndarray : n = len ( motOrds ) # Interpolate frequencies, so that everything uses the same frequency vector newFreqs = np . unique ( np . append ( motFreqs , freqs )) newOrds = np . interp ( newFreqs , freqs , ords ) for i in range ( 0 , n ): motOrds [ i ] = np . interp ( newFreqs , motFreqs , motOrds [ i ]) freqs = newFreqs ords = newOrds newFreqs = None newOrds = None # Prepare square matrix A and vector B A = np . zeros (( n , n )) for i in range ( 0 , n ): for j in range ( i , n ): A [ i , j ] = np . sum ( motOrds [ i ] * motOrds [ j ]) for j in range ( 0 , i ): A [ i , j ] = A [ j , i ] B = np . zeros ( n ) for i in range ( 0 , n ): B [ i ] = np . sum ( motOrds [ i ] * ords ) # Solve for vector X if np . linalg . det ( A ) == 0 : raise Exception ( 'seismicmotions.methods.MotionSuiteOptimiseFactorsToMatchSpectrum: Matrix \"A\" is singular.' ) return np . linalg . solve ( A , B ) MotionTripletSuiteOptimiseFactorsToMatchSpectrum ( motFreqs , motOrdsX , motOrdsY , motOrdsZ , freqsX , ordsX , freqsY , ordsY , freqsZ , ordsZ ) Source code in src\\ge_lib\\motions\\methods.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 def MotionTripletSuiteOptimiseFactorsToMatchSpectrum ( motFreqs : np . ndarray , motOrdsX : 'list[np.ndarray]' , motOrdsY : 'list[np.ndarray]' , motOrdsZ : 'list[np.ndarray]' , freqsX : np . ndarray , ordsX : np . ndarray , freqsY : np . ndarray , ordsY : np . ndarray , freqsZ : np . ndarray , ordsZ : np . ndarray ) -> np . ndarray : n = len ( motOrdsX ) if n != len ( motOrdsY ) or n != len ( motOrdsZ ): raise Exception ( 'seismicmotions.methods.MotionTripletSuiteOptimiseFactorsToMatchSpectrum: \"motOrdsX\", \"motOrdsY\" and \"motOrdsZ\" do not have the same size.' ) # Interpolate frequencies, so that everything uses the same frequency vector newFreqs = np . unique ( np . concatenate ([ motFreqs , freqsX , freqsY , freqsZ ])) newOrdsX = np . interp ( newFreqs , freqsX , ordsX ) newOrdsY = np . interp ( newFreqs , freqsY , ordsY ) newOrdsZ = np . interp ( newFreqs , freqsZ , ordsZ ) for i in range ( 0 , n ): motOrdsX [ i ] = np . interp ( newFreqs , motFreqs , motOrdsX [ i ]) motOrdsY [ i ] = np . interp ( newFreqs , motFreqs , motOrdsY [ i ]) motOrdsZ [ i ] = np . interp ( newFreqs , motFreqs , motOrdsZ [ i ]) freqs = newFreqs ordsX , ordsY , ordsZ = newOrdsX , newOrdsY , newOrdsZ newFreqs = None newOrds = None # Prepare square matrix A and vector B A = np . zeros (( n , n )) for i in range ( 0 , n ): for j in range ( i , n ): A [ i , j ] = np . sum ( motOrdsX [ i ] * motOrdsX [ j ]) + np . sum ( motOrdsY [ i ] * motOrdsY [ j ]) + np . sum ( motOrdsZ [ i ] * motOrdsZ [ j ]) for j in range ( 0 , i ): A [ i , j ] = A [ j , i ] B = np . zeros ( n ) for i in range ( 0 , n ): B [ i ] = np . sum ( motOrdsX [ i ] * ordsX ) + np . sum ( motOrdsY [ i ] * ordsY ) + np . sum ( motOrdsZ [ i ] * ordsZ ) # Solve for vector X if np . linalg . det ( A ) == 0 : raise Exception ( 'seismicmotions.methods.MotionSuiteOptimiseFactorsToMatchSpectrum: Matrix \"A\" is singular.' ) return np . linalg . solve ( A , B ) ResponseSpectrumScalingFactorToMatchTargetSpectrum_Integrals ( parentFrequencies , parentOrdinates , targetFrequencies , targetOrdinates ) Source code in src\\ge_lib\\motions\\methods.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def ResponseSpectrumScalingFactorToMatchTargetSpectrum_Integrals ( parentFrequencies , parentOrdinates , targetFrequencies , targetOrdinates ): freqs = np . unique ( np . append ( parentFrequencies , targetFrequencies )) parOrds = np . interp ( freqs , parentFrequencies , parentOrdinates ) tarOrds = np . interp ( freqs , targetFrequencies , targetOrdinates ) x1 = freqs [ 0 : - 1 ] x2 = freqs [ 1 :] g1 = parOrds [ 0 : - 1 ] g2 = parOrds [ 1 :] f1 = tarOrds [ 0 : - 1 ] f2 = tarOrds [ 1 :] toScaleIntegralSquared = np . sum (( x2 - x1 ) * ( g1 ** 2 + g1 * g2 + g2 ** 2 )) / 3 integralProduct = np . sum (( x2 - x1 ) * ( f1 * g1 + f2 * g2 )) / 2 scalingFactor = integralProduct / toScaleIntegralSquared return scalingFactor ResponseSpectrumScalingFactorToMatchTargetSpectrum_OrdinateValues ( parentFrequencies , parentOrdinates , targetFrequencies , targetOrdinates ) Source code in src\\ge_lib\\motions\\methods.py 32 33 34 35 36 37 def ResponseSpectrumScalingFactorToMatchTargetSpectrum_OrdinateValues ( parentFrequencies , parentOrdinates , targetFrequencies , targetOrdinates ): freqs = np . unique ( np . append ( parentFrequencies , targetFrequencies )) parOrds = np . interp ( freqs , parentFrequencies , parentOrdinates ) tarOrds = np . interp ( freqs , targetFrequencies , targetOrdinates ) scalingFactor = np . sum ( parOrds * tarOrds ) / np . sum ( parOrds ** 2 ) return scalingFactor","title":"Seismic Motions"},{"location":"motions/#seismic-motions-library","text":"Welcome to the Sesimic Motions python function library Section Subsection","title":"Seismic Motions Library"},{"location":"motions/#ge_lib.motions.methods.CalculateAriasIntensity","text":"Source code in src\\ge_lib\\motions\\methods.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def CalculateAriasIntensity ( accValues , timeStep , n ): g1 = accValues [ 0 : - 1 ] g2 = accValues [ 1 :] ariasIntensity = np . pi / 2 / 3 * timeStep * np . cumsum ( g1 ** 2 + g1 * g2 + g2 ** 2 ) ariasIntensity = np . append ( 0 , ariasIntensity ) diff = np . clip ( ariasIntensity - 0.05 * ariasIntensity [ - 1 ], None , 0 ) i = np . argmax ( diff ) - 1 t5 = i * timeStep + timeStep / 2 diff = np . clip ( ariasIntensity - 0.75 * ariasIntensity [ - 1 ], None , 0 ) i = np . argmax ( diff ) - 1 t75 = i * timeStep + timeStep / 2 diff = np . clip ( ariasIntensity - 0.95 * ariasIntensity [ - 1 ], None , 0 ) i = np . argmax ( diff ) - 1 t95 = i * timeStep + timeStep / 2 return ariasIntensity [ - 1 ], t5 , t75 , t95 , n , timeStep , ariasIntensity","title":"CalculateAriasIntensity"},{"location":"motions/#ge_lib.motions.methods.CalculateMotionComponentStatistics","text":"Source code in src\\ge_lib\\motions\\methods.py 57 58 59 60 61 def CalculateMotionComponentStatistics ( values , n ): peak = np . max ( np . abs ( values )) mean = np . sum ( values ) / n standardDeviation = np . sqrt ( np . sum (( values - mean ) ** 2 ) / n ) return peak , mean , standardDeviation","title":"CalculateMotionComponentStatistics"},{"location":"motions/#ge_lib.motions.methods.CalculatePowerSpectralDensity","text":"Source code in src\\ge_lib\\motions\\methods.py 24 25 26 27 def CalculatePowerSpectralDensity ( accValues , tSignificant , timeStep , n ): fourierFrequencies , fourierTransform = FourierTransform ( accValues , timeStep * ( n - 1 ), timeStep ) psd = np . abs ( fourierTransform ) ** 2 / ( np . pi * tSignificant ) return fourierFrequencies , psd","title":"CalculatePowerSpectralDensity"},{"location":"motions/#ge_lib.motions.methods.FourierTransform","text":"Source code in src\\ge_lib\\motions\\fourier.py 5 6 7 8 9 10 def FourierTransform ( vals , duration , timeStep ): signalIntervalsNo = ( duration / timeStep ) . __round__ () fourierFrequenciesIntervalsNo = ( signalIntervalsNo + 1 ) // 2 fourierFrequencies = np . linspace ( 0 , fourierFrequenciesIntervalsNo , fourierFrequenciesIntervalsNo + 1 ) / duration . __float__ () fourierTransform = np . fft . rfft ( vals ) * timeStep . __float__ () return fourierFrequencies , fourierTransform","title":"FourierTransform"},{"location":"motions/#ge_lib.motions.methods.FourierTransformMotionEquationSolution","text":"Source code in src\\ge_lib\\motions\\fourier.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def FourierTransformMotionEquationSolution ( accValues , duration , timeStep , f , ksi ): # Fourier transform shall give a partial solution fourierFrequencies , fourierTransform = FourierTransform ( accValues , duration , timeStep ) dispValsP , _ , _ = FourierTransformInverse ( fourierTransform / ( f ** 2 + 2 * ksi * f * 1 j * fourierFrequencies - fourierFrequencies ** 2 ), duration , timeStep ) dispValsP /= - 4 * np . pi ** 2 velValsP , _ , _ = FourierTransformDerivative ( dispValsP , duration , timeStep ) accValsP , _ , _ = FourierTransformDerivative ( velValsP , duration , timeStep ) # Set up constants for homogeneous solution ksi0 = np . sqrt ( 1 - ksi ** 2 ) c2 = - dispValsP [ 0 ] c1 = - dispValsP [ 0 ] * ksi / ksi0 - velValsP [ 0 ] / ( 2 * np . pi * f * ksi0 ) t = np . linspace ( 0 , duration . __float__ (),( duration / timeStep ) . __round__ () + 1 ) exp_minus_ksi_omega_t = np . exp ( - 2 * np . pi * f * ksi * t ) sin_ksi0_omega_t = np . sin ( 2 * np . pi * f * ksi0 * t ) cos_ksi0_omega_t = np . cos ( 2 * np . pi * f * ksi0 * t ) c1_sin_plus_c2_cos = c1 * sin_ksi0_omega_t + c2 * cos_ksi0_omega_t c1_cos_minus_c2_sin = c1 * cos_ksi0_omega_t - c2 * sin_ksi0_omega_t # Homogeneous solution dispVals0 = exp_minus_ksi_omega_t * c1_sin_plus_c2_cos velVals0 = 2 * np . pi * f * exp_minus_ksi_omega_t * ( ksi0 * c1_cos_minus_c2_sin - ksi * c1_sin_plus_c2_cos ) accVals0 = ( 2 * np . pi * f ) ** 2 * exp_minus_ksi_omega_t * (( ksi ** 2 - ksi0 ** 2 ) * c1_sin_plus_c2_cos - 2 * ksi * ksi0 * c1_cos_minus_c2_sin ) # Final solution accVals = accValsP + accVals0 velVals = velValsP + velVals0 dispVals = dispValsP + dispVals0 return accVals , velVals , dispVals , duration , timeStep","title":"FourierTransformMotionEquationSolution"},{"location":"motions/#ge_lib.motions.methods.MotionComponentAccelerationCalculateResponseSpectra","text":"Source code in src\\ge_lib\\motions\\methods.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def MotionComponentAccelerationCalculateResponseSpectra ( accValues , duration , timeStep , frequencies , ksi , velValues , dispValues , accType , velType , dispType , nCores ): if nCores == 0 : accVals , accTimes , velVals , velTimes , dispVals , dispTimes = [],[],[],[],[],[] for frequency in frequencies : accVal , accTime , velVal , velTime , dispVal , dispTime = MotionComponentAccelerationCalculateResponseSpectraOrdinates ( accValues , duration , timeStep , frequency , ksi , velValues , dispValues , accType , velType , dispType ) accVals . append ( accVal ) accTimes . append ( accTime ) velVals . append ( velVal ) velTimes . append ( velTime ) dispVals . append ( dispVal ) dispTimes . append ( dispTime ) accVals , accTimes , velVals , velTimes , dispVals , dispTimes = np . array ( accVals ), np . array ( accTimes ), np . array ( velVals ), np . array ( velTimes ), np . array ( dispVals ), np . array ( dispTimes ) else : if nCores is None : nCores = mp_cpu_count () n = len ( frequencies ) with mp_Pool ( nCores ) as pool : res = pool . starmap ( MotionComponentAccelerationCalculateResponseSpectraOrdinates , zip ( iter_repeat ( accValues , n ), iter_repeat ( duration , n ), iter_repeat ( timeStep , n ), frequencies , iter_repeat ( ksi , n ), iter_repeat ( velValues , n ), iter_repeat ( dispValues , n ), iter_repeat ( accType , n ), iter_repeat ( velType , n ), iter_repeat ( dispType , n )) ) res = np . array ( res ) . T accVals , accTimes , velVals , velTimes , dispVals , dispTimes = np . array ( res [ 0 ], dtype = np . float64 ), res [ 1 ], np . array ( res [ 2 ], dtype = np . float64 ), res [ 3 ], np . array ( res [ 4 ], dtype = np . float64 ), res [ 5 ] return accVals , accTimes , velVals , velTimes , dispVals , dispTimes","title":"MotionComponentAccelerationCalculateResponseSpectra"},{"location":"motions/#ge_lib.motions.methods.MotionComponentAccelerationCalculateResponseSpectraOrdinates","text":"Source code in src\\ge_lib\\motions\\methods.py 84 85 86 87 88 89 90 91 92 93 94 95 96 def MotionComponentAccelerationCalculateResponseSpectraOrdinates ( accValues , duration , timeStep , frequency , ksi , velValues , dispValues , accType , velType , dispType ): accVals , velVals , dispVals , _ , _ = FourierTransformMotionEquationSolution ( accValues , duration , timeStep , frequency , ksi ) if accType == 'absolute' : accVals += accValues if velType == 'absolute' : velVals += velValues if dispType == 'absolute' : dispVals += dispValues accVals = np . abs ( accVals ) velVals = np . abs ( velVals ) dispVals = np . abs ( dispVals ) return np . array ([ accVals . max (), accVals . argmax () * timeStep , velVals . max (), accVals . argmax () * timeStep , dispVals . max (), dispVals . argmax () * timeStep ])","title":"MotionComponentAccelerationCalculateResponseSpectraOrdinates"},{"location":"motions/#ge_lib.motions.methods.MotionComponentCorrelationFactor","text":"Source code in src\\ge_lib\\motions\\methods.py 79 80 81 def MotionComponentCorrelationFactor ( thisValues , thisMean , thisStandardDeviation , thatValues , thatMean , thatStandardDeviation , n ): corrCoeff = np . sum (( thisValues - thisMean ) * ( thatValues - thatMean )) / ( n * thisStandardDeviation * thatStandardDeviation ) return corrCoeff","title":"MotionComponentCorrelationFactor"},{"location":"motions/#ge_lib.motions.methods.MotionComponentDifferentiateSimpson","text":"Source code in src\\ge_lib\\motions\\methods.py 70 71 72 73 74 75 76 def MotionComponentDifferentiateSimpson ( vals , timeStep ): vals1 = vals [ 0 : - 1 ] vals2 = vals [ 1 :] res = np . zeros ( vals . size ) for i in range ( 1 , vals . size ): res [ i ] = 2 * ( vals [ i ] - vals [ i - 1 ]) / timeStep - res [ i - 1 ] return res","title":"MotionComponentDifferentiateSimpson"},{"location":"motions/#ge_lib.motions.methods.MotionComponentIntegrateSimpson","text":"Source code in src\\ge_lib\\motions\\methods.py 64 65 66 67 def MotionComponentIntegrateSimpson ( vals , timeStep ): vals1 = vals [ 0 : - 1 ] vals2 = vals [ 1 :] return np . append ([ 0 ], timeStep / 2 * np . cumsum ( vals1 + vals2 ))","title":"MotionComponentIntegrateSimpson"},{"location":"motions/#ge_lib.motions.methods.MotionSuiteOptimiseFactorsToMatchSpectrum","text":"Source code in src\\ge_lib\\motions\\methods.py 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 def MotionSuiteOptimiseFactorsToMatchSpectrum ( motFreqs : np . ndarray , motOrds : 'list[np.ndarray]' , freqs : np . ndarray , ords : np . ndarray ) -> np . ndarray : n = len ( motOrds ) # Interpolate frequencies, so that everything uses the same frequency vector newFreqs = np . unique ( np . append ( motFreqs , freqs )) newOrds = np . interp ( newFreqs , freqs , ords ) for i in range ( 0 , n ): motOrds [ i ] = np . interp ( newFreqs , motFreqs , motOrds [ i ]) freqs = newFreqs ords = newOrds newFreqs = None newOrds = None # Prepare square matrix A and vector B A = np . zeros (( n , n )) for i in range ( 0 , n ): for j in range ( i , n ): A [ i , j ] = np . sum ( motOrds [ i ] * motOrds [ j ]) for j in range ( 0 , i ): A [ i , j ] = A [ j , i ] B = np . zeros ( n ) for i in range ( 0 , n ): B [ i ] = np . sum ( motOrds [ i ] * ords ) # Solve for vector X if np . linalg . det ( A ) == 0 : raise Exception ( 'seismicmotions.methods.MotionSuiteOptimiseFactorsToMatchSpectrum: Matrix \"A\" is singular.' ) return np . linalg . solve ( A , B )","title":"MotionSuiteOptimiseFactorsToMatchSpectrum"},{"location":"motions/#ge_lib.motions.methods.MotionTripletSuiteOptimiseFactorsToMatchSpectrum","text":"Source code in src\\ge_lib\\motions\\methods.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 def MotionTripletSuiteOptimiseFactorsToMatchSpectrum ( motFreqs : np . ndarray , motOrdsX : 'list[np.ndarray]' , motOrdsY : 'list[np.ndarray]' , motOrdsZ : 'list[np.ndarray]' , freqsX : np . ndarray , ordsX : np . ndarray , freqsY : np . ndarray , ordsY : np . ndarray , freqsZ : np . ndarray , ordsZ : np . ndarray ) -> np . ndarray : n = len ( motOrdsX ) if n != len ( motOrdsY ) or n != len ( motOrdsZ ): raise Exception ( 'seismicmotions.methods.MotionTripletSuiteOptimiseFactorsToMatchSpectrum: \"motOrdsX\", \"motOrdsY\" and \"motOrdsZ\" do not have the same size.' ) # Interpolate frequencies, so that everything uses the same frequency vector newFreqs = np . unique ( np . concatenate ([ motFreqs , freqsX , freqsY , freqsZ ])) newOrdsX = np . interp ( newFreqs , freqsX , ordsX ) newOrdsY = np . interp ( newFreqs , freqsY , ordsY ) newOrdsZ = np . interp ( newFreqs , freqsZ , ordsZ ) for i in range ( 0 , n ): motOrdsX [ i ] = np . interp ( newFreqs , motFreqs , motOrdsX [ i ]) motOrdsY [ i ] = np . interp ( newFreqs , motFreqs , motOrdsY [ i ]) motOrdsZ [ i ] = np . interp ( newFreqs , motFreqs , motOrdsZ [ i ]) freqs = newFreqs ordsX , ordsY , ordsZ = newOrdsX , newOrdsY , newOrdsZ newFreqs = None newOrds = None # Prepare square matrix A and vector B A = np . zeros (( n , n )) for i in range ( 0 , n ): for j in range ( i , n ): A [ i , j ] = np . sum ( motOrdsX [ i ] * motOrdsX [ j ]) + np . sum ( motOrdsY [ i ] * motOrdsY [ j ]) + np . sum ( motOrdsZ [ i ] * motOrdsZ [ j ]) for j in range ( 0 , i ): A [ i , j ] = A [ j , i ] B = np . zeros ( n ) for i in range ( 0 , n ): B [ i ] = np . sum ( motOrdsX [ i ] * ordsX ) + np . sum ( motOrdsY [ i ] * ordsY ) + np . sum ( motOrdsZ [ i ] * ordsZ ) # Solve for vector X if np . linalg . det ( A ) == 0 : raise Exception ( 'seismicmotions.methods.MotionSuiteOptimiseFactorsToMatchSpectrum: Matrix \"A\" is singular.' ) return np . linalg . solve ( A , B )","title":"MotionTripletSuiteOptimiseFactorsToMatchSpectrum"},{"location":"motions/#ge_lib.motions.methods.ResponseSpectrumScalingFactorToMatchTargetSpectrum_Integrals","text":"Source code in src\\ge_lib\\motions\\methods.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def ResponseSpectrumScalingFactorToMatchTargetSpectrum_Integrals ( parentFrequencies , parentOrdinates , targetFrequencies , targetOrdinates ): freqs = np . unique ( np . append ( parentFrequencies , targetFrequencies )) parOrds = np . interp ( freqs , parentFrequencies , parentOrdinates ) tarOrds = np . interp ( freqs , targetFrequencies , targetOrdinates ) x1 = freqs [ 0 : - 1 ] x2 = freqs [ 1 :] g1 = parOrds [ 0 : - 1 ] g2 = parOrds [ 1 :] f1 = tarOrds [ 0 : - 1 ] f2 = tarOrds [ 1 :] toScaleIntegralSquared = np . sum (( x2 - x1 ) * ( g1 ** 2 + g1 * g2 + g2 ** 2 )) / 3 integralProduct = np . sum (( x2 - x1 ) * ( f1 * g1 + f2 * g2 )) / 2 scalingFactor = integralProduct / toScaleIntegralSquared return scalingFactor","title":"ResponseSpectrumScalingFactorToMatchTargetSpectrum_Integrals"},{"location":"motions/#ge_lib.motions.methods.ResponseSpectrumScalingFactorToMatchTargetSpectrum_OrdinateValues","text":"Source code in src\\ge_lib\\motions\\methods.py 32 33 34 35 36 37 def ResponseSpectrumScalingFactorToMatchTargetSpectrum_OrdinateValues ( parentFrequencies , parentOrdinates , targetFrequencies , targetOrdinates ): freqs = np . unique ( np . append ( parentFrequencies , targetFrequencies )) parOrds = np . interp ( freqs , parentFrequencies , parentOrdinates ) tarOrds = np . interp ( freqs , targetFrequencies , targetOrdinates ) scalingFactor = np . sum ( parOrds * tarOrds ) / np . sum ( parOrds ** 2 ) return scalingFactor","title":"ResponseSpectrumScalingFactorToMatchTargetSpectrum_OrdinateValues"},{"location":"piles/","text":"Calculate Pile Resistances Pile resistances calculated in accordance with the Eurocode BS EN 1997 Source code in src\\ge_lib\\found\\pyPile\\PileResistances.pyclass PileResistance : def __init__ ( self , description : str , pile : Pile , gm , level_top : float , level_base : float , increment : float ): self . description = description self . ground_model = gm self . pile = pile self . levels = np . arange ( level_top , level_base , increment ) self . undrained_qb = [] self . undrained_qs = [] self . drained_qb = [] self . drained_qs = [] if type ( pile . calc_methods ) is list : self . calc_methods = pile . calc_methods else : self . calc_methods = pile . calc_methods . replace ( \"'\" , \"\" ) . split ( \",\" ) for s in self . calc_methods : calc = standard_calc . get_calc ( s ) if calc is not None : res = { \"method\" : s , \"results\" : calc . calc ( pile , gm , self . levels )} if ( calc . component == \"shaft\" and calc . state == \"undrained\" ): self . undrained_qs . append ( res ) if ( calc . component == \"base\" and calc . state == \"undrained\" ): self . undrained_qb . append ( res ) if ( calc . component == \"shaft\" and calc . state == \"drained\" ): self . drained_qs . append ( res ) if ( calc . component == \"base\" and calc . state == \"drained\" ): self . drained_qb . append ( res ) self . qs = self . get_qs ( self . levels , self . undrained_qs , self . drained_qs ) self . qb = self . get_qb ( self . levels , self . undrained_qb , self . drained_qb ) # if 'qs_cu_alpha' in pile.calc_methods: # res = {\"method\":'qs_cu_alpha', # \"results\": self.get_undrained_qs_cu_alpha(pile, gm, self.levels)} # self.undrained_qs.append(res) # if 'qb_cu_nc' in self.pile.calc_methods: # res = {\"method\":'qb_cu_nc', # \"results\":self.get_undrained_qb_cu_nc(pile, gm, self.levels)} # self.undrained_qb.append(res) # if 'qs_ks_tandelta_po' in pile.calc_methods: # res = {\"method\":'qs_ks_tandelta_po', # \"results\": self.get_drained_qs_ks_tandelta_po(pile, gm, self.levels)} # self.drained_qs.append (res) # if 'qb_reissner_po' in pile.calc_methods: # res = {\"method\":'qb_reissner_po', # \"results\":self.get_drained_qb_reissner(pile, gm, self.levels)} # self.drained_qb.append (res) # if 'qb_nq_po' in pile.calc_methods: # res = {\"method\":'qb_nq_po', # \"results\":self.get_drained_qb_nq(pile, gm, self.levels)} # self.drained_qb.append (res) # if 'qb_sptn' in pile.calc_methods: # res = {\"method\":'qb_sptn', # \"results\":self.get_drained_qb_sptn(pile, gm, self.levels)} # self.drained_qb.append (res) # def get_undrained_qs_cu_alpha(self, pile:Pile, gm:GroundModel, levels:float): # res = [0.00] * levels.size # alpha = pile.alpha # for x in range(levels.size): # res[x] = gm.get_attr_value(levels[x],\"Cu\",0.0) * alpha # return res # def get_undrained_qb_cu_nc(self, pile:Pile, gm:GroundModel, levels:float): # res = [0.00] * levels.size # nc = pile.nc # for x in range(levels.size): # res[x] = gm.get_attr_value(levels[x],\"Cu\",0) * nc # return res # def get_drained_qs_ks_tandelta_po(self, pile:Pile, gm:GroundModel, levels:float): # res = [0.00] * levels.size # ks = pile.ks # tan_delta =pile.tan_delta # for x in range(levels.size): # res[x] = gm.get_attr_value(levels[x],\"EffectiveStress\",0) * ks * tan_delta # return res def get_drained_qb_sptn_factor ( self , pile : Pile , gm , levels : float ): res = [ 0.00 ] * levels . size spt_factor = pile . spt_factor for x in range ( levels . size ): res [ x ] = gm . get_attr_value ( levels [ x ], \"SPT\" , 0 ) * spt_factor return res def get_drained_qb_nq ( self , pile : Pile , gm , levels : float ): res = [ 0.00 ] * levels . size nq = pile . nq for x in range ( levels . size ): res [ x ] = gm . get_attr_value ( levels [ x ], \"EffectiveStress\" , 0 ) * nq return res def get_min_results ( self , levels : float , results :[]): try : res = [ 0.00 ] * levels . size if ( len ( results ) > 0 ): for x in range ( levels . size ): res [ x ] = sys . float_info . max for res2 in results : if ( res2 [ \"results\" ][ x ] < res [ x ]): res [ x ] = res2 [ \"results\" ][ x ] return res except Exception as e : msg = \"problem getting min results {0} \" . format ( str ( e )) print ( msg ) def get_min_results_zero_neg ( self , levels : float , results :[]): try : res = [ 0.00 ] * levels . size if ( len ( results ) > 0 ): for x in range ( levels . size ): res [ x ] = sys . float_info . max for res2 in results : if res2 [ \"results\" ][ x ] < 0 : res [ x ] = 0 else : if ( res2 [ \"results\" ][ x ] < res [ x ]): res [ x ] = res2 [ \"results\" ][ x ] return res except Exception as e : msg = \"problem getting min results {0} \" . format ( str ( e )) print ( msg ) def get_qs ( self , levels : float , undrained_qs :[], drained_qs :[]): min_undrained_qs = self . get_min_results ( levels , undrained_qs ) min_drained_qs = self . get_min_results ( levels , drained_qs ) res = [ 0.00 ] * levels . size for x in range ( levels . size ): if ( min_undrained_qs [ x ] == 0 and min_drained_qs [ x ] > 0 ): res [ x ] = min_drained_qs [ x ] else : res [ x ] = min_undrained_qs [ x ] return res def get_qb ( self , levels : float , undrained_qb :[], drained_qb :[]): min_undrained_qb = self . get_min_results ( levels , undrained_qb ) min_drained_qb = self . get_min_results ( levels , drained_qb ) res = [ 0.00 ] * levels . size for x in range ( levels . size ): if ( min_undrained_qb [ x ] == 0 and min_drained_qb [ x ] > 0 ): res [ x ] = min_drained_qb [ x ] else : res [ x ] = min_undrained_qb [ x ] return res def getResistances ( self , factors = unity_factors ): res = [] qs = 0 qb = 0 for x in range ( self . levels . size ): qs =+ self . qs [ x ] * self . pile . perimeter qb = self . qb [ x ] * self . pile . base r = { \"level\" : self . levels [ x ], \"qs\" : qs , \"qb\" : qb , \"qus_comp\" : qs / ( factors [ 'shaft_comp' ] * factors [ 'model' ]), \"qus_tens\" : qs / ( factors [ 'shaft_tens' ] * factors [ 'model' ]), \"qub\" : qb / ( factors [ 'base' ] * factors [ 'model' ]), \"qutot\" : ( qs + qb ) / ( factors [ 'total' ] * factors [ 'model' ])} res . append ( r ) return res def getResistancesJSON ( self , factors ): ret = [] res = self . getResistances ( factors ) for r in res : s = \"{{ \\\" level \\\" : {0} , \\\" qs \\\" : {1} , \\\" qb \\\" : {2} , \\\" qus_comp \\\" : {3} , \\\" qub \\\" : {4} , \\\" qus_tens \\\" : {5} , \\\" qutot \\\" : {6} }}\" . format ( r [ 'level' ], r [ 'qs' ], r [ 'qb' ], r [ 'qus_comp' ], r [ 'qub' ], r [ 'qus_tens' ], r [ 'qutot' ]) ret . append ( s ) return ret def getResistancesCSV ( self , factors = unity_factors , include_header_in_rows = False , include_factors_in_rows = False ): ret = [] res = self . getResistances ( factors ) header = [ \"level\" , \"qs\" , \"qb\" , \"qus_comp\" , \"qub\" , \"qus_tens\" , \"qutot\" ] if ( include_factors_in_rows ): head , values = resistance_factors_array ( factors ) ret . append ( \",\" . join ( head )) ret . append ( \",\" . join ( values )) if ( include_header_in_rows ): ret . append ( ',' . join ( header )) for r in res : s = f \" { r [ 'level' ] } , { r [ 'qs' ] } , { r [ 'qb' ] } , { r [ 'qus_comp' ] } , { r [ 'qub' ] } , { r [ 'qus_tens' ] } , { r [ 'qutot' ] } \" ret . append ( s ) return ',' . join ( header ), ret def getDrainedResistances ( self , factors = unity_factors ): res = [] qs = 0 qb = 0 for x in range ( self . levels . size ): qs =+ self . drained_qs [ x ] * self . pile . perimeter qb = self . drained_qb [ x ] * self . pile . base r = { \"level\" : self . levels [ x ], \"qs\" : qs , \"qb\" : qb , \"qus_comp\" : qs / ( factors [ 'shaft_comp' ] * factors [ 'model' ]), \"qus_tens\" : qs / ( factors [ 'shaft_tens' ] * factors [ 'model' ]), \"qub\" : qb / ( factors [ 'base' ] * factors [ 'model' ]), \"qutot\" :( qs + qb ) / ( factors [ 'total' ] * factors [ 'model' ])} res . append ( r ) return res def getUndrainedResistances ( self , factors = unity_factors ): res = [] qs = 0 qb = 0 for x in range ( self . levels . size ): qs =+ self . undrained_qs [ x ] * self . pile . perimeter qb = self . undrained_qb [ x ] * self . pile . base r = { \"level\" : self . levels [ x ], \"qs\" : qs , \"qb\" : qb , \"qus_comp\" : qs / ( factors [ 'shaft_comp' ] * factors [ 'model' ]), \"qus_tens\" : qs / ( factors [ 'shaft_tens' ] * factors [ 'model' ]), \"qub\" : qb / ( factors [ 'base' ] * factors [ 'model' ]), \"qutot\" : ( qs + qb ) / ( factors [ 'total' ] * factors [ 'model' ])} res . append ( r ) return res def getDrainedResistancesJSON ( self , factors = unity_factors ): ret = [] res = self . getDrainedResistances ( factors ) for r in res : s = { 'level' : r [ 'level' ], 'qs' : r [ 'qs' ], 'qb' : r [ 'qb' ], 'qus_comp' : r [ 'qus_comp' ], 'qub' : r [ 'qub' ], 'qus_tens' : r [ 'qus_tens' ], 'qutot' : r [ 'qutot' ]} ret . append ( s ) return ret def getUndrainedResistancesJSON ( self , factors = unity_factors ): ret = [] res = self . getUndrainedResistances ( factors ) for r in res : s = { 'level' : r [ 'level' ], 'qs' : r [ 'qs' ], 'qb' : r [ 'qb' ], 'qus_comp' : r [ 'qus_comp' ], 'qub' : r [ 'qub' ], 'qus_tens' : r [ 'qus_tens' ], 'qutot' : r [ 'qutot' ]} ret . append ( s ) return ret def getDrainedResistancesCSV ( self , factors = unity_factors , include_header_in_rows = False ): ret = [] res = self . getDrainedResistances ( factors ) header = [ \"level\" , \"qs\" , \"qb\" , \"qus_comp\" , \"qub\" , \"qus_tens\" , \"qutot\" ] if ( include_header_in_rows ): ret . append ( ',' . join ( header )) for r in res : s = f \" { r [ 'level' ] } , { r [ 'qs' ] } , { r [ 'qb' ] } , { r [ 'qus_comp' ] } , { r [ 'qub' ] } , { r [ 'qus_tens' ] } , { r [ 'qutot' ] } \" ret . append ( s ) return ',' . join ( header ), ret def getUndrainedResistancesCSV ( self , factors = unity_factors , include_header_in_rows = False ): ret = [] res = self . getUndrainedResistances ( factors ) header = [ \"level\" , \"qs\" , \"qb\" , \"qus_comp\" , \"qub\" , \"qus_tens\" , \"qutot\" ] if ( include_header_in_rows ): ret . append ( ',' . join ( header )) for r in res : s = f \" { r [ 'level' ] } , { r [ 'qs' ] } , { r [ 'qb' ] } , { r [ 'qus_comp' ] } , { r [ 'qub' ] } , { r [ 'qus_tens' ] } , { r [ 'qutot' ] } \" ret . append ( s ) return ',' . join ( header ), ret","title":"Pile Resistances"},{"location":"piles/#calculate-pile-resistances","text":"Pile resistances calculated in accordance with the Eurocode BS EN 1997 Source code in src\\ge_lib\\found\\pyPile\\PileResistances.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 class PileResistance : def __init__ ( self , description : str , pile : Pile , gm , level_top : float , level_base : float , increment : float ): self . description = description self . ground_model = gm self . pile = pile self . levels = np . arange ( level_top , level_base , increment ) self . undrained_qb = [] self . undrained_qs = [] self . drained_qb = [] self . drained_qs = [] if type ( pile . calc_methods ) is list : self . calc_methods = pile . calc_methods else : self . calc_methods = pile . calc_methods . replace ( \"'\" , \"\" ) . split ( \",\" ) for s in self . calc_methods : calc = standard_calc . get_calc ( s ) if calc is not None : res = { \"method\" : s , \"results\" : calc . calc ( pile , gm , self . levels )} if ( calc . component == \"shaft\" and calc . state == \"undrained\" ): self . undrained_qs . append ( res ) if ( calc . component == \"base\" and calc . state == \"undrained\" ): self . undrained_qb . append ( res ) if ( calc . component == \"shaft\" and calc . state == \"drained\" ): self . drained_qs . append ( res ) if ( calc . component == \"base\" and calc . state == \"drained\" ): self . drained_qb . append ( res ) self . qs = self . get_qs ( self . levels , self . undrained_qs , self . drained_qs ) self . qb = self . get_qb ( self . levels , self . undrained_qb , self . drained_qb ) # if 'qs_cu_alpha' in pile.calc_methods: # res = {\"method\":'qs_cu_alpha', # \"results\": self.get_undrained_qs_cu_alpha(pile, gm, self.levels)} # self.undrained_qs.append(res) # if 'qb_cu_nc' in self.pile.calc_methods: # res = {\"method\":'qb_cu_nc', # \"results\":self.get_undrained_qb_cu_nc(pile, gm, self.levels)} # self.undrained_qb.append(res) # if 'qs_ks_tandelta_po' in pile.calc_methods: # res = {\"method\":'qs_ks_tandelta_po', # \"results\": self.get_drained_qs_ks_tandelta_po(pile, gm, self.levels)} # self.drained_qs.append (res) # if 'qb_reissner_po' in pile.calc_methods: # res = {\"method\":'qb_reissner_po', # \"results\":self.get_drained_qb_reissner(pile, gm, self.levels)} # self.drained_qb.append (res) # if 'qb_nq_po' in pile.calc_methods: # res = {\"method\":'qb_nq_po', # \"results\":self.get_drained_qb_nq(pile, gm, self.levels)} # self.drained_qb.append (res) # if 'qb_sptn' in pile.calc_methods: # res = {\"method\":'qb_sptn', # \"results\":self.get_drained_qb_sptn(pile, gm, self.levels)} # self.drained_qb.append (res) # def get_undrained_qs_cu_alpha(self, pile:Pile, gm:GroundModel, levels:float): # res = [0.00] * levels.size # alpha = pile.alpha # for x in range(levels.size): # res[x] = gm.get_attr_value(levels[x],\"Cu\",0.0) * alpha # return res # def get_undrained_qb_cu_nc(self, pile:Pile, gm:GroundModel, levels:float): # res = [0.00] * levels.size # nc = pile.nc # for x in range(levels.size): # res[x] = gm.get_attr_value(levels[x],\"Cu\",0) * nc # return res # def get_drained_qs_ks_tandelta_po(self, pile:Pile, gm:GroundModel, levels:float): # res = [0.00] * levels.size # ks = pile.ks # tan_delta =pile.tan_delta # for x in range(levels.size): # res[x] = gm.get_attr_value(levels[x],\"EffectiveStress\",0) * ks * tan_delta # return res def get_drained_qb_sptn_factor ( self , pile : Pile , gm , levels : float ): res = [ 0.00 ] * levels . size spt_factor = pile . spt_factor for x in range ( levels . size ): res [ x ] = gm . get_attr_value ( levels [ x ], \"SPT\" , 0 ) * spt_factor return res def get_drained_qb_nq ( self , pile : Pile , gm , levels : float ): res = [ 0.00 ] * levels . size nq = pile . nq for x in range ( levels . size ): res [ x ] = gm . get_attr_value ( levels [ x ], \"EffectiveStress\" , 0 ) * nq return res def get_min_results ( self , levels : float , results :[]): try : res = [ 0.00 ] * levels . size if ( len ( results ) > 0 ): for x in range ( levels . size ): res [ x ] = sys . float_info . max for res2 in results : if ( res2 [ \"results\" ][ x ] < res [ x ]): res [ x ] = res2 [ \"results\" ][ x ] return res except Exception as e : msg = \"problem getting min results {0} \" . format ( str ( e )) print ( msg ) def get_min_results_zero_neg ( self , levels : float , results :[]): try : res = [ 0.00 ] * levels . size if ( len ( results ) > 0 ): for x in range ( levels . size ): res [ x ] = sys . float_info . max for res2 in results : if res2 [ \"results\" ][ x ] < 0 : res [ x ] = 0 else : if ( res2 [ \"results\" ][ x ] < res [ x ]): res [ x ] = res2 [ \"results\" ][ x ] return res except Exception as e : msg = \"problem getting min results {0} \" . format ( str ( e )) print ( msg ) def get_qs ( self , levels : float , undrained_qs :[], drained_qs :[]): min_undrained_qs = self . get_min_results ( levels , undrained_qs ) min_drained_qs = self . get_min_results ( levels , drained_qs ) res = [ 0.00 ] * levels . size for x in range ( levels . size ): if ( min_undrained_qs [ x ] == 0 and min_drained_qs [ x ] > 0 ): res [ x ] = min_drained_qs [ x ] else : res [ x ] = min_undrained_qs [ x ] return res def get_qb ( self , levels : float , undrained_qb :[], drained_qb :[]): min_undrained_qb = self . get_min_results ( levels , undrained_qb ) min_drained_qb = self . get_min_results ( levels , drained_qb ) res = [ 0.00 ] * levels . size for x in range ( levels . size ): if ( min_undrained_qb [ x ] == 0 and min_drained_qb [ x ] > 0 ): res [ x ] = min_drained_qb [ x ] else : res [ x ] = min_undrained_qb [ x ] return res def getResistances ( self , factors = unity_factors ): res = [] qs = 0 qb = 0 for x in range ( self . levels . size ): qs =+ self . qs [ x ] * self . pile . perimeter qb = self . qb [ x ] * self . pile . base r = { \"level\" : self . levels [ x ], \"qs\" : qs , \"qb\" : qb , \"qus_comp\" : qs / ( factors [ 'shaft_comp' ] * factors [ 'model' ]), \"qus_tens\" : qs / ( factors [ 'shaft_tens' ] * factors [ 'model' ]), \"qub\" : qb / ( factors [ 'base' ] * factors [ 'model' ]), \"qutot\" : ( qs + qb ) / ( factors [ 'total' ] * factors [ 'model' ])} res . append ( r ) return res def getResistancesJSON ( self , factors ): ret = [] res = self . getResistances ( factors ) for r in res : s = \"{{ \\\" level \\\" : {0} , \\\" qs \\\" : {1} , \\\" qb \\\" : {2} , \\\" qus_comp \\\" : {3} , \\\" qub \\\" : {4} , \\\" qus_tens \\\" : {5} , \\\" qutot \\\" : {6} }}\" . format ( r [ 'level' ], r [ 'qs' ], r [ 'qb' ], r [ 'qus_comp' ], r [ 'qub' ], r [ 'qus_tens' ], r [ 'qutot' ]) ret . append ( s ) return ret def getResistancesCSV ( self , factors = unity_factors , include_header_in_rows = False , include_factors_in_rows = False ): ret = [] res = self . getResistances ( factors ) header = [ \"level\" , \"qs\" , \"qb\" , \"qus_comp\" , \"qub\" , \"qus_tens\" , \"qutot\" ] if ( include_factors_in_rows ): head , values = resistance_factors_array ( factors ) ret . append ( \",\" . join ( head )) ret . append ( \",\" . join ( values )) if ( include_header_in_rows ): ret . append ( ',' . join ( header )) for r in res : s = f \" { r [ 'level' ] } , { r [ 'qs' ] } , { r [ 'qb' ] } , { r [ 'qus_comp' ] } , { r [ 'qub' ] } , { r [ 'qus_tens' ] } , { r [ 'qutot' ] } \" ret . append ( s ) return ',' . join ( header ), ret def getDrainedResistances ( self , factors = unity_factors ): res = [] qs = 0 qb = 0 for x in range ( self . levels . size ): qs =+ self . drained_qs [ x ] * self . pile . perimeter qb = self . drained_qb [ x ] * self . pile . base r = { \"level\" : self . levels [ x ], \"qs\" : qs , \"qb\" : qb , \"qus_comp\" : qs / ( factors [ 'shaft_comp' ] * factors [ 'model' ]), \"qus_tens\" : qs / ( factors [ 'shaft_tens' ] * factors [ 'model' ]), \"qub\" : qb / ( factors [ 'base' ] * factors [ 'model' ]), \"qutot\" :( qs + qb ) / ( factors [ 'total' ] * factors [ 'model' ])} res . append ( r ) return res def getUndrainedResistances ( self , factors = unity_factors ): res = [] qs = 0 qb = 0 for x in range ( self . levels . size ): qs =+ self . undrained_qs [ x ] * self . pile . perimeter qb = self . undrained_qb [ x ] * self . pile . base r = { \"level\" : self . levels [ x ], \"qs\" : qs , \"qb\" : qb , \"qus_comp\" : qs / ( factors [ 'shaft_comp' ] * factors [ 'model' ]), \"qus_tens\" : qs / ( factors [ 'shaft_tens' ] * factors [ 'model' ]), \"qub\" : qb / ( factors [ 'base' ] * factors [ 'model' ]), \"qutot\" : ( qs + qb ) / ( factors [ 'total' ] * factors [ 'model' ])} res . append ( r ) return res def getDrainedResistancesJSON ( self , factors = unity_factors ): ret = [] res = self . getDrainedResistances ( factors ) for r in res : s = { 'level' : r [ 'level' ], 'qs' : r [ 'qs' ], 'qb' : r [ 'qb' ], 'qus_comp' : r [ 'qus_comp' ], 'qub' : r [ 'qub' ], 'qus_tens' : r [ 'qus_tens' ], 'qutot' : r [ 'qutot' ]} ret . append ( s ) return ret def getUndrainedResistancesJSON ( self , factors = unity_factors ): ret = [] res = self . getUndrainedResistances ( factors ) for r in res : s = { 'level' : r [ 'level' ], 'qs' : r [ 'qs' ], 'qb' : r [ 'qb' ], 'qus_comp' : r [ 'qus_comp' ], 'qub' : r [ 'qub' ], 'qus_tens' : r [ 'qus_tens' ], 'qutot' : r [ 'qutot' ]} ret . append ( s ) return ret def getDrainedResistancesCSV ( self , factors = unity_factors , include_header_in_rows = False ): ret = [] res = self . getDrainedResistances ( factors ) header = [ \"level\" , \"qs\" , \"qb\" , \"qus_comp\" , \"qub\" , \"qus_tens\" , \"qutot\" ] if ( include_header_in_rows ): ret . append ( ',' . join ( header )) for r in res : s = f \" { r [ 'level' ] } , { r [ 'qs' ] } , { r [ 'qb' ] } , { r [ 'qus_comp' ] } , { r [ 'qub' ] } , { r [ 'qus_tens' ] } , { r [ 'qutot' ] } \" ret . append ( s ) return ',' . join ( header ), ret def getUndrainedResistancesCSV ( self , factors = unity_factors , include_header_in_rows = False ): ret = [] res = self . getUndrainedResistances ( factors ) header = [ \"level\" , \"qs\" , \"qb\" , \"qus_comp\" , \"qub\" , \"qus_tens\" , \"qutot\" ] if ( include_header_in_rows ): ret . append ( ',' . join ( header )) for r in res : s = f \" { r [ 'level' ] } , { r [ 'qs' ] } , { r [ 'qb' ] } , { r [ 'qus_comp' ] } , { r [ 'qub' ] } , { r [ 'qus_tens' ] } , { r [ 'qutot' ] } \" ret . append ( s ) return ',' . join ( header ), ret","title":"Calculate Pile Resistances"},{"location":"plaxis/","text":"Plaxis Results ============================ A results class for each of the plaxis versions will connect to the host output server and will request selected results and phases from the output model | plx.getAllStructuralResults(param list) | plx.getInterfaceResults(param list) | plx.getPlateResults(param list) | plx.getEmbeddedBeamResults(param list) where param list may contain folderOut: 'c:\\temp', Any | None = None | The folder that the results should be saved to fileOut: 'myfile.csv', Any | None = None | The file name that will be used to save the data. The file name extention will tell the function which format is required. | \" .mdb\" Access database file | \" .csv\" Comma Separated Value text file tableOut: Any | None = None | The table name that will be used if the data is saved in a database storage system sphaseOrder: Any | None = None | List of phases to be included in returned data for example 'Phase_1,Phase_24,Phase_30' if left blank it will be taken as all phases between the sPhaseStart and sPhaseEnd parameters sphaseStart: Any | None = None, | First phase to be included in returned data for example 'Phase_1' if left blank it will be taken as the first phase in the output sphaseEnd: Any | None = None | Last phase to be included in returned data for example 'Phase_24' if left blank it will be the last phase in the output Implementation A connection to the host server can be established and the appropriate version of the plaxis result class is returned, this is achieved using the GetPlaxisResults function as detailed below from ge_lib.plaxis.PlaxisResults import GetPlaxisResults try: plx = GetPlaxisResults(host=\"UKCRD1PC34587\", port=10000, password='D@r>Srh1/vft9#ky') if plx: plx.getAllStructuralResults(folderOut=\"c:\\\\Temp\", sphaseOrder='Phase_23,Phase_24,Phase_26') except Exception as e: print (str(e)) Juypter Notebook We have created an example Juypter Notebook which connects to the Plaxis 2D Output program and extracts structural results dfor selected phases See here versions = [ 'Plaxis2d' , 'Plaxis2d2016' , 'Plaxis2d2019' , 'Plaxis2dConnect' , 'Plaxis2dConnectV2' , 'Plaxis2dConnectV20' , 'Plaxis2dConnectV21' , 'Plaxis2dConnectV22' , 'Plaxis2d2023Plaxis3d' , 'Plaxis3d2018' , 'Plaxis3dConnect' , 'Plaxis3d2023' ] module-attribute Plaxis2dResults Bases: PlaxisScripting Source code in src\\ge_lib\\plaxis\\Plaxis2dResults.pyclass Plaxis2dResults ( PlaxisScripting ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResults , self ) . __init__ ( server , host , port , password = password ) if ( self . s_o . is_2d == False ): raise ValueError ( 'This is a Plaxis2d output reader, but the output plaxis server is not Plaxis2d' ); def version ( self ): return \"Plaxis2d\" def getSoilResultsByRanges ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , xMin = None , xMax = None , yMin = None , yMax = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) self . setRange ( xMin , xMax , yMin , yMax ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByRanges' locY = [] locX = [] Uyy = [] Uxx = [] Utot = [] PUyy = [] PUxx = [] PUtot = [] MaterialID = [] ElementID = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] PExcess = [] PActive = [] PSteady = [] PWater = [] Suct = [] EffSuct = [] pPhaseName = [] pPhaseIdent = [] # look into all phases, all steps for phase in self . phaseOrder : print ( 'Getting Soil results for Phase ' , phase . Name . value , phase . Identification . value ) soilMat = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . MaterialID , 'node' ) soilEl = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . ElementID , 'node' ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) soilUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Ux , 'node' ) soilUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Uy , 'node' ) soilUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Ut , 'node' ) soilPUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUy , 'node' ) soilPUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUx , 'node' ) soilPUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUt , 'node' ) soilEffSxx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigxxE , 'node' ) soilEffSyy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigyyE , 'node' ) soilEffSzz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigzzE , 'node' ) soilEffP1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective1 , 'node' ) soilEffP2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective2 , 'node' ) soilEffP3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective3 , 'node' ) soilPExcess = self . g_o . getresults ( phase , self . g_o . Soil . PExcess , 'node' ) soilPActive = self . g_o . getresults ( phase , self . g_o . Soil . PActive , 'node' ) soilPSteady = self . g_o . getresults ( phase , self . g_o . Soil . PSteady , 'node' ) soilPWater = self . g_o . getresults ( phase , self . g_o . Soil . PWater , 'node' ) soilSuction = self . g_o . getresults ( phase , self . g_o . Soil . Suction , 'node' ) soilEffSuction = self . g_o . getresults ( phase , self . g_o . Soil . EffSuction , 'node' ) for x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( soilX , soilY , soilMat , soilEl , soilUx , soilUy , soilUt , soilPUx , soilPUy , soilPUt , soilEffSxx , soilEffSyy , soilEffSzz , soilEffP1 , soilEffP2 , soilEffP3 , soilPExcess , soilPActive , soilPSteady , soilPWater , soilSuction , soilEffSuction ): if self . inRange ( x_val = x , y_val = y ) == True : print ( phase . Name . value , phase . Identification . value , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu ) pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) locX . append ( x ) locY . append ( y ) Uxx . append ( ux ) Uyy . append ( uy ) Utot . append ( ut ) PUxx . append ( pux ) PUyy . append ( puy ) PUtot . append ( put ) MaterialID . append ( mat ) ElementID . append ( el ) EffSxx . append ( esx ) EffSyy . append ( esy ) EffSzz . append ( esz ) EffP1 . append ( ep1 ) EffP2 . append ( ep2 ) EffP3 . append ( ep3 ) PExcess . append ( pe ) PActive . append ( pa ) PSteady . append ( ps ) PWater . append ( pw ) Suct . append ( su ) EffSuct . append ( esu ) columns = 'Phase,PhaseIdent,locX(m),locY(m),MaterialID,ElementID,Ux(m),Uy(m),Ut(m),PUx(m),PUy(m),PUt(m),SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa),EffSuct(kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f}{:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to string....' ) rows = '' . join ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( pPhaseName , pPhaseIdent , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct , EffSuct )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( pPhaseName , pPhaseIdent , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct , EffSuct )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( pPhaseName , pPhaseIdent , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct , EffSuct ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( esx ) row . append ( esy ) row . append ( esz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pe ) row . append ( pa ) row . append ( ps ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getSoilResultsByRanges Done' ) def getSoilResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints' locName = [] locY = [] locX = [] MaterialID = [] ElementID = [] Uyy = [] Uxx = [] Utot = [] PUyy = [] PUxx = [] PUtot = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] PExcess = [] PActive = [] PSteady = [] PWater = [] Suct = [] EffSuct = [] pPhaseName = [] pPhaseIdent = [] if filePoints : fpoint = open ( filePoints , \"r\" ) while True : in_line = fpoint . readline () if in_line == \"\" : break print ( in_line ) [ name , nx , ny ] = in_line . split ( ',' ) self . NodeList . append ( self . PointXY ( name , nx , ny )) fpoint . close () for phase in self . phaseOrder : print ( 'Getting soil results ' + phase . Identification . value ) for pt in self . NodeList : try : mat = self . g_o . getsingleresult ( phase , self . g_o . Soil . MaterialID , ( pt . x , pt . y )) el = self . g_o . getsingleresult ( phase , self . g_o . Soil . ElementID , ( pt . x , pt . y )) ux = self . g_o . getsingleresult ( phase , self . g_o . Soil . Ux , ( pt . x , pt . y )) uy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uy , ( pt . x , pt . y )) ut = self . g_o . getsingleresult ( phase , self . g_o . Soil . Utot , ( pt . x , pt . y )) pux = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUx , ( pt . x , pt . y )) puy = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUy , ( pt . x , pt . y )) put = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUtot , ( pt . x , pt . y )) esx = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigxxE , ( pt . x , pt . y )) esy = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigyyE , ( pt . x , pt . y )) esz = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigzzE , ( pt . x , pt . y )) ep1 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective1 , ( pt . x , pt . y )) ep2 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective2 , ( pt . x , pt . y )) ep3 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective3 , ( pt . x , pt . y )) pe = self . g_o . getsingleresult ( phase , self . g_o . Soil . PExcess , ( pt . x , pt . y )) pa = self . g_o . getsingleresult ( phase , self . g_o . Soil . PActive , ( pt . x , pt . y )) ps = self . g_o . getsingleresult ( phase , self . g_o . Soil . PSteady , ( pt . x , pt . y )) pw = self . g_o . getsingleresult ( phase , self . g_o . Soil . PWater , ( pt . x , pt . y )) su = self . g_o . getsingleresult ( phase , self . g_o . Soil . Suction , ( pt . x , pt . y )) # print (pt.name, pt.x, pt.y, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) if ux != 'not found' : pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) locName . append ( pt . name ) locY . append ( pt . y ) locX . append ( pt . x ) MaterialID . append ( int ( float ( mat ) + .1 )) ElementID . append ( int ( float ( el ) + .1 )) Uyy . append ( uy ) Uxx . append ( ux ) Utot . append ( ut ) PUyy . append ( puy ) PUxx . append ( pux ) PUtot . append ( put ) EffSxx . append ( esx ) EffSyy . append ( esy ) EffSzz . append ( esz ) EffP1 . append ( ep1 ) EffP2 . append ( ep2 ) EffP3 . append ( ep3 ) PExcess . append ( pe ) PActive . append ( pa ) PSteady . append ( ps ) PWater . append ( pw ) Suct . append ( su ) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) print ( pt . name , pt . x , pt . y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su ) columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): try : print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , locname , float ( x ), float ( y ), mat , el , float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( esx ), float ( esy ), float ( esz ), float ( ep1 ), float ( ep2 ), float ( ep3 ), float ( pe ), float ( pa ), float ( ps ), float ( pw ), float ( su )) for pname , pident , locname , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct )]) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) #~ print (pname, pident, locname, x, y, mat, el, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) #~ print (pPhaseName, pPhaseIdent, locName, locX, locY, MaterialID, ElementID, Uxx, Uyy, Utot, PUxx, PUyy, PUtot, EffSxx, EffSyy, EffSzz, EffP1, EffP2, EffP3, PExcess, PActive, PSteady, PWater, Suct) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , locname , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct ): row = [] row . append ( pname ) row . append ( pident ) row . append ( locname ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( esx ) row . append ( esy ) row . append ( esz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pe ) row . append ( pa ) row . append ( ps ) row . append ( pw ) row . append ( su ) self . insertValues ( row ) print ( 'getSoilResultsByPoint Done' ) def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' # init data for lists pPhaseName = [] pPhaseIdent = [] pY = [] pX = [] pMat = [] pEl = [] pUx = [] pUy = [] pUt = [] pPUx = [] pPUy = [] pPUt = [] pU1 = [] pU2 = [] pM2D = [] pQ2D = [] pNx2D = [] pNz2D = [] for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : plateX = self . g_o . getresults ( phase , self . g_o . Plate . X , 'node' ) plateY = self . g_o . getresults ( phase , self . g_o . Plate . Y , 'node' ) plateMat = self . g_o . getresults ( phase , self . g_o . Plate . MaterialID , 'node' ) plateEl = self . g_o . getresults ( phase , self . g_o . Plate . ElementID , 'node' ) plateUx = self . g_o . getresults ( phase , self . g_o . Plate . Ux , 'node' ) plateUy = self . g_o . getresults ( phase , self . g_o . Plate . Uy , 'node' ) plateUt = self . g_o . getresults ( phase , self . g_o . Plate . Utot , 'node' ) platePUx = self . g_o . getresults ( phase , self . g_o . Plate . PUx , 'node' ) platePUy = self . g_o . getresults ( phase , self . g_o . Plate . PUy , 'node' ) platePUt = self . g_o . getresults ( phase , self . g_o . Plate . PUtot , 'node' ) plateU1 = self . g_o . getresults ( phase , self . g_o . Plate . U1 , 'node' ) plateU2 = self . g_o . getresults ( phase , self . g_o . Plate . U2 , 'node' ) plateM2D = self . g_o . getresults ( phase , self . g_o . Plate . M2D , 'node' ) plateQ2D = self . g_o . getresults ( phase , self . g_o . Plate . Q2D , 'node' ) plateNx2D = self . g_o . getresults ( phase , self . g_o . Plate . Nx2D , 'node' ) plateNz2D = self . g_o . getresults ( phase , self . g_o . Plate . Nz2D , 'node' ) print ( '...read Plate results ' + phase . Identification . value ) for x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( plateX , plateY , plateMat , plateEl , plateUx , plateUy , plateUt , platePUx , platePUy , platePUt , plateU1 , plateU2 , plateM2D , plateQ2D , plateNx2D , plateNz2D ): # add filters in here if necessary pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) pX . append ( x ) pY . append ( y ) pMat . append ( mat ) pEl . append ( el ) pUx . append ( ux ) pUy . append ( uy ) pUt . append ( ut ) pPUx . append ( pux ) pPUy . append ( puy ) pPUt . append ( put ) pU1 . append ( u1 ) pU2 . append ( u2 ) pM2D . append ( m2d ) pQ2D . append ( q2d ) pNx2D . append ( nx2d ) pNz2D . append ( nz2d ) except Exception as e : print ( '...exception reading Plate results ' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate results ' + str ( e )) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ( columns ) file . writelines ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( pPhaseName , pPhaseIdent , pX , pY , pMat , pEl , pUx , pUy , pUt , pPUx , pPUy , pPUt , pU1 , pU2 , pM2D , pQ2D , pNx2D , pNz2D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( pPhaseName , pPhaseIdent , pX , pY , pMat , pEl , pUx , pUy , pUt , pPUx , pPUy , pPUt , pU1 , pU2 , pM2D , pQ2D , pNx2D , pNz2D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( m2d ) row . append ( q2d ) row . append ( nx2d ) row . append ( nz2d ) self . insertValues ( row ) print ( 'getPlateResults Done' ) def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): return self . getEmbeddedBeamRowResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) def getEmbeddedBeamRowResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamRowResults' # init data for lists ePhaseName = [] ePhaseIdent = [] eY = [] eX = [] eMat = [] eEl = [] eUx = [] eUy = [] eUt = [] ePUx = [] ePUy = [] ePUt = [] eU1 = [] eU2 = [] eM2D = [] eQ2D = [] eNx2D = [] eNz2D = [] eTskin = [] eTlat = [] for phase in self . phaseOrder : #echo ResultTypes.EmbeddedBeamRow print ( 'Getting EmbeddedBeamRow results ' + phase . Identification . value ) try : embeamX = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . X , 'node' ) embeamY = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Y , 'node' ) embeamMat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . MaterialID , 'node' ) embeamEl = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . ElementID , 'node' ) embeamUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Ux , 'node' ) embeamUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Uy , 'node' ) embeamUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Utot , 'node' ) embeamPUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUx , 'node' ) embeamPUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUy , 'node' ) embeamPUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUtot , 'node' ) embeamU1 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . U1 , 'node' ) embeamU2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . U2 , 'node' ) embeamM2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . M2D , 'node' ) embeamQ2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Q2D , 'node' ) embeamNx2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Nx2D , 'node' ) embeamNz2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Nz2D , 'node' ) embeamTskin = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Tskin , 'node' ) embeamTlat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Tlat , 'node' ) print ( '...read EmbeddedBeamRow results ' + phase . Identification . value ) for x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( embeamX , embeamY , embeamMat , embeamEl , embeamUx , embeamUy , embeamUt , embeamPUx , embeamPUy , embeamPUt , embeamU1 , embeamU2 , embeamM2D , embeamQ2D , embeamNx2D , embeamNz2D , embeamTskin , embeamTlat ): # add filters in here if necessary ePhaseName . append ( phase . Name . value ) ePhaseIdent . append ( phase . Identification . value ) eX . append ( x ) eY . append ( y ) eMat . append ( mat ) eEl . append ( el ) eUx . append ( ux ) eUy . append ( uy ) eUt . append ( ut ) ePUx . append ( pux ) ePUy . append ( puy ) ePUt . append ( put ) eU1 . append ( u1 ) eU2 . append ( u2 ) eM2D . append ( m2d ) eQ2D . append ( q2d ) eNx2D . append ( nx2d ) eNz2D . append ( nz2d ) eTskin . append ( tskin ) eTlat . append ( tlat ) except : print ( '...exception reading EmbeddedBeamRow ' + phase . Identification . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m),Tskin(kN/m),Tlat(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( ename , eident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat ) for ename , eident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( ePhaseName , ePhaseIdent , eX , eY , eMat , eEl , eUx , eUy , eUt , ePUx , ePUy , ePUt , eU1 , eU2 , eM2D , eQ2D , eNx2D , eNz2D , eTskin , eTlat )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for ename , eident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( ePhaseName , ePhaseIdent , eX , eY , eMat , eEl , eUx , eUy , eUt , ePUx , ePUy , ePUt , eU1 , eU2 , eM2D , eQ2D , eNx2D , eNz2D , eTskin , eTlat ): row = [] row . append ( ename ) row . append ( eident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( m2d ) row . append ( q2d ) row . append ( nx2d ) row . append ( nz2d ) row . append ( tskin ) row . append ( tlat ) self . insertValues ( row ) print ( 'getEmbeddedBeamRowResults Done' ) def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' # init data for lists aPhaseName = [] aPhaseIdent = [] aY = [] aX = [] aMat = [] aEl = [] aUx = [] aUy = [] aPUx = [] aPUy = [] aPUt = [] aUt = [] aU1 = [] aU2 = [] aForce2D = [] for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : anchorX = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . X , 'node' ) anchorY = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Y , 'node' ) anchorMat = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . MaterialID , 'node' ) anchorEl = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . ElementID , 'node' ) anchorUx = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Ux , 'node' ) anchorUy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Uy , 'node' ) anchorUt = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Utot , 'node' ) anchorPUx = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUx , 'node' ) anchorPUy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUy , 'node' ) anchorPUt = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUtot , 'node' ) anchorU1 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U1 , 'node' ) anchorU2 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U2 , 'node' ) anchorForce2D = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . AnchorForce2D , 'node' ) for x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2D in zip ( anchorX , anchorY , anchorMat , anchorEl , anchorUx , anchorUy , anchorUt , anchorPUx , anchorPUy , anchorPUt , anchorU1 , anchorU2 , anchorForce2D ): # add filters in here if necessary aPhaseName . append ( phase . Name . value ) aPhaseIdent . append ( phase . Identification . value ) aX . append ( x ) aY . append ( y ) aMat . append ( mat ) aEl . append ( el ) aUx . append ( ux ) aUy . append ( uy ) aUt . append ( ut ) aPUx . append ( pux ) aPUy . append ( puy ) aPUt . append ( put ) aU1 . append ( u1 ) aU2 . append ( u2 ) aForce2D . append ( f2D ) except : print ( 'Exception reading NodeToNodeAnchor in phase' + phase . Name . value , phase . Identification . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d in zip ( aPhaseName , aPhaseIdent , aX , aY , aMat , aEl , aUx , aUy , aUt , aPUx , aPUy , aPUt , aU1 , aU2 , aForce2D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d in zip ( aPhaseName , aPhaseIdent , aX , aY , aMat , aEl , aUx , aUy , aUt , aPUx , aPUy , aPUt , aU1 , aU2 , aForce2D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( f2d ) self . insertValues ( row ) print ( 'getNodeToNodeAnchorResults Done' ) def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' # init data for lists aPhaseName = [] aPhaseIdent = [] aY = [] aX = [] aMat = [] aEl = [] aUx = [] aUy = [] aPUx = [] aPUy = [] aPUt = [] aUt = [] aU1 = [] aU2 = [] aForce2D = [] for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : anchorX = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . X , 'node' ) anchorY = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Y , 'node' ) anchorMat = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . MaterialID , 'node' ) anchorEl = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . ElementID , 'node' ) anchorUx = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Ux , 'node' ) anchorUy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Uy , 'node' ) anchorUt = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Utot , 'node' ) anchorPUx = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUx , 'node' ) anchorPUy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUy , 'node' ) anchorPUt = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUtot , 'node' ) anchorU1 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U1 , 'node' ) anchorU2 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U2 , 'node' ) anchorForce2D = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . AnchorForce2D , 'node' ) print ( 'Retrieved FixedEndAnchor results for ' , phase . Name . value ) for x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2D in zip ( anchorX , anchorY , anchorMat , anchorEl , anchorUx , anchorUy , anchorUt , anchorPUx , anchorPUy , anchorPUt , anchorU1 , anchorU2 , anchorForce2D ): # add filters in here if necessary aPhaseName . append ( phase . Name . value ) aPhaseIdent . append ( phase . Identification . value ) aX . append ( x ) aY . append ( y ) aMat . append ( mat ) aEl . append ( el ) aUx . append ( ux ) aUy . append ( uy ) aUt . append ( ut ) aPUx . append ( pux ) aPUy . append ( puy ) aPUt . append ( put ) aU1 . append ( u1 ) aU2 . append ( u2 ) aForce2D . append ( f2D ) except : print ( 'Exception reading FixedEndAnchor in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d in zip ( aPhaseName , aPhaseIdent , aX , aY , aMat , aEl , aUx , aUy , aUt , aPUx , aPUy , aPUt , aU1 , aU2 , aForce2D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d in zip ( aPhaseName , aPhaseIdent , aX , aY , aMat , aEl , aUx , aUy , aUt , aPUx , aPUy , aPUt , aU1 , aU2 , aForce2D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( f2d ) self . insertValues ( row ) print ( 'getFixedEndAnchorResults Done' ) def getInterfaceResults2016 ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' # init data for lists iPhaseName = [] iPhaseIdent = [] iY = [] iX = [] iMat = [] iUx = [] iUy = [] iUt = [] iPUx = [] iPUy = [] iPUt = [] iU1 = [] iU2 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : interX = self . g_o . getresults ( phase , self . g_o . Interface . X , 'node' ) interY = self . g_o . getresults ( phase , self . g_o . Interface . Y , 'node' ) interMat = self . g_o . getresults ( phase , self . g_o . Interface . MaterialID , 'node' ) interUx = self . g_o . getresults ( phase , self . g_o . Interface . Ux , 'node' ) interUy = self . g_o . getresults ( phase , self . g_o . Interface . Uy , 'node' ) interUt = self . g_o . getresults ( phase , self . g_o . Interface . Utot , 'node' ) interPUx = self . g_o . getresults ( phase , self . g_o . Interface . PUx , 'node' ) interPUy = self . g_o . getresults ( phase , self . g_o . Interface . PUy , 'node' ) interPUt = self . g_o . getresults ( phase , self . g_o . Interface . PUtot , 'node' ) interU1 = self . g_o . getresults ( phase , self . g_o . Interface . U1 , 'node' ) interU2 = self . g_o . getresults ( phase , self . g_o . Interface . U2 , 'node' ) interEffNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceEffectiveNormalStress , 'node' ) interTotNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceTotalNormalStress , 'node' ) interShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceShearStress , 'node' ) interRelShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceRelativeShearStress , 'node' ) interPExcess = self . g_o . getresults ( phase , self . g_o . Interface . PExcess , 'node' ) interPActive = self . g_o . getresults ( phase , self . g_o . Interface . PActive , 'node' ) interPSteady = self . g_o . getresults ( phase , self . g_o . Interface . PSteady , 'node' ) interPWater = self . g_o . getresults ( phase , self . g_o . Interface . PWater , 'node' ) interSuction = self . g_o . getresults ( phase , self . g_o . Interface . Suction , 'node' ) interEffSuction = self . g_o . getresults ( phase , self . g_o . Interface . EffSuction , 'node' ) for x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( interX , interY , interMat , interUx , interUy , interUt , interPUx , interPUy , interPUt , interU1 , interU2 , interEffNormalStress , interTotNormalStress , interShearStress , interRelShearStress , interPExcess , interPActive , interPSteady , interPWater , interSuction , interEffSuction ): # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iMat . append ( mat ) iUx . append ( ux ) iUy . append ( uy ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase' + phase . Name . value ) columns = \"Phase,PhaseIdent,X(m),Y(m),MaterialId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)\" formats = \" {} , {} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} \" if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iMat , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iMat , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResults2016 Done' ) def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' # init data for lists iPhaseName = [] iPhaseIdent = [] iY = [] iX = [] iMat = [] iEl = [] iUx = [] iUy = [] iUt = [] iPUx = [] iPUy = [] iPUt = [] iU1 = [] iU2 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : interX = self . g_o . getresults ( phase , self . g_o . Interface . X , 'node' ) interY = self . g_o . getresults ( phase , self . g_o . Interface . Y , 'node' ) interMat = self . g_o . getresults ( phase , self . g_o . Interface . MaterialID , 'node' ) interEl = self . g_o . getresults ( phase , self . g_o . Interface . ElementID , 'node' ) interUx = self . g_o . getresults ( phase , self . g_o . Interface . Ux , 'node' ) interUy = self . g_o . getresults ( phase , self . g_o . Interface . Uy , 'node' ) interUt = self . g_o . getresults ( phase , self . g_o . Interface . Utot , 'node' ) interPUx = self . g_o . getresults ( phase , self . g_o . Interface . PUx , 'node' ) interPUy = self . g_o . getresults ( phase , self . g_o . Interface . PUy , 'node' ) interPUt = self . g_o . getresults ( phase , self . g_o . Interface . PUtot , 'node' ) interU1 = self . g_o . getresults ( phase , self . g_o . Interface . U1 , 'node' ) interU2 = self . g_o . getresults ( phase , self . g_o . Interface . U2 , 'node' ) interEffNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceEffectiveNormalStress , 'node' ) interTotNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceTotalNormalStress , 'node' ) interShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceShearStress , 'node' ) interRelShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceRelativeShearStress , 'node' ) interPExcess = self . g_o . getresults ( phase , self . g_o . Interface . PExcess , 'node' ) interPActive = self . g_o . getresults ( phase , self . g_o . Interface . PActive , 'node' ) interPSteady = self . g_o . getresults ( phase , self . g_o . Interface . PSteady , 'node' ) interPWater = self . g_o . getresults ( phase , self . g_o . Interface . PWater , 'node' ) interSuction = self . g_o . getresults ( phase , self . g_o . Interface . Suction , 'node' ) interEffSuction = self . g_o . getresults ( phase , self . g_o . Interface . EffSuction , 'node' ) for x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( interX , interY , interMat , interEl , interUx , interUy , interUt , interPUx , interPUy , interPUt , interU1 , interU2 , interEffNormalStress , interTotNormalStress , interShearStress , interRelShearStress , interPExcess , interPActive , interPSteady , interPWater , interSuction , interEffSuction ): # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iMat . append ( mat ) iEl . append ( el ) iUx . append ( ux ) iUy . append ( uy ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase' + phase . Name . value ) columns = \"Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)\" formats = \" {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} \" if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iMat , iEl , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iMat , iEl , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResults Done' ) def getAllStructuralResults ( self , folderOut = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getPlateResults.csv' else : tableOut = 'getPlateResults' self . getPlateResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getEmbeddedBeamRowResults.csv' else : tableOut = 'getEmbeddedBeamRowResults' self . getEmbeddedBeamRowResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getNodeToNodeAnchorResults.csv' else : tableOut = 'getNodeToNodeAnchorResults' self . getNodeToNodeAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getFixedEndAnchorResults.csv' tableOut = None else : tableOut = 'getFixedEndAnchorResults' self . getFixedEndAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getInterfaceResults.csv' else : tableOut = 'getInterfaceResults' self . getInterfaceResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) def getAllStructuralResults2016 ( self , folderOut = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getPlateResults.csv' else : tableOut = 'getPlateResults' self . getPlateResults2016 ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getEmbeddedBeamRowResults.csv' else : tableOut = 'getEmbeddedBeamRowResults' self . getEmbeddedBeamRowResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getNodeToNodeAnchorResults.csv' else : tableOut = 'getNodeToNodeAnchorResults' self . getNodeToNodeAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getFixedEndAnchorResults.csv' tableOut = None else : tableOut = 'getFixedEndAnchorResults' self . getFixedEndAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getInterfaceResults.csv' else : tableOut = 'getInterfaceResults' self . getInterfaceResults2016 ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) Plaxis2dResults2016 Bases: Plaxis2dResults Source code in src\\ge_lib\\plaxis\\Plaxis2dResults2016.pyclass Plaxis2dResults2016 ( Plaxis2dResults ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResults2016 , self ) . __init__ ( server , host , port , password = password ) def version ( self ): return \"Plaxis2d2016\" def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' # init data for lists pPhaseName = [] pPhaseIdent = [] pY = [] pX = [] pMat = [] pUx = [] pUy = [] pUt = [] pPUx = [] pPUy = [] pPUt = [] pU1 = [] pU2 = [] pM2D = [] pQ2D = [] pNx2D = [] pNz2D = [] for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : plateX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) plateY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) plateMat = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialID , 'node' ) plateUx = self . g_o . getresults ( phase , self . g_o . Plate . Ux , 'node' ) plateUy = self . g_o . getresults ( phase , self . g_o . Plate . Uy , 'node' ) plateUt = self . g_o . getresults ( phase , self . g_o . Plate . Utot , 'node' ) platePUx = self . g_o . getresults ( phase , self . g_o . Plate . PUx , 'node' ) platePUy = self . g_o . getresults ( phase , self . g_o . Plate . PUy , 'node' ) platePUt = self . g_o . getresults ( phase , self . g_o . Plate . PUtot , 'node' ) plateU1 = self . g_o . getresults ( phase , self . g_o . Plate . U1 , 'node' ) plateU2 = self . g_o . getresults ( phase , self . g_o . Plate . U2 , 'node' ) plateM2D = self . g_o . getresults ( phase , self . g_o . Plate . M2D , 'node' ) plateQ2D = self . g_o . getresults ( phase , self . g_o . Plate . Q2D , 'node' ) plateNx2D = self . g_o . getresults ( phase , self . g_o . Plate . Nx2D , 'node' ) plateNz2D = self . g_o . getresults ( phase , self . g_o . Plate . Nz2D , 'node' ) print ( '...read Plate results ' + phase . Identification . value ) for x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( plateX , plateY , plateMat , plateUx , plateUy , plateUt , platePUx , platePUy , platePUt , plateU1 , plateU2 , plateM2D , plateQ2D , plateNx2D , plateNz2D ): # add filters in here if necessary pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) pX . append ( x ) pY . append ( y ) pMat . append ( mat ) pUx . append ( ux ) pUy . append ( uy ) pUt . append ( ut ) pPUx . append ( pux ) pPUy . append ( puy ) pPUt . append ( put ) pU1 . append ( u1 ) pU2 . append ( u2 ) pM2D . append ( m2d ) pQ2D . append ( q2d ) pNx2D . append ( nx2d ) pNz2D . append ( nz2d ) except : print ( '...exception reading Plate results ' + phase . Identification . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ( columns ) file . writelines ([ formats . format ( pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d ) for pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( pPhaseName , pPhaseIdent , pX , pY , pMat , pUx , pUy , pUt , pPUx , pPUy , pPUt , pU1 , pU2 , pM2D , pQ2D , pNx2D , pNz2D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( pPhaseName , pPhaseIdent , pX , pY , pMat , pUx , pUy , pUt , pPUx , pPUy , pPUt , pU1 , pU2 , pM2D , pQ2D , pNx2D , pNz2D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( m2d ) row . append ( q2d ) row . append ( nx2d ) row . append ( nz2d ) self . insertValues ( row ) print ( 'getPlateResults Done' ) def getEmbeddedBeamRowResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamRowResults' # init data for lists ePhaseName = [] ePhaseIdent = [] eY = [] eX = [] eMat = [] eUx = [] eUy = [] eUt = [] ePUx = [] ePUy = [] ePUt = [] eU1 = [] eU2 = [] eM2D = [] eQ2D = [] eNx2D = [] eNz2D = [] eTskin = [] eTlat = [] for phase in self . phaseOrder : #echo ResultTypes.EmbeddedBeamRow print ( 'Getting EmbeddedBeamRow results ' + phase . Identification . value ) try : embeamX = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . X , 'node' ) embeamY = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Y , 'node' ) embeamMat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . MaterialID , 'node' ) embeamUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Ux , 'node' ) embeamUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Uy , 'node' ) embeamUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Utot , 'node' ) embeamPUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUx , 'node' ) embeamPUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUy , 'node' ) embeamPUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUtot , 'node' ) embeamU1 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . U1 , 'node' ) embeamU2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . U2 , 'node' ) embeamM2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . M2D , 'node' ) embeamQ2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Q2D , 'node' ) embeamNx2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Nx2D , 'node' ) embeamNz2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Nz2D , 'node' ) embeamTskin = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Tskin , 'node' ) embeamTlat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Tlat , 'node' ) print ( '...read EmbeddedBeamRow results ' + phase . Identification . value ) for x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( embeamX , embeamY , embeamMat , embeamUx , embeamUy , embeamUt , embeamPUx , embeamPUy , embeamPUt , embeamU1 , embeamU2 , embeamM2D , embeamQ2D , embeamNx2D , embeamNz2D , embeamTskin , embeamTlat ): # add filters in here if necessary ePhaseName . append ( phase . Name . value ) ePhaseIdent . append ( phase . Identification . value ) eX . append ( x ) eY . append ( y ) eMat . append ( mat ) eUx . append ( ux ) eUy . append ( uy ) eUt . append ( ut ) ePUx . append ( pux ) ePUy . append ( puy ) ePUt . append ( put ) eU1 . append ( u1 ) eU2 . append ( u2 ) eM2D . append ( m2d ) eQ2D . append ( q2d ) eNx2D . append ( nx2d ) eNz2D . append ( nz2d ) eTskin . append ( tskin ) eTlat . append ( tlat ) except : print ( '...exception reading EmbeddedBeamRow ' + phase . Identification . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m),Tskin(kN/m),Tlat(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( ename , eident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat ) for ename , eident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( ePhaseName , ePhaseIdent , eX , eY , eMat , eUx , eUy , eUt , ePUx , ePUy , ePUt , eU1 , eU2 , eM2D , eQ2D , eNx2D , eNz2D , eTskin , eTlat )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for ename , eident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( ePhaseName , ePhaseIdent , eX , eY , eMat , eUx , eUy , eUt , ePUx , ePUy , ePUt , eU1 , eU2 , eM2D , eQ2D , eNx2D , eNz2D , eTskin , eTlat ): row = [] row . append ( ename ) row . append ( eident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( m2d ) row . append ( q2d ) row . append ( nx2d ) row . append ( nz2d ) row . append ( tskin ) row . append ( tlat ) self . insertValues ( row ) def getSoilResultsByRange ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , xMin = None , xMax = None , yMin = None , yMax = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) self . setRange ( xMin , xMax , yMin , yMax ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByRange' locY = [] locX = [] Uyy = [] Uxx = [] Utot = [] PUyy = [] PUxx = [] PUtot = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] PExcess = [] PActive = [] PSteady = [] PWater = [] Suct = [] EffSuct = [] pPhaseName = [] pPhaseIdent = [] # look into all phases, all steps for phase in self . phaseOrder : print ( 'Getting Soil results for Phase ' , phase . Name . value , phase . Identification . value ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) soilUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Ux , 'node' ) soilUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Uy , 'node' ) soilUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Utot , 'node' ) soilPUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUx , 'node' ) soilPUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUy , 'node' ) soilPUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUtot , 'node' ) soilEffSxx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigxxE , 'node' ) soilEffSyy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigyyE , 'node' ) soilEffSzz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigzzE , 'node' ) soilEffP1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective1 , 'node' ) soilEffP2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective2 , 'node' ) soilEffP3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective3 , 'node' ) soilPExcess = self . g_o . getresults ( phase , self . g_o . Soil . PExcess , 'node' ) soilPActive = self . g_o . getresults ( phase , self . g_o . Soil . PActive , 'node' ) soilPSteady = self . g_o . getresults ( phase , self . g_o . Soil . PSteady , 'node' ) soilPWater = self . g_o . getresults ( phase , self . g_o . Soil . PWater , 'node' ) soilSuction = self . g_o . getresults ( phase , self . g_o . Soil . Suction , 'node' ) soilEffSuction = self . g_o . getresults ( phase , self . g_o . Soil . EffSuction , 'node' ) for x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( soilX , soilY , soilUx , soilUy , soilUt , soilPUx , soilPUy , soilPUt , soilEffSxx , soilEffSyy , soilEffSzz , soilEffP1 , soilEffP2 , soilEffP3 , soilPExcess , soilPActive , soilPSteady , soilPWater , soilSuction , soilEffSuction ): if self . inRange ( x_val = x , y_val = y ) == True : print ( phase . Name . value , phase . Identification . value , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu ) pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) locX . append ( x ) locY . append ( y ) Uyy . append ( uy ) Uxx . append ( ux ) Utot . append ( ut ) PUyy . append ( puy ) PUxx . append ( pux ) PUtot . append ( put ) EffSxx . append ( esx ) EffSyy . append ( esy ) EffSzz . append ( esz ) EffP1 . append ( ep1 ) EffP2 . append ( ep2 ) EffP3 . append ( ep3 ) PExcess . append ( pe ) PActive . append ( pa ) PSteady . append ( ps ) PWater . append ( pw ) Suct . append ( su ) EffSuct . append ( esu ) columns = 'Phase,PhaseIdent,locX(m),locY(m),Ux(m),Uy(m),Utot(m), PUx(m), PUy(m), PUt(m), SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa),EffSuct(kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu ) for pname , pident , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( pPhaseName , pPhaseIdent , locX , locY , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct , EffSuct )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( pPhaseName , pPhaseIdent , locX , locY , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct , EffSuct ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( esx ) row . append ( esy ) row . append ( esz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pe ) row . append ( pa ) row . append ( ps ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getSoilResultsByRange Done' ) def getSoilResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints' locName = [] locY = [] locX = [] Uyy = [] Uxx = [] Utot = [] PUyy = [] PUxx = [] PUtot = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] PExcess = [] PActive = [] PSteady = [] PWater = [] Suct = [] EffSuct = [] pPhaseName = [] pPhaseIdent = [] fpoint = open ( filePoints , \"r\" ) while True : in_line = fpoint . readline () if in_line == \"\" : break print ( in_line ) [ name , nx , ny ] = in_line . split ( ',' ) self . NodeList . append ( self . PointXY ( name , nx , ny )) fpoint . close () for phase in self . phaseOrder : print ( 'Getting soil results ' + phase . Identification . value ) for pt in self . NodeList : try : ux = self . g_o . getsingleresult ( phase , self . g_o . Soil . Ux , ( pt . x , pt . y )) uy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uy , ( pt . x , pt . y )) ut = self . g_o . getsingleresult ( phase , self . g_o . Soil . Utot , ( pt . x , pt . y )) pux = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUx , ( pt . x , pt . y )) puy = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUy , ( pt . x , pt . y )) put = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUtot , ( pt . x , pt . y )) esx = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigxxE , ( pt . x , pt . y )) esy = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigyyE , ( pt . x , pt . y )) esz = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigzzE , ( pt . x , pt . y )) ep1 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective1 , ( pt . x , pt . y )) ep2 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective2 , ( pt . x , pt . y )) ep3 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective3 , ( pt . x , pt . y )) pe = self . g_o . getsingleresult ( phase , self . g_o . Soil . PExcess , ( pt . x , pt . y )) pa = self . g_o . getsingleresult ( phase , self . g_o . Soil . PActive , ( pt . x , pt . y )) ps = self . g_o . getsingleresult ( phase , self . g_o . Soil . PSteady , ( pt . x , pt . y )) pw = self . g_o . getsingleresult ( phase , self . g_o . Soil . PWater , ( pt . x , pt . y )) su = self . g_o . getsingleresult ( phase , self . g_o . Soil . Suction , ( pt . x , pt . y )) # print (pt.name, pt.x, pt.y, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) if ux != 'not found' : pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) locName . append ( pt . name ) locY . append ( pt . y ) locX . append ( pt . x ) Uyy . append ( uy ) Uxx . append ( ux ) Utot . append ( ut ) PUyy . append ( puy ) PUxx . append ( pux ) PUtot . append ( put ) EffSxx . append ( esx ) EffSyy . append ( esy ) EffSzz . append ( esz ) EffP1 . append ( ep1 ) EffP2 . append ( ep2 ) EffP3 . append ( ep3 ) PExcess . append ( pe ) PActive . append ( pa ) PSteady . append ( ps ) PWater . append ( pw ) Suct . append ( su ) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) print ( pt . name , pt . x , pt . y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su ) columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): try : print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , locname , float ( x ), float ( y ), float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( esx ), float ( esy ), float ( esz ), float ( ep1 ), float ( ep2 ), float ( ep3 ), float ( pe ), float ( pa ), float ( ps ), float ( pw ), float ( su )) for pname , pident , locname , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct )]) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) #~ print (pname, pident, locname, x, y, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) #~ print (pPhaseName, pPhaseIdent, locName, locX, locY, MaterialID, ElementID, Uxx, Uyy, Utot, PUxx, PUyy, PUtot, EffSxx, EffSyy, EffSzz, EffP1, EffP2, EffP3, PExcess, PActive, PSteady, PWater, Suct) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , locname , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct ): row = [] row . append ( pname ) row . append ( pident ) row . append ( locname ) row . append ( x ) row . append ( y ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( esx ) row . append ( esy ) row . append ( esz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pe ) row . append ( pa ) row . append ( ps ) row . append ( pw ) row . append ( su ) self . insertValues ( row ) print ( 'getSoilResultsByPoint Done' ) Plaxis2dResults2019 Bases: Plaxis2dResults Source code in src\\ge_lib\\plaxis\\Plaxis2dResults2019.pyclass Plaxis2dResults2019 ( Plaxis2dResults ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResults2019 , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis2d2019\" def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Nx2D(kN/m),Nz2D(kN/m),Q2D(kN/m),M2D(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U2 , 'node' ) M2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M2D , 'node' ) Q2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q2D , 'node' ) Nx2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx2D , 'node' ) Nz2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , nx2d , nz2d , q2d , m2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , nx2d , nz2d , q2d , m2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Nx2D , Nz2D , Q2D , M2D )] w . writeOutput () except Exception as e : print ( '...exception reading Plate results ' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getPlateResults Done' ) return Status . ELEMENT_PROCESSED def getPlateEnvelopeResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,ElementID,Ux_max(m),Ux_min(m),Uy_max(m),Uy_min(m),Utot_max(m),PUx_max(m),PUx_min(m),PUy_max(m),PUy_min(m),PUt_max(m),Nx2D_max(kN/m),Nx2D_min(kN/m),Nz2D_max(kN/m),Nz2D_min(kN/m),Q2D_max(kN/m),Q2D_min(kN/m),M2D_max(kNm/m),M2D_min(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMin , 'node' ) Ux_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMax , 'node' ) Uy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMin , 'node' ) Uy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMax , 'node' ) Ut_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UtotMax , 'node' ) PUx_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMin , 'node' ) PUx_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMax , 'node' ) PUy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMin , 'node' ) PUy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMax , 'node' ) PUt_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtotMax , 'node' ) M2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M_EnvelopeMax2D , 'node' ) M2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M_EnvelopeMin2D , 'node' ) Q2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q_EnvelopeMax2D , 'node' ) Q2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q_EnvelopeMin2D , 'node' ) Nx2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx_EnvelopeMax2D , 'node' ) Nx2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx_EnvelopeMin2D , 'node' ) Nz2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz_EnvelopeMax2D , 'node' ) Nz2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz_EnvelopeMin2D , 'node' ) print ( '...read Plate Envelope results ' + phase . Identification . value ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux_max , ux_min , uy_max , uy_min , ut_max , pux_max , pux_min , puy_max , puy_min , put_max , nx2d_max , nx2d_min , nz2d_max , nz2d_min , q2d_max , q2d_min , m2d_max , m2d_min ) for pname , pident , x , y , mat , el , ux_max , ux_min , uy_max , uy_min , ut_max , pux_max , pux_min , puy_max , puy_min , put_max , nx2d_max , nx2d_min , nz2d_max , nz2d_min , q2d_max , q2d_min , m2d_max , m2d_min in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux_max , Ux_min , Uy_max , Uy_min , Ut_max , PUx_max , PUx_min , PUy_max , PUy_min , PUt_max , Nx2D_max , Nx2D_min , Nz2D_max , Nz2D_min , Q2D_max , Q2D_min , M2D_max , M2D_min )] w . writeOutput () except Exception as e : print ( '...exception reading Plate Envelope results ' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate Envelope results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getPlateEmvelopeResults Done' ) return Status . ELEMENT_PROCESSED def getEmbeddedBeamRowResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamRowResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m),Tskin(kN/m),Tlat(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Embeddedbeam results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . U2 , 'node' ) M2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . M2D , 'node' ) Q2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Q2D , 'node' ) Nx2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Nx2D , 'node' ) Nz2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Nz2D , 'node' ) Tskin = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Tskin , 'node' ) Tlat = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Tlat , 'node' ) print ( 'Retrieved EmbeddedBeam results ' + phase . Identification . value ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , M2D , Q2D , Nx2D , Nz2D , Tskin , Tlat )] w . writeOutput () except Exception as e : print ( 'Exception reading EnbeddedBeamRow results in phase' + phase . Name . value ) self . logger . error ( '...exception reading EmbeddedBeamRow results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getEmbeddedBeamRowResults Done' ) return Status . ELEMENT_PROCESSED def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U2 , 'node' ) Force2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . AnchorForce2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Force2D )] w . writeOutput () except Exception as e : print ( 'Exception reading NodeToNodeAnchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading NodeToNodeAnchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getNodeToNodeAnchorResults Done' ) return Status . ELEMENT_PROCESSED def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U2 , 'node' ) Force2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . AnchorForce2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Force2D )] w . writeOutput () except Exception as e : print ( 'Exception reading NodeToNodeAnchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading NodeToNodeAnchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getFixedEndAnchorResults Done' ) return Status . ELEMENT_PROCESSED def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' columns = \"Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)\" formats = \" {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} \" w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U2 , 'node' ) EffNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , 'node' ) TotNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , 'node' ) ShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , 'node' ) RelShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , 'node' ) PExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PExcess , 'node' ) PActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PActive , 'node' ) PSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PSteady , 'node' ) PWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PWater , 'node' ) Suction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Suction , 'node' ) EffSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . EffSuction , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , EffNormalStress , TotNormalStress , ShearStress , RelShearStress , PExcess , PActive , PSteady , PWater , Suction , EffSuction )] w . writeOutput () except Exception as e : print ( 'Exception reading Interface results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Interface results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getInterfaceResults Done' ) return Status . ELEMENT_PROCESSED def getSoilResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints' locName = [] locY = [] locX = [] MaterialID = [] ElementID = [] Uyy = [] Uxx = [] Utot = [] PUyy = [] PUxx = [] PUtot = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] PExcess = [] PActive = [] PSteady = [] PWater = [] Suct = [] pPhaseName = [] pPhaseIdent = [] if filePoints : fpoint = open ( filePoints , \"r\" ) while True : in_line = fpoint . readline () if in_line == \"\" : break print ( in_line ) [ name , nx , ny ] = in_line . split ( ',' ) self . NodeList . append ( self . PointXY ( name , nx , ny )) fpoint . close () for phase in self . phaseOrder : print ( 'Getting soil results ' + phase . Identification . value ) for pt in self . NodeList : try : mat = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . MaterialID , ( pt . x , pt . y )) el = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . ElementID , ( pt . x , pt . y )) ux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Ux , ( pt . x , pt . y )) uy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uy , ( pt . x , pt . y )) ut = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Utot , ( pt . x , pt . y )) pux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUx , ( pt . x , pt . y )) puy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUy , ( pt . x , pt . y )) put = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUtot , ( pt . x , pt . y )) esx = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigxxE , ( pt . x , pt . y )) esy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigyyE , ( pt . x , pt . y )) esz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigzzE , ( pt . x , pt . y )) ep1 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective1 , ( pt . x , pt . y )) ep2 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective2 , ( pt . x , pt . y )) ep3 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective3 , ( pt . x , pt . y )) pe = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PExcess , ( pt . x , pt . y )) pa = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PActive , ( pt . x , pt . y )) ps = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PSteady , ( pt . x , pt . y )) pw = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PWater , ( pt . x , pt . y )) su = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Suction , ( pt . x , pt . y )) # print (pt.name, pt.x, pt.y, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) if ux != 'not found' : pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) locName . append ( pt . name ) locY . append ( pt . y ) locX . append ( pt . x ) MaterialID . append ( int ( float ( mat ) + .1 )) ElementID . append ( int ( float ( el ) + .1 )) Uyy . append ( uy ) Uxx . append ( ux ) Utot . append ( ut ) PUyy . append ( puy ) PUxx . append ( pux ) PUtot . append ( put ) EffSxx . append ( esx ) EffSyy . append ( esy ) EffSzz . append ( esz ) EffP1 . append ( ep1 ) EffP2 . append ( ep2 ) EffP3 . append ( ep3 ) PExcess . append ( pe ) PActive . append ( pa ) PSteady . append ( ps ) PWater . append ( pw ) Suct . append ( su ) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) print ( pt . name , pt . x , pt . y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su ) columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to string....' ) rows = '' . join ([ formats . format ( pname , pident , locname , float ( x ), float ( y ), mat , el , float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( esx ), float ( esy ), float ( esz ), float ( ep1 ), float ( ep2 ), float ( ep3 ), float ( pe ), float ( pa ), float ( ps ), float ( pw ), float ( su )) for pname , pident , locname , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct )]) return columns + rows if ( fileOut != None and tableOut == None ): try : print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , locname , float ( x ), float ( y ), mat , el , float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( esx ), float ( esy ), float ( esz ), float ( ep1 ), float ( ep2 ), float ( ep3 ), float ( pe ), float ( pa ), float ( ps ), float ( pw ), float ( su )) for pname , pident , locname , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct )]) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) #~ print (pname, pident, locname, x, y, mat, el, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) #~ print (pPhaseName, pPhaseIdent, locName, locX, locY, MaterialID, ElementID, Uxx, Uyy, Utot, PUxx, PUyy, PUtot, EffSxx, EffSyy, EffSzz, EffP1, EffP2, EffP3, PExcess, PActive, PSteady, PWater, Suct) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , locname , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct ): row = [] row . append ( pname ) row . append ( pident ) row . append ( locname ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( esx ) row . append ( esy ) row . append ( esz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pe ) row . append ( pa ) row . append ( ps ) row . append ( pw ) row . append ( su ) self . insertValues ( row ) print ( 'getSoilResultsByPoint Done' ) Plaxis2dResults2023 Bases: Plaxis2dResults2019 Source code in src\\ge_lib\\plaxis\\Plaxis2dResults2023.pyclass Plaxis2dResults2023 ( Plaxis2dResults2019 ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResults2019 , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis2d2023\" def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Nx2D(kN/m),Nz2D(kN/m),Q2D(kN/m),M2D(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U2 , 'node' ) M2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M2D , 'node' ) Q2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q2D , 'node' ) Nx2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx2D , 'node' ) Nz2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , nx2d , nz2d , q2d , m2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , nx2d , nz2d , q2d , m2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Nx2D , Nz2D , Q2D , M2D )] w . writeOutput () except Exception as e : print ( '...exception reading Plate results ' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getPlateResults Done' ) return Status . ELEMENT_PROCESSED def getPlateEnvelopeResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,ElementID,Ux_max(m),Ux_min(m),Uy_max(m),Uy_min(m),Utot_max(m),PUx_max(m),PUx_min(m),PUy_max(m),PUy_min(m),PUt_max(m),Nx2D_max(kN/m),Nx2D_min(kN/m),Nz2D_max(kN/m),Nz2D_min(kN/m),Q2D_max(kN/m),Q2D_min(kN/m),M2D_max(kNm/m),M2D_min(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMin , 'node' ) Ux_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMax , 'node' ) Uy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMin , 'node' ) Uy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMax , 'node' ) Ut_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UtotMax , 'node' ) PUx_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMin , 'node' ) PUx_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMax , 'node' ) PUy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMin , 'node' ) PUy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMax , 'node' ) PUt_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtotMax , 'node' ) M2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M_EnvelopeMax2D , 'node' ) M2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M_EnvelopeMin2D , 'node' ) Q2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q_EnvelopeMax2D , 'node' ) Q2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q_EnvelopeMin2D , 'node' ) Nx2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx_EnvelopeMax2D , 'node' ) Nx2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx_EnvelopeMin2D , 'node' ) Nz2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz_EnvelopeMax2D , 'node' ) Nz2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz_EnvelopeMin2D , 'node' ) print ( '...read Plate Envelope results ' + phase . Identification . value ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux_max , ux_min , uy_max , uy_min , ut_max , pux_max , pux_min , puy_max , puy_min , put_max , nx2d_max , nx2d_min , nz2d_max , nz2d_min , q2d_max , q2d_min , m2d_max , m2d_min ) for pname , pident , x , y , mat , el , ux_max , ux_min , uy_max , uy_min , ut_max , pux_max , pux_min , puy_max , puy_min , put_max , nx2d_max , nx2d_min , nz2d_max , nz2d_min , q2d_max , q2d_min , m2d_max , m2d_min in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux_max , Ux_min , Uy_max , Uy_min , Ut_max , PUx_max , PUx_min , PUy_max , PUy_min , PUt_max , Nx2D_max , Nx2D_min , Nz2D_max , Nz2D_min , Q2D_max , Q2D_min , M2D_max , M2D_min )] w . writeOutput () except Exception as e : print ( '...exception reading Plate Envelope results ' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate Envelope results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getPlateEmvelopeResults Done' ) return Status . ELEMENT_PROCESSED def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m),Tskin(kN/m),Tlat(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Embeddedbeam results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U2 , 'node' ) M2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M2D , 'node' ) Q2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q2D , 'node' ) Nx2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Nx2D , 'node' ) Nz2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Nz2D , 'node' ) Tskin = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tskin , 'node' ) Tlat = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat , 'node' ) print ( 'Retrieved EmbeddedBeam results ' + phase . Identification . value ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , M2D , Q2D , Nx2D , Nz2D , Tskin , Tlat )] w . writeOutput () except Exception as e : print ( 'Exception reading EnbeddedBeam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading EmbeddedBeam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getEmbeddedBeamResults Done' ) return Status . ELEMENT_PROCESSED def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' columns = \"Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)\" formats = \" {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} \" w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U2 , 'node' ) EffNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , 'node' ) TotNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , 'node' ) ShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , 'node' ) RelShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , 'node' ) PExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PExcess , 'node' ) PActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PActive , 'node' ) PSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PSteady , 'node' ) PWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PWater , 'node' ) Suction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Suction , 'node' ) EffSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . EffSuction , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , EffNormalStress , TotNormalStress , ShearStress , RelShearStress , PExcess , PActive , PSteady , PWater , Suction , EffSuction )] w . writeOutput () except Exception as e : print ( 'Exception reading Interface results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Interface results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getInterfaceResults Done' ) return Status . ELEMENT_PROCESSED def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U2 , 'node' ) Force2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . AnchorForce2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Force2D )] w . writeOutput () except Exception as e : print ( 'Exception reading NodeToNodeAnchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading NodeToNodeAnchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getNodeToNodeAnchorResults Done' ) return Status . ELEMENT_PROCESSED def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U2 , 'node' ) Force2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . AnchorForce2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Force2D )] w . writeOutput () except Exception as e : print ( 'Exception reading NodeToNodeAnchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading NodeToNodeAnchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getFixedEndAnchorResults Done' ) return Status . ELEMENT_PROCESSED Plaxis2dResultsConnectV2 Bases: Plaxis2dResults2019 Source code in src\\ge_lib\\plaxis\\Plaxis2dResultsConnectV2.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 class Plaxis2dResultsConnectV2 ( Plaxis2dResults2019 ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResultsConnectV2 , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis2dConnectV2\" def getInterfaceResultsByPointsByStep ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , stepList = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if not filePoints is None : self . loadXYNodeList ( filePoints ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResultsByPointsStep' print ( 'FileOut=' , fileOut ) # initialize data for lists iPhaseName = [] iPhaseIdent = [] iLocName = [] iY = [] iX = [] iMat = [] iUx = [] iUy = [] iUt = [] iPUx = [] iPUy = [] iPUt = [] iU1 = [] iU2 = [] iVx = [] iVy = [] iVt = [] iAx = [] iAy = [] iAt = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( \"Getting Interface results for Phase: {} \" . format ( phase . Name . value )) for step in phase : if stepList is None or step . Name . value in stepList : print ( \"Getting Interface results for Step: {} \" . format ( step . Name . value )) for pt in self . NodeList : print ( \"Getting Interface results for Node: {} \" . format ( pt . name )) try : x = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . X , ( pt . x , pt . y )) y = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Y , ( pt . x , pt . y )) mat = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . MaterialID , ( pt . x , pt . y )) ux = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Ux , ( pt . x , pt . y )) uy = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Uy , ( pt . x , pt . y )) ut = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Utot , ( pt . x , pt . y )) pux = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PUx , ( pt . x , pt . y )) puy = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PUy , ( pt . x , pt . y )) put = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PUtot , ( pt . x , pt . y )) u1 = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . U1 , ( pt . x , pt . y )) u2 = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . U2 , ( pt . x , pt . y )) vx = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Vx , ( pt . x , pt . y )) vy = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Vy , ( pt . x , pt . y )) vt = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Vtot , ( pt . x , pt . y )) ax = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Ax , ( pt . x , pt . y )) ay = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Ay , ( pt . x , pt . y )) at = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Atot , ( pt . x , pt . y )) ens = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , ( pt . x , pt . y )) tns = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , ( pt . x , pt . y )) ss = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . InterfaceShearStress , ( pt . x , pt . y )) rss = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , ( pt . x , pt . y )) pe = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PExcess , ( pt . x , pt . y )) pa = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PActive , ( pt . x , pt . y )) pst = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PSteady , ( pt . x , pt . y )) pw = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PWater , ( pt . x , pt . y )) su = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Suction , ( pt . x , pt . y )) esu = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . EffSuction , ( pt . x , pt . y )) if ux == 'not found' : print ( \"results for {} {} ( {} {} ) not found\" . format ( step . Name . value , pt . name , pt . x , pt . y )) if ux != 'not found' : print ( \"results for {} {} ( {} {} ) retrieved\" . format ( step . Name . value , pt . name , pt . x , pt . y )) # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iMat . append ( mat ) iLocName . append ( pt . name ) iUx . append ( ux ) iUy . append ( uy ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iVx . append ( vx ) iVy . append ( vy ) iVt . append ( vt ) iAx . append ( ax ) iAy . append ( ay ) iAt . append ( at ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase:' + phase . Name . value + ' step:' + step . Name . value ) break columns = 'Phase,PhaseIdent,LocName,X(m),Y(m),MaterialID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Vx(m/s),Vy(m/s),Vt(m/s),Ax(m/s2),Ay(m/s2),At(m/s2),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to string....' ) rows = '' . join ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( mat ), float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( u1 ), float ( u2 ), float ( vx ), float ( vy ), float ( vt ), float ( ax ), float ( ay ), float ( at ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , vx , vy , vt , ax , ay , at , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iMat , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iVx , iVy , iVt , iAx , iAy , iAt , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' #~ print(iLocName) #~ print(iPhaseName) #~ print(iPhaseIdent) #~ print(iX) #~ print(iY) #~ print(iZ) #~ print(iMat) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( mat ), float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( u1 ), float ( u2 ), float ( vx ), float ( vy ), float ( vt ), float ( ax ), float ( ay ), float ( at ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , vx , vy , vt , ax , ay , at , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iMat , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iVx , iVy , iVt , iAx , iAy , iAt , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , loc , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , vx , vy , vt , ax , ay , at , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iMat , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iVx , iVy , iVt , iAx , iAy , iAt , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( loc ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( vx ) row . append ( vy ) row . append ( vt ) row . append ( ax ) row . append ( ay ) row . append ( at ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResultsByPointsByStep Done' ) def getSoilResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): NotFound = [ 'not found' , 'nan' , 'Nan' ] self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints' if filePoints : fpoint = open ( filePoints , \"r\" ) while True : in_line = fpoint . readline () if in_line == \"\" : break print ( in_line ) try : [ name , nx , ny ] = in_line . split ( ',' ) self . NodeList . append ( self . PointXY ( name , nx , ny )) except Exception as e : print ( str ( e )) return fpoint . close () columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting soil results ' + phase . Identification . value ) for pt in self . NodeList : try : mat = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . MaterialID , ( pt . x , pt . y )) el = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . ElementID , ( pt . x , pt . y )) ux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Ux , ( pt . x , pt . y )) uy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uy , ( pt . x , pt . y )) ut = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Utot , ( pt . x , pt . y )) pux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUx , ( pt . x , pt . y )) puy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUy , ( pt . x , pt . y )) put = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUtot , ( pt . x , pt . y )) esx = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigxxE , ( pt . x , pt . y )) esy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigyyE , ( pt . x , pt . y )) esz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigzzE , ( pt . x , pt . y )) ep1 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective1 , ( pt . x , pt . y )) ep2 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective2 , ( pt . x , pt . y )) ep3 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective3 , ( pt . x , pt . y )) pe = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PExcess , ( pt . x , pt . y )) pa = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PActive , ( pt . x , pt . y )) ps = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PSteady , ( pt . x , pt . y )) pw = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PWater , ( pt . x , pt . y )) su = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Suction , ( pt . x , pt . y )) w . rowsOut = [ formats . format ( phase . Name . value , phase . Identification . value , pt . name , pt . x , pt . y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su )] w . writeOutput () except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) print ( phase . Name . value , phase . Identification . value , pt . name , pt . x , pt . y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su ) print ( 'getSoilResultsByPoint Done' ) Plaxis2dResultsConnectV22 Bases: Plaxis2dResultsConnectV2 Source code in src\\ge_lib\\plaxis\\Plaxis2dResultsConnectV22.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 class Plaxis2dResultsConnectV22 ( Plaxis2dResultsConnectV2 ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResultsConnectV22 , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis2dConnectV22\" def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m),Tskin(kN/m),Tlat(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Embeddedbeam results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U2 , 'node' ) M2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M2D , 'node' ) Q2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q2D , 'node' ) Nx2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Nx2D , 'node' ) Nz2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Nz2D , 'node' ) Tskin = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tskin , 'node' ) Tlat = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat , 'node' ) print ( 'Retrieved EmbeddedBeam results ' + phase . Identification . value ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , M2D , Q2D , Nx2D , Nz2D , Tskin , Tlat )] w . writeOutput () except Exception as e : print ( 'Exception reading EnbeddedBeam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading EmbeddedBeam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getEmbeddedBeamResults Done' ) return Status . ELEMENT_PROCESSED Plaxis3dResults Bases: PlaxisScripting Source code in src\\ge_lib\\plaxis\\Plaxis3dResults.pyclass Plaxis3dResults ( PlaxisScripting ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis3dResults , self ) . __init__ ( server , host , port , password ) if ( self . s_o . is_3d == False ): raise ValueError ( 'This is a Plaxis3d output reader, but the output plaxis server is not Plaxis3d' ); def version ( self ): return \"Plaxis3d\" def getPhaseDetails ( self ): results = [] allpassed = True print ( 'getting output phase details' ) for phase in self . g_o . Phases [:]: results . append ( \" {} , {} , {} \\n \" . format ( phase . Name , phase . Identification , phase . Number )) return allpassed , results def getSoilResultsByRange ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , xMin = 0.0 , xMax = 0.0 , yMin = 0.0 , yMax = 0.0 , zMin = 0.0 , zMax = 0.0 , Output = \"stress, displacement,pwp\" ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByRange' PhaseName = [] PhaseIdent = [] locY = [] locX = [] locZ = [] Uyy = [] Uxx = [] Uzz = [] Utot = [] PUyy = [] PUxx = [] PUzz = [] PUtot = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] pExcess = [] pActive = [] pSteady = [] pWater = [] phasenames = [] # look into all phases, all steps for phase in self . phaseOrder : print ( 'Getting soil results for Phase ' , phase . Name . value ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) soilZ = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Z , 'node' ) print ( 'Coordinates retrieved for Phase ' , phase . Name . value ) if \"displacement\" in Output : soilUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Ux , 'node' ) soilUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Uy , 'node' ) soilUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Uz , 'node' ) soilUtot = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Utot , 'node' ) soilPUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUx , 'node' ) soilPUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUy , 'node' ) soilPUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUz , 'node' ) soilPUtot = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUtot , 'node' ) print ( 'Displacments retrieved for Phase ' , phase . Name . value ) if \"stress\" in Output : soilEffSxx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigxxE , 'node' ) soilEffSyy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigyyE , 'node' ) soilEffSzz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigzzE , 'node' ) soilEffP1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective1 , 'node' ) soilEffP2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective2 , 'node' ) soilEffP3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective3 , 'node' ) print ( 'Stresses retrieved for Phase ' , phase . Name . value ) if \"pwp\" in Output : soilPExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PExcess , 'node' ) soilPActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PActive , 'node' ) soilPSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PSteady , 'node' ) soilPWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PWater , 'node' ) print ( 'PWP retrieved for Phase ' , phase . Name . value ) print ( 'Preparing to cycle through results for nodes within range...x(' , xMin , xMax , ') y(' , yMin , yMax , ') z (' , zMin , zMax , ')' ) if \"displacement\" in Output and \"stress\" in Output and \"pwp\" in Output : for x , y , z , ux , uy , uz , utot , pux , puy , puz , putot , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw in zip ( soilX , soilY , soilZ , soilUx , soilUy , soilUz , soilUtot , soilPUx , soilPUy , soilPUz , soilPUtot , soilEffSxx , soilEffSyy , soilEffSzz , soilEffP1 , soilEffP2 , soilEffP3 , soilPExcess , soilPActive , soilPSteady , soilPWater ): if xMin < x < xMax : if yMin < y < yMax : if zMin < z < zMax : print ( 'Adding Results for' , x , y , z ) PhaseName . append ( phase . Name . value ) PhaseIdent . append ( phase . Identification . value ) locX . append ( x ) locY . append ( y ) locZ . append ( z ) Uxx . append ( ux ) Uyy . append ( uy ) Uzz . append ( uz ) Utot . append ( utot ) PUxx . append ( pux ) PUyy . append ( puy ) PUzz . append ( puz ) PUtot . append ( putot ) EffSxx . append ( esxx ) EffSyy . append ( esyy ) EffSzz . append ( eszz ) EffP1 . append ( esxx ) EffP2 . append ( esyy ) EffP3 . append ( eszz ) pExcess . append ( pex ) pActive . append ( pact ) pSteady . append ( pst ) pWater . append ( pw ) columns = 'Phase, PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),SigxxE(kPa),SigyyE(kPa),SigzzE(kPa),SigEff1(kPa),SigEff2(kPa),SigEff3(kPa),pExcess(kPa),pActive(kPa),pSteady(kPa),pWater(kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , put , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw ) for pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , put , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw in zip ( PhaseName , PhaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , pExcess , pActive , pSteady , pWater )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , put , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw ) for pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , put , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw in zip ( PhaseName , PhaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , pExcess , pActive , pSteady , pWater )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , put , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw in zip ( PhaseName , PhaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , pExcess , pActive , pSteady , pWater ): row = [] row . append ( pName ) row . append ( pIdent ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( utot ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( esxx ) row . append ( esyy ) row . append ( eszz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pex ) row . append ( pact ) row . append ( pst ) row . append ( pw ) self . insertValues ( row ) if \"displacement\" in Output and not \"stress\" in Output and not \"pwp\" in Output : for x , y , z , ux , uy , uz , utot , pux , puy , puz , dutot in zip ( soilX , soilY , soilZ , soilUx , soilUy , soilUz , soilUtot , soilPUx , soilPUy , soilPUz , soilPUtot ): print ( x , y , z ) if xMin < x < xMax : if yMin < y < yMax : if zMin < z < zMax : print ( 'Adding Results for' , x , y , z ) PhaseName . append ( phase . Name . value ) PhaseIdent . append ( phase . Identification . value ) locX . append ( x ) locY . append ( y ) locZ . append ( z ) Uxx . append ( ux ) Uyy . append ( uy ) Uzz . append ( uz ) Utot . append ( utot ) PUxx . append ( pux ) PUyy . append ( puy ) PUzz . append ( puz ) PUtot . append ( putot ) columns = 'Phase, PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , putot ) for x , y , z , ux , uy , uz , utot , pux , puy , puz , dutot in zip ( PhaseName , PhaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for x , y , z , ux , uy , uz , utot , pux , puy , puz , dutot in zip ( PhaseName , PhaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot ): row = [] row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( utot ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( dutot ) self . insertValues ( row ) def getSoilResultsByPoints ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , Output = \"stress, displacement,pwp\" , xMin = 0.0 , xMax = 0.0 , yMin = 0.0 , yMax = 0.0 , zMin = 0.0 , zMax = 0.0 , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByRange2' phaseName = [] phaseIdent = [] locY = [] locX = [] locZ = [] Uyy = [] Uxx = [] Uzz = [] Utot = [] PUyy = [] PUxx = [] PUzz = [] PUtot = [] self . setNodeList ( xMin , xMax , yMin , yMax , zMin , zMax ) for phase in self . phaseOrder : print ( 'retrieving results for ' , phase . Name . value ) for pt in self . NodeList : ux = self . g_o . getsingleresult ( phase , self . g_o . Soil . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uz , ( pt . x , pt . y , pt . z )) utot = self . g_o . getsingleresult ( phase , self . g_o . Soil . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUz , ( pt . x , pt . y , pt . z )) putot = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUtot , ( pt . x , pt . y , pt . z )) # sxx = self.g_o.getsingleresult(phase, self.g_o.Soil.SigxxE, (pt.x, pt.y, pt.z)) # syy = self.g_o.getsingleresult(phase, self.g_o.Soil.SigyyE, (pt.x, pt.y, pt.z)) # szz = self.g_o.getsingleresult(phase, self.g_o.Soil.SigzzE, (pt.x, pt.y, pt.z)) # xpwp = self.g_o.getsingleresult(phase, self.g_o.Soil.PExcess, (pt.x, pt.y, pt.z)) print ( 'results for ' , phase . Name . value , pt . x , pt . y , pt . z , ' retrieved' ) phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) locX . append ( pt . x ) locY . append ( pt . y ) locZ . append ( pt . z ) Uxx . append ( ux ) Uyy . append ( uy ) Uzz . append ( uz ) Utot . append ( utot ) PUxx . append ( pux ) PUyy . append ( puy ) PUzz . append ( puy ) PUtot . append ( putot ) columns = 'Phase, PhaseIdent,X(m),Y(m),Z(m),MaterialId,ElementId,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , putot ) for pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , dutot in zip ( phaseName , phaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , dutot in zip ( phaseName , phaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot ): row = [] row . append ( pName ) row . append ( pIdent ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( utot ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( dutot ) self . insertValues ( row ) def getSoilResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . getSoilResultsByPoints_Displacements ( filePoints = filePoints , fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd , ) def getSoilResultsByPoints_Displacements ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if not filePoints is None : self . loadXYZNodeList ( filePoints ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints_Displacements' phaseName = [] phaseIdent = [] locName = [] locY = [] locX = [] locZ = [] Uyy = [] Uxx = [] Uzz = [] Utot = [] PUyy = [] PUxx = [] PUzz = [] PUtot = [] Epsyy = [] Epsxx = [] Epszz = [] for phase in self . phaseOrder : print ( phase . Name . value ) for pt in self . NodeList : ux = self . g_o . getsingleresult ( phase , self . g_o . Soil . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uz , ( pt . x , pt . y , pt . z )) utot = self . g_o . getsingleresult ( phase , self . g_o . Soil . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUz , ( pt . x , pt . y , pt . z )) putot = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUtot , ( pt . x , pt . y , pt . z )) ex = self . g_o . getsingleresult ( phase , self . g_o . Soil . Epsxx , ( pt . x , pt . y , pt . z )) ey = self . g_o . getsingleresult ( phase , self . g_o . Soil . Epsyy , ( pt . x , pt . y , pt . z )) ez = self . g_o . getsingleresult ( phase , self . g_o . Soil . Epszz , ( pt . x , pt . y , pt . z )) if ux != 'not found' : print ( 'results for ' , phase . Name . value , pt . x , pt . y , pt . z , ' retrieved' ) phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) locName . append ( pt . name ) locX . append ( pt . x ) locY . append ( pt . y ) locZ . append ( pt . z ) Uxx . append ( ux ) Uyy . append ( uy ) Uzz . append ( uz ) Utot . append ( utot ) PUxx . append ( pux ) PUyy . append ( puy ) PUzz . append ( puz ) PUtot . append ( putot ) Epsxx . append ( ex ) Epsyy . append ( ey ) Epszz . append ( ez ) columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),locZ(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),Epsxx,Epsyy,Epszz' formats = ' {} , {} , {} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} ' if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pName , pIdent , locname , float ( x ), float ( y ), float ( z ), float ( ux ), float ( uy ), float ( uz ), float ( utot ), float ( pux ), float ( puy ), float ( puz ), float ( putot ), float ( ex ), float ( ey ), float ( ez )) for pName , pIdent , locname , x , y , z , ux , uy , uz , utot , pux , puy , puz , putot , ex , ey , ez in zip ( phaseName , phaseIdent , locName , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot , Epsxx , Epsyy , Epszz )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pName , pIdent , locname , x , y , z , ux , uy , uz , utot , pux , puy , puz , putot , ex , ey , ez in zip ( phaseName , phaseIdent , locName , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot , Epsxx , Epsyy , Epszz ): row = [] row . append ( pName ) row . append ( pIdent ) row . append ( locname ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( utot ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( putot ) row . append ( ex ) row . append ( ey ) row . append ( ez ) self . insertValues ( row ) def getSoilResultsByPoints_Stresses ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if not filePoints is None : self . loadXYZNodeList ( filePoints ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints_Stresses' phaseName = [] phaseIdent = [] locName = [] locY = [] locX = [] locZ = [] Uyy = [] Uxx = [] Uzz = [] Utot = [] SigxxT = [] SigyyT = [] SigzzT = [] Sigxy = [] Sigyz = [] Sigzx = [] for phase in self . phaseOrder : print ( phase . Name . value ) for pt in self . NodeList : ux = self . g_o . getsingleresult ( phase , self . g_o . Soil . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uz , ( pt . x , pt . y , pt . z )) utot = self . g_o . getsingleresult ( phase , self . g_o . Soil . Utot , ( pt . x , pt . y , pt . z )) sig_xxt = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigxxT , ( pt . x , pt . y , pt . z )) sig_yyt = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigyyT , ( pt . x , pt . y , pt . z )) sig_zzt = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigzzT , ( pt . x , pt . y , pt . z )) sig_xy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Sigxy , ( pt . x , pt . y , pt . z )) sig_yz = self . g_o . getsingleresult ( phase , self . g_o . Soil . Sigyz , ( pt . x , pt . y , pt . z )) sig_zx = self . g_o . getsingleresult ( phase , self . g_o . Soil . Sigzx , ( pt . x , pt . y , pt . z )) if ux != 'not found' : print ( 'results for ' , phase . Name . value , pt . x , pt . y , pt . z , ' retrieved' ) phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) locName . append ( pt . name ) locX . append ( pt . x ) locY . append ( pt . y ) locZ . append ( pt . z ) Uxx . append ( ux ) Uyy . append ( uy ) Uzz . append ( uz ) Utot . append ( utot ) SigxxT . append ( sig_xxt ) SigyyT . append ( sig_yyt ) SigzzT . append ( sig_zzt ) Sigxy . append ( sig_xy ) Sigyz . append ( sig_yz ) Sigzx . append ( sig_zx ) columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),locZ(m),Ux(m),Uy(m),Uz(m),Utot(m),SxxT,SyyT,SzzT,Sxy,Syz,Szx' formats = ' {} , {} , {} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} ' if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' try : with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pName , pIdent , locname , float ( x ), float ( y ), float ( z ), float ( ux ), float ( uy ), float ( uz ), float ( utot ), float ( sig_xxt ), float ( sig_yyt ), float ( sig_zzt ), float ( sig_xy ), float ( sig_yz ), float ( sig_zx )) for pName , pIdent , locname , x , y , z , ux , uy , uz , utot , sig_xxt , sig_yyt , sig_zzt , sig_xy , sig_yz , sig_zx in zip ( phaseName , phaseIdent , locName , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , SigxxT , SigyyT , SigzzT , Sigxy , Sigyz , Sigzx )]) except : print ( 'Exception writing fileoutput' ) print ( \"end\" ) file . close def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' print ( 'FileOut=' , fileOut ) # initialise data for lists pPhaseName = [] pPhaseIdent = [] pY = [] pX = [] pZ = [] pMat = [] pUx = [] pUy = [] pUz = [] pUt = [] pPUx = [] pPUy = [] pPUz = [] pPUt = [] pU1 = [] pU2 = [] pU3 = [] pM11 = [] pM22 = [] pM12 = [] pQ12 = [] pQ23 = [] pQ13 = [] pN1 = [] pN2 = [] for phase in self . phaseOrder : print ( 'Getting Plate results for Phase ' , phase . Name . value , phase . Identification . value ) try : plateX = self . g_o . getresults ( phase , self . g_o . Plate . X , 'node' ) plateY = self . g_o . getresults ( phase , self . g_o . Plate . Y , 'node' ) plateZ = self . g_o . getresults ( phase , self . g_o . Plate . Z , 'node' ) plateMat = self . g_o . getresults ( phase , self . g_o . Plate . MaterialID , 'node' ) #~ plateEl = self.g_o.getresults(phase, self.g_o.Plate.ElementID, 'node') plateUx = self . g_o . getresults ( phase , self . g_o . Plate . Ux , 'node' ) plateUy = self . g_o . getresults ( phase , self . g_o . Plate . Uy , 'node' ) plateUz = self . g_o . getresults ( phase , self . g_o . Plate . Uz , 'node' ) plateUt = self . g_o . getresults ( phase , self . g_o . Plate . Utot , 'node' ) platePUx = self . g_o . getresults ( phase , self . g_o . Plate . PUx , 'node' ) platePUy = self . g_o . getresults ( phase , self . g_o . Plate . PUy , 'node' ) platePUz = self . g_o . getresults ( phase , self . g_o . Plate . PUz , 'node' ) platePUt = self . g_o . getresults ( phase , self . g_o . Plate . PUtot , 'node' ) plateU1 = self . g_o . getresults ( phase , self . g_o . Plate . U1 , 'node' ) plateU2 = self . g_o . getresults ( phase , self . g_o . Plate . U2 , 'node' ) plateU3 = self . g_o . getresults ( phase , self . g_o . Plate . U3 , 'node' ) plateN1 = self . g_o . getresults ( phase , self . g_o . Plate . N11 , 'node' ) plateN2 = self . g_o . getresults ( phase , self . g_o . Plate . N22 , 'node' ) plateQ12 = self . g_o . getresults ( phase , self . g_o . Plate . Q12 , 'node' ) plateQ23 = self . g_o . getresults ( phase , self . g_o . Plate . Q23 , 'node' ) plateQ13 = self . g_o . getresults ( phase , self . g_o . Plate . Q13 , 'node' ) plateM11 = self . g_o . getresults ( phase , self . g_o . Plate . M11 , 'node' ) plateM22 = self . g_o . getresults ( phase , self . g_o . Plate . M22 , 'node' ) plateM12 = self . g_o . getresults ( phase , self . g_o . Plate . M12 , 'node' ) #~ print (plateEl) for x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( plateX , plateY , plateZ , plateMat , plateUx , plateUy , plateUz , plateUt , platePUx , platePUy , platePUz , platePUt , plateU1 , plateU2 , plateU3 , plateN1 , plateN2 , plateQ12 , plateQ23 , plateQ13 , plateM11 , plateM22 , plateM12 ): # add filters in here if necessary pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) pX . append ( x ) pY . append ( y ) pZ . append ( z ) pMat . append ( mat ) pUx . append ( ux ) pUy . append ( uy ) pUz . append ( uz ) pUt . append ( ut ) pPUx . append ( pux ) pPUy . append ( puy ) pPUz . append ( puz ) pPUt . append ( put ) pU1 . append ( u1 ) pU2 . append ( u2 ) pU3 . append ( u3 ) pN1 . append ( n1 ) pN2 . append ( n2 ) pQ12 . append ( q12 ) pQ23 . append ( q23 ) pQ13 . append ( q13 ) pM11 . append ( m11 ) pM22 . append ( m22 ) pM12 . append ( m12 ) except : print ( 'Exception reading Plate in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N1(kN/m),N2(kN/m),Q12(kN/m),Q23(kN/m),Q13(kN/m),M11(kNm/m),M22(kNm/m),M12(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) return columns + rows if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) print ( self . columns ) print ( self . formats ) print ( self . types ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n1 ) row . append ( n2 ) row . append ( q12 ) row . append ( q23 ) row . append ( q13 ) row . append ( m11 ) row . append ( m22 ) row . append ( m12 ) self . insertValues ( row ) print ( 'getPlateResults Done' ) def getPlateResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if not filePoints is None : self . loadXYZNodeList ( filePoints ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResultsByPoints' print ( 'FileOut=' , fileOut ) # initialise data for lists pPhaseName = [] pPhaseIdent = [] pLocName = [] pY = [] pX = [] pZ = [] pMat = [] pUx = [] pUy = [] pUz = [] pUt = [] pPUx = [] pPUy = [] pPUz = [] pPUt = [] pU1 = [] pU2 = [] pU3 = [] pM11 = [] pM22 = [] pM12 = [] pQ12 = [] pQ23 = [] pQ13 = [] pN1 = [] pN2 = [] for phase in self . phaseOrder : print ( 'Getting Plate results for Phase ' , phase . Name . value , phase . Identification . value ) for pt in self . NodeList : try : mat = self . g_o . getsingleresult ( phase , self . g_o . Plate . MaterialID , ( pt . x , pt . y , pt . z )) ux = self . g_o . getsingleresult ( phase , self . g_o . Plate . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . Plate . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . Plate . Uz , ( pt . x , pt . y , pt . z )) ut = self . g_o . getsingleresult ( phase , self . g_o . Plate . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . Plate . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . Plate . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . Plate . PUz , ( pt . x , pt . y , pt . z )) put = self . g_o . getsingleresult ( phase , self . g_o . Plate . PUtot , ( pt . x , pt . y , pt . z )) u1 = self . g_o . getsingleresult ( phase , self . g_o . Plate . U1 , ( pt . x , pt . y , pt . z )) u2 = self . g_o . getsingleresult ( phase , self . g_o . Plate . U2 , ( pt . x , pt . y , pt . z )) u3 = self . g_o . getsingleresult ( phase , self . g_o . Plate . U3 , ( pt . x , pt . y , pt . z )) n1 = self . g_o . getsingleresult ( phase , self . g_o . Plate . N11 , ( pt . x , pt . y , pt . z )) n2 = self . g_o . getsingleresult ( phase , self . g_o . Plate . N22 , ( pt . x , pt . y , pt . z )) q12 = self . g_o . getsingleresult ( phase , self . g_o . Plate . Q12 , ( pt . x , pt . y , pt . z )) q23 = self . g_o . getsingleresult ( phase , self . g_o . Plate . Q23 , ( pt . x , pt . y , pt . z )) q13 = self . g_o . getsingleresult ( phase , self . g_o . Plate . Q13 , ( pt . x , pt . y , pt . z )) m11 = self . g_o . getsingleresult ( phase , self . g_o . Plate . M11 , ( pt . x , pt . y , pt . z )) m22 = self . g_o . getsingleresult ( phase , self . g_o . Plate . M22 , ( pt . x , pt . y , pt . z )) m12 = self . g_o . getsingleresult ( phase , self . g_o . Plate . M12 , ( pt . x , pt . y , pt . z )) if ux == 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' not found' ) if ux != 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' retrieved' ) # add filters in here if necessary pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) pX . append ( pt . x ) pY . append ( pt . y ) pZ . append ( pt . z ) pMat . append ( int ( float ( mat ) + .1 )) pLocName . append ( pt . name ) pUx . append ( ux ) pUy . append ( uy ) pUz . append ( uz ) pUt . append ( ut ) pPUx . append ( pux ) pPUy . append ( puy ) pPUz . append ( puz ) pPUt . append ( put ) pU1 . append ( u1 ) pU2 . append ( u2 ) pU3 . append ( u3 ) pN1 . append ( n1 ) pN2 . append ( n2 ) pQ12 . append ( q12 ) pQ23 . append ( q23 ) pQ13 . append ( q13 ) pM11 . append ( m11 ) pM22 . append ( m22 ) pM12 . append ( m12 ) except : print ( 'Exception reading Plate in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,LocName, X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N1(kN/m),N2(kN/m),Q12(kN/m),Q23(kN/m),Q13(kN/m),M11(kNm/m),M22(kNm/m),M12(kNm/m)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:2f} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , plocname , float ( x ), float ( y ), float ( z ), mat , float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( n1 ), float ( n2 ), float ( q12 ), float ( q23 ), float ( q13 ), float ( m11 ), float ( m22 ), float ( m12 )) for pname , pident , plocname , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pLocName , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) return columns + rows if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , plocname , float ( x ), float ( y ), float ( z ), mat , float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( n1 ), float ( n2 ), float ( q12 ), float ( q23 ), float ( q13 ), float ( m11 ), float ( m22 ), float ( m12 )) for pname , pident , plocname , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pLocName , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) print ( self . columns ) print ( self . formats ) print ( self . types ) for pname , pident , locname , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pLocName , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( locname ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n1 ) row . append ( n2 ) row . append ( q12 ) row . append ( q23 ) row . append ( q13 ) row . append ( m11 ) row . append ( m22 ) row . append ( m12 ) self . insertValues ( row ) print ( 'getPlateResultsByPoints Done' ) def getInterfaceResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if not filePoints is None : self . loadXYZNodeList ( filePoints ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResultsByPoints' print ( 'FileOut=' , fileOut ) # initialize data for lists iPhaseName = [] iPhaseIdent = [] iLocName = [] iY = [] iX = [] iZ = [] iMat = [] iUx = [] iUy = [] iUz = [] iUt = [] iPUx = [] iPUy = [] iPUz = [] iPUt = [] iU1 = [] iU2 = [] iU3 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) for pt in self . NodeList : try : x = self . g_o . getsingleresult ( phase , self . g_o . Interface . X , ( pt . x , pt . y , pt . z )) y = self . g_o . getsingleresult ( phase , self . g_o . Interface . Y , ( pt . x , pt . y , pt . z )) z = self . g_o . getsingleresult ( phase , self . g_o . Interface . Z , ( pt . x , pt . y , pt . z )) mat = self . g_o . getsingleresult ( phase , self . g_o . Interface . MaterialID , ( pt . x , pt . y , pt . z )) ux = self . g_o . getsingleresult ( phase , self . g_o . Interface . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . Interface . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . Interface . Uz , ( pt . x , pt . y , pt . z )) ut = self . g_o . getsingleresult ( phase , self . g_o . Interface . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . Interface . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . Interface . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . Interface . PUz , ( pt . x , pt . y , pt . z )) put = self . g_o . getsingleresult ( phase , self . g_o . Interface . PUtot , ( pt . x , pt . y , pt . z )) u1 = self . g_o . getsingleresult ( phase , self . g_o . Interface . U1 , ( pt . x , pt . y , pt . z )) u2 = self . g_o . getsingleresult ( phase , self . g_o . Interface . U2 , ( pt . x , pt . y , pt . z )) u3 = self . g_o . getsingleresult ( phase , self . g_o . Interface . U3 , ( pt . x , pt . y , pt . z )) ens = self . g_o . getsingleresult ( phase , self . g_o . Interface . InterfaceEffectiveNormalStress , ( pt . x , pt . y , pt . z )) tns = self . g_o . getsingleresult ( phase , self . g_o . Interface . InterfaceTotalNormalStress , ( pt . x , pt . y , pt . z )) ss = self . g_o . getsingleresult ( phase , self . g_o . Interface . InterfaceShearStress , ( pt . x , pt . y , pt . z )) rss = self . g_o . getsingleresult ( phase , self . g_o . Interface . InterfaceRelativeShearStress , ( pt . x , pt . y , pt . z )) pe = self . g_o . getsingleresult ( phase , self . g_o . Interface . PExcess , ( pt . x , pt . y , pt . z )) pa = self . g_o . getsingleresult ( phase , self . g_o . Interface . PActive , ( pt . x , pt . y , pt . z )) pst = self . g_o . getsingleresult ( phase , self . g_o . Interface . PSteady , ( pt . x , pt . y , pt . z )) pw = self . g_o . getsingleresult ( phase , self . g_o . Interface . PWater , ( pt . x , pt . y , pt . z )) su = self . g_o . getsingleresult ( phase , self . g_o . Interface . Suction , ( pt . x , pt . y , pt . z )) esu = self . g_o . getsingleresult ( phase , self . g_o . Interface . EffSuction , ( pt . x , pt . y , pt . z )) if ux == 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' not found' ) if ux != 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' retrieved' ) # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iZ . append ( z ) iMat . append ( mat ) iLocName . append ( pt . name ) iUx . append ( ux ) iUy . append ( uy ) iUz . append ( uz ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUz . append ( puz ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iU3 . append ( u3 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,LocName,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( z ), float ( mat ), float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' #~ print(iLocName) #~ print(iPhaseName) #~ print(iPhaseIdent) #~ print(iX) #~ print(iY) #~ print(iZ) #~ print(iMat) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( z ), float ( mat ), float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( loc ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResultsByPoints Done' ) def getBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getBeamResults' print ( 'FileOut=' , fileOut ) # initialise data for lists bPhaseName = [] bPhaseIdent = [] bMat = [] bY = [] bX = [] bZ = [] bUx = [] bUy = [] bUz = [] bUt = [] bPUx = [] bPUy = [] bPUz = [] bPUt = [] bU1 = [] bU2 = [] bU3 = [] bM2 = [] bM3 = [] bQ12 = [] bQ13 = [] bN = [] for phase in self . phaseOrder : print ( 'Getting Beam results for Phase ' , phase . Name . value , phase . Identification . value ) try : beamMat = self . g_o . getresults ( phase , self . g_o . Beam . MaterialID , 'node' ) beamX = self . g_o . getresults ( phase , self . g_o . Beam . X , 'node' ) beamY = self . g_o . getresults ( phase , self . g_o . Beam . Y , 'node' ) beamZ = self . g_o . getresults ( phase , self . g_o . Beam . Z , 'node' ) beamUx = self . g_o . getresults ( phase , self . g_o . Beam . Ux , 'node' ) beamUy = self . g_o . getresults ( phase , self . g_o . Beam . Uy , 'node' ) beamUz = self . g_o . getresults ( phase , self . g_o . Beam . Uz , 'node' ) beamUt = self . g_o . getresults ( phase , self . g_o . Beam . Utot , 'node' ) beamPUx = self . g_o . getresults ( phase , self . g_o . Beam . PUx , 'node' ) beamPUy = self . g_o . getresults ( phase , self . g_o . Beam . PUy , 'node' ) beamPUz = self . g_o . getresults ( phase , self . g_o . Beam . PUz , 'node' ) beamPUt = self . g_o . getresults ( phase , self . g_o . Beam . PUtot , 'node' ) beamU1 = self . g_o . getresults ( phase , self . g_o . Beam . U1 , 'node' ) beamU2 = self . g_o . getresults ( phase , self . g_o . Beam . U2 , 'node' ) beamU3 = self . g_o . getresults ( phase , self . g_o . Beam . U3 , 'node' ) beamN = self . g_o . getresults ( phase , self . g_o . Beam . N , 'node' ) beamQ12 = self . g_o . getresults ( phase , self . g_o . Beam . Q12 , 'node' ) beamQ13 = self . g_o . getresults ( phase , self . g_o . Beam . Q13 , 'node' ) beamM2 = self . g_o . getresults ( phase , self . g_o . Beam . M2 , 'node' ) beamM3 = self . g_o . getresults ( phase , self . g_o . Beam . M3 , 'node' ) for mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( beamMat , beamX , beamY , beamZ , beamUx , beamUy , beamUz , beamUt , beamPUx , beamPUy , beamPUz , beamPUt , beamU1 , beamU2 , beamU3 , beamN , beamQ12 , beamQ13 , beamM2 , beamM3 ): # print ('YUt') # add filters in here if necessary bPhaseName . append ( phase . Name . value ) bPhaseIdent . append ( phase . Identification . value ) bMat . append ( mat ) bX . append ( x ) bY . append ( y ) bZ . append ( z ) bUx . append ( ux ) bUy . append ( uy ) bUz . append ( uz ) bUt . append ( ut ) bPUx . append ( pux ) bPUy . append ( puy ) bPUz . append ( puz ) bPUt . append ( put ) bU1 . append ( u1 ) bU2 . append ( u2 ) bU3 . append ( u3 ) bN . append ( n ) bQ12 . append ( q12 ) bQ13 . append ( q13 ) bM2 . append ( m2 ) bM3 . append ( m3 ) except : print ( 'Exception reading beam in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,MaterialID,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN/m),Q12(kN/m),Q13(kN/m),M2(kNm/m),M3(kNm/m)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 )]) return columns + rows if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( mat ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n ) row . append ( q12 ) row . append ( q13 ) row . append ( m2 ) row . append ( m3 ) self . insertValues ( row ) print ( 'getBeamResults Done' ) def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_EmbeddedBeam.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' print ( 'FileOut=' , fileOut ) # init data for lists PhaseName = [] PhaseIdent = [] eY = [] eX = [] eZ = [] eMat = [] eUx = [] eUy = [] eUz = [] eUt = [] ePUx = [] ePUy = [] ePUz = [] ePUt = [] eU1 = [] eU2 = [] eU3 = [] eN = [] eQ12 = [] eQ13 = [] eM2 = [] eM3 = [] eTskin = [] eTlat = [] eTlat2 = [] eFfoot = [] for phase in self . phaseOrder : print ( 'Getting EmbeddedBeam results for Phase ' , phase . Name . value ) try : embeamX = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . X , 'node' ) embeamY = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Y , 'node' ) embeamZ = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Z , 'node' ) print ( 'Retrieved U' ) ebeamMat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . MaterialID , 'node' ) embeamUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Ux , 'node' ) embeamUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Uy , 'node' ) embeamUz = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Uz , 'node' ) embeamUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Utot , 'node' ) print ( 'Retrieved U' ) embeamPUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUx , 'node' ) embeamPUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUy , 'node' ) embeamPUz = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUz , 'node' ) embeamPUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUtot , 'node' ) print ( 'Retrieved dU' ) embeamU1 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U1 , 'node' ) embeamU2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U2 , 'node' ) embeamU3 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U3 , 'node' ) #print('Retrieved U1-U3') embeamN = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . N , 'node' ) embeamQ12 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Q12 , 'node' ) embeamQ13 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Q13 , 'node' ) embeamM2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . M2 , 'node' ) embeamM3 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . M3 , 'node' ) #print('Retrieved N') embeamTskin = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tskin , 'node' ) embeamTlat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tlat , 'node' ) embeamTlat2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tlat2 , 'node' ) #embeamFfoot= self.g_o.getresults(phase, self.g_o.EmbeddedBeam.Tlat2, 'node') print ( 'Retrieved EmbeddedBeam results for ' , phase . Name . value ) for x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( embeamX , embeamY , embeamZ , ebeamMat , embeamUx , embeamUy , embeamUz , embeamUt , embeamPUx , embeamPUy , embeamPUz , embeamPUt , embeamU1 , embeamU2 , embeamU3 , embeamN , embeamQ12 , embeamQ13 , embeamM2 , embeamM3 , embeamTskin , embeamTlat , embeamTlat2 ): # add filters in here if necessary PhaseName . append ( phase . Name . value ) PhaseIdent . append ( phase . Identification . value ) eX . append ( x ) eY . append ( y ) eZ . append ( z ) eMat . append ( mat ) eUx . append ( ux ) eUy . append ( uy ) eUz . append ( uz ) eUt . append ( ut ) ePUx . append ( pux ) ePUy . append ( puy ) ePUz . append ( puz ) ePUt . append ( put ) eU1 . append ( u1 ) eU2 . append ( u2 ) eU3 . append ( u3 ) eN . append ( n ) eQ12 . append ( q12 ) eQ13 . append ( q13 ) eM2 . append ( m2 ) eM3 . append ( m3 ) eTskin . append ( tskin ) eTlat . append ( tlat ) eTlat2 . append ( tlat2 ) except : print ( 'Exception reading EmbeddedBeam in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN),Q12(kN),Q13(kN),M2(kNm),M3(kNm),Tskin(kN/m),Tlat(kN/m),Tlat2(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n ) row . append ( q12 ) row . append ( q13 ) row . append ( m2 ) row . append ( m3 ) row . append ( tskin ) row . append ( tlat ) row . append ( tlat2 ) self . insertValues ( row ) print ( 'getEmbeddedBeamResults Done' ) def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): #file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_NodeToNodeAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' print ( 'FileOut=' , fileOut ) # initialize data for lists aPhaseName = [] aPhaseIdent = [] aY = [] aX = [] aZ = [] aUx = [] aUy = [] aUz = [] aUt = [] aPUx = [] aPUy = [] aPUz = [] aPUt = [] aU1 = [] aU2 = [] aU3 = [] aForce3D = [] for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : anchorX = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . X , 'node' ) anchorY = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Y , 'node' ) anchorZ = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Z , 'node' ) anchorUx = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Ux , 'node' ) anchorUy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Uy , 'node' ) anchorUz = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Uz , 'node' ) anchorUt = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Utot , 'node' ) anchorPUx = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUx , 'node' ) anchorPUy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUy , 'node' ) anchorPUz = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUz , 'node' ) anchorPUt = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUtot , 'node' ) anchorU1 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U1 , 'node' ) anchorU2 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U2 , 'node' ) anchorU3 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U3 , 'node' ) anchorForce3D = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . AnchorForce3D , 'node' ) for x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3D in zip ( anchorX , anchorY , anchorZ , anchorUx , anchorUy , anchorUz , anchorUt , anchorPUx , anchorPUy , anchorPUz , anchorPUt , anchorU1 , anchorU2 , anchorU3 , anchorForce3D ): # add filters in here if necessary aPhaseName . append ( phase . Name . value ) aPhaseIdent . append ( phase . Identification . value ) aX . append ( x ) aY . append ( y ) aZ . append ( z ) aUx . append ( ux ) aUy . append ( uy ) aUz . append ( uz ) aUt . append ( ut ) aPUx . append ( pux ) aPUy . append ( puy ) aPUz . append ( puz ) aPUt . append ( put ) aU1 . append ( u1 ) aU2 . append ( u2 ) aU3 . append ( u3 ) aForce3D . append ( f3D ) except : print ( 'Exception reading NodeToNodeAnchor in phase' + phase . Name . value , phase . Identification . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( f3d ) self . insertValues ( row ) print ( 'getNodeToNodeAnchorResults Done' ) def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_FixedEndAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' print ( 'FileOut=' , fileOut ) # initialize data for lists aPhaseName = [] aPhaseIdent = [] aY = [] aX = [] aZ = [] aUx = [] aUy = [] aUz = [] aUt = [] aPUx = [] aPUy = [] aPUz = [] aPUt = [] aU1 = [] aU2 = [] aU3 = [] aForce3D = [] for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : anchorX = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . X , 'node' ) anchorY = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Y , 'node' ) anchorZ = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Z , 'node' ) anchorUx = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Ux , 'node' ) anchorUy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Uy , 'node' ) anchorUz = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Uz , 'node' ) anchorUt = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Utot , 'node' ) anchorPUx = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUx , 'node' ) anchorPUy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUy , 'node' ) anchorPUz = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUz , 'node' ) anchorPUt = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUtot , 'node' ) anchorU1 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U1 , 'node' ) anchorU2 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U2 , 'node' ) anchorU3 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U3 , 'node' ) anchorForce3D = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . AnchorForce3D , 'node' ) print ( 'Retrieved FixedEndAnchor results for ' , phase . Name . value ) for x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3D in zip ( anchorX , anchorY , anchorZ , anchorUx , anchorUy , anchorUz , anchorUt , anchorPUx , anchorPUy , anchorPUz , anchorPUt , anchorU1 , anchorU2 , anchorU3 , anchorForce3D ): # add filters in here if necessary aPhaseName . append ( phase . Name . value ) aPhaseIdent . append ( phase . Identification . value ) aX . append ( x ) aY . append ( y ) aZ . append ( z ) aUx . append ( ux ) aUy . append ( uy ) aUz . append ( uz ) aUt . append ( ut ) aPUx . append ( pux ) aPUy . append ( puy ) aPUz . append ( puz ) aPUt . append ( put ) aU1 . append ( u1 ) aU2 . append ( u2 ) aU3 . append ( u3 ) aForce3D . append ( f3D ) except : print ( 'Exception reading FixedEndAnchor in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( f3d ) self . insertValues ( row ) print ( 'getFixedEndAnchorResults Done' ) def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_Interface.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' print ( 'FileOut=' , fileOut ) # initialize data for lists iPhaseName = [] iPhaseIdent = [] iY = [] iX = [] iZ = [] iMat = [] iUx = [] iUy = [] iUz = [] iUt = [] iPUx = [] iPUy = [] iPUz = [] iPUt = [] iU1 = [] iU2 = [] iU3 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : interX = self . g_o . getresults ( phase , self . g_o . Interface . X , 'node' ) interY = self . g_o . getresults ( phase , self . g_o . Interface . Y , 'node' ) interZ = self . g_o . getresults ( phase , self . g_o . Interface . Z , 'node' ) interMat = self . g_o . getresults ( phase , self . g_o . Interface . MaterialID , 'node' ) interUx = self . g_o . getresults ( phase , self . g_o . Interface . Ux , 'node' ) interUy = self . g_o . getresults ( phase , self . g_o . Interface . Uy , 'node' ) interUz = self . g_o . getresults ( phase , self . g_o . Interface . Uz , 'node' ) interUt = self . g_o . getresults ( phase , self . g_o . Interface . Utot , 'node' ) interPUx = self . g_o . getresults ( phase , self . g_o . Interface . PUx , 'node' ) interPUy = self . g_o . getresults ( phase , self . g_o . Interface . PUy , 'node' ) interPUz = self . g_o . getresults ( phase , self . g_o . Interface . PUz , 'node' ) interPUt = self . g_o . getresults ( phase , self . g_o . Interface . PUtot , 'node' ) interU1 = self . g_o . getresults ( phase , self . g_o . Interface . U1 , 'node' ) interU2 = self . g_o . getresults ( phase , self . g_o . Interface . U2 , 'node' ) interU3 = self . g_o . getresults ( phase , self . g_o . Interface . U3 , 'node' ) interEffNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceEffectiveNormalStress , 'node' ) interTotNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceTotalNormalStress , 'node' ) interShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceShearStress , 'node' ) interRelShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceRelativeShearStress , 'node' ) interPExcess = self . g_o . getresults ( phase , self . g_o . Interface . PExcess , 'node' ) interPActive = self . g_o . getresults ( phase , self . g_o . Interface . PActive , 'node' ) interPSteady = self . g_o . getresults ( phase , self . g_o . Interface . PSteady , 'node' ) interPWater = self . g_o . getresults ( phase , self . g_o . Interface . PWater , 'node' ) interSuction = self . g_o . getresults ( phase , self . g_o . Interface . Suction , 'node' ) interEffSuction = self . g_o . getresults ( phase , self . g_o . Interface . EffSuction , 'node' ) for x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( interX , interY , interZ , interMat , interUx , interUy , interUz , interUt , interPUx , interPUy , interPUz , interPUt , interU1 , interU2 , interU3 , interEffNormalStress , interTotNormalStress , interShearStress , interRelShearStress , interPExcess , interPActive , interPSteady , interPWater , interSuction , interEffSuction ): # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iZ . append ( z ) iMat . append ( mat ) iUx . append ( ux ) iUy . append ( uy ) iUz . append ( uz ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUz . append ( puz ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iU3 . append ( u3 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResults Done' ) def getAllStructuralResults ( self , folderOut = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getBeamResults.csv' else : tableOut = 'getBeamResults' self . getBeamResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getPlateResults.csv' else : tableOut = 'getPlateResults' self . getPlateResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getEmbeddedBeamResults.csv' else : tableOut = 'getEmbeddedBeamResults' self . getEmbeddedBeamResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getNodeToNodeAnchorResults.csv' else : tableOut = 'getNodeToNodeAnchorResults' self . getNodeToNodeAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getFixedEndAnchorResults.csv' tableOut = None else : tableOut = 'getFixedEndAnchorResults' self . getFixedEndAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getInterfaceResults.csv' else : tableOut = 'getInterfaceResults' self . getInterfaceResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) Plaxis3dResults2018 Bases: Plaxis3dResults Source code in src\\ge_lib\\plaxis\\Plaxis3dResults2018.pyclass Plaxis3dResults2018 ( Plaxis3dResults ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis3dResults2018 , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis3d2018\" def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' print ( 'FileOut=' , fileOut ) # initialise data for lists pPhaseName = [] pPhaseIdent = [] pY = [] pX = [] pZ = [] pMat = [] pEl = [] pUx = [] pUy = [] pUz = [] pUt = [] pPUx = [] pPUy = [] pPUz = [] pPUt = [] pU1 = [] pU2 = [] pU3 = [] pM11 = [] pM22 = [] pM12 = [] pQ12 = [] pQ23 = [] pQ13 = [] pN1 = [] pN2 = [] for phase in self . phaseOrder : print ( 'Getting Plate results for Phase ' , phase . Name . value , phase . Identification . value ) try : plateX = self . g_o . getresults ( phase , self . g_o . Plate . X , 'node' ) plateY = self . g_o . getresults ( phase , self . g_o . Plate . Y , 'node' ) plateZ = self . g_o . getresults ( phase , self . g_o . Plate . Z , 'node' ) plateMat = self . g_o . getresults ( phase , self . g_o . Plate . MaterialID , 'node' ) plateEl = self . g_o . getresults ( phase , self . g_o . Plate . ElementID , 'node' ) plateUx = self . g_o . getresults ( phase , self . g_o . Plate . Ux , 'node' ) plateUy = self . g_o . getresults ( phase , self . g_o . Plate . Uy , 'node' ) plateUz = self . g_o . getresults ( phase , self . g_o . Plate . Uz , 'node' ) plateUt = self . g_o . getresults ( phase , self . g_o . Plate . Utot , 'node' ) platePUx = self . g_o . getresults ( phase , self . g_o . Plate . PUx , 'node' ) platePUy = self . g_o . getresults ( phase , self . g_o . Plate . PUy , 'node' ) platePUz = self . g_o . getresults ( phase , self . g_o . Plate . PUz , 'node' ) platePUt = self . g_o . getresults ( phase , self . g_o . Plate . PUtot , 'node' ) plateU1 = self . g_o . getresults ( phase , self . g_o . Plate . U1 , 'node' ) plateU2 = self . g_o . getresults ( phase , self . g_o . Plate . U2 , 'node' ) plateU3 = self . g_o . getresults ( phase , self . g_o . Plate . U3 , 'node' ) plateN1 = self . g_o . getresults ( phase , self . g_o . Plate . N11 , 'node' ) plateN2 = self . g_o . getresults ( phase , self . g_o . Plate . N22 , 'node' ) plateQ12 = self . g_o . getresults ( phase , self . g_o . Plate . Q12 , 'node' ) plateQ23 = self . g_o . getresults ( phase , self . g_o . Plate . Q23 , 'node' ) plateQ13 = self . g_o . getresults ( phase , self . g_o . Plate . Q13 , 'node' ) plateM11 = self . g_o . getresults ( phase , self . g_o . Plate . M11 , 'node' ) plateM22 = self . g_o . getresults ( phase , self . g_o . Plate . M22 , 'node' ) plateM12 = self . g_o . getresults ( phase , self . g_o . Plate . M12 , 'node' ) for x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( plateX , plateY , plateZ , plateMat , plateEl , plateUx , plateUy , plateUz , plateUt , platePUx , platePUy , platePUz , platePUt , plateU1 , plateU2 , plateU3 , plateN1 , plateN2 , plateQ12 , plateQ23 , plateQ13 , plateM11 , plateM22 , plateM12 ): # add filters in here if necessary pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) pX . append ( x ) pY . append ( y ) pZ . append ( z ) pMat . append ( mat ) pEl . append ( el ) pUx . append ( ux ) pUy . append ( uy ) pUz . append ( uz ) pUt . append ( ut ) pPUx . append ( pux ) pPUy . append ( puy ) pPUz . append ( puz ) pPUt . append ( put ) pU1 . append ( u1 ) pU2 . append ( u2 ) pU3 . append ( u3 ) pN1 . append ( n1 ) pN2 . append ( n2 ) pQ12 . append ( q12 ) pQ23 . append ( q23 ) pQ13 . append ( q13 ) pM11 . append ( m11 ) pM22 . append ( m22 ) pM12 . append ( m12 ) except Exception as e : print ( 'Exception reading Plate in phase' + phase . Name . value ) self . logger . error ( '...exception reading Plate results ' + str ( e )) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID, ElementID, Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N1(kN/m),N2(kN/m),Q12(kN/m),Q23(kN/m),Q13(kN/m),M11(kNm/m),M22(kNm/m),M12(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pEl , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) return columns + rows if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pEl , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) print ( self . columns ) print ( self . formats ) print ( self . types ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pEl , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n1 ) row . append ( n2 ) row . append ( q12 ) row . append ( q23 ) row . append ( q13 ) row . append ( m11 ) row . append ( m22 ) row . append ( m12 ) self . insertValues ( row ) print ( 'getPlateResults Done' ) def getBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getBeamResults' print ( 'FileOut=' , fileOut ) # initialise data for lists bPhaseName = [] bPhaseIdent = [] bMat = [] bEl = [] bY = [] bX = [] bZ = [] bUx = [] bUy = [] bUz = [] bUt = [] bPUx = [] bPUy = [] bPUz = [] bPUt = [] bU1 = [] bU2 = [] bU3 = [] bM2 = [] bM3 = [] bQ12 = [] bQ13 = [] bN = [] for phase in self . phaseOrder : print ( 'Getting Beam results for Phase ' , phase . Name . value , phase . Identification . value ) try : beamMat = self . g_o . getresults ( phase , self . g_o . Beam . MaterialID , 'node' ) beamEl = self . g_o . getresults ( phase , self . g_o . Beam . ElementID , 'node' ) beamX = self . g_o . getresults ( phase , self . g_o . Beam . X , 'node' ) beamY = self . g_o . getresults ( phase , self . g_o . Beam . Y , 'node' ) beamZ = self . g_o . getresults ( phase , self . g_o . Beam . Z , 'node' ) beamUx = self . g_o . getresults ( phase , self . g_o . Beam . Ux , 'node' ) beamUy = self . g_o . getresults ( phase , self . g_o . Beam . Uy , 'node' ) beamUz = self . g_o . getresults ( phase , self . g_o . Beam . Uz , 'node' ) beamUt = self . g_o . getresults ( phase , self . g_o . Beam . Utot , 'node' ) beamPUx = self . g_o . getresults ( phase , self . g_o . Beam . PUx , 'node' ) beamPUy = self . g_o . getresults ( phase , self . g_o . Beam . PUy , 'node' ) beamPUz = self . g_o . getresults ( phase , self . g_o . Beam . PUz , 'node' ) beamPUt = self . g_o . getresults ( phase , self . g_o . Beam . PUtot , 'node' ) beamU1 = self . g_o . getresults ( phase , self . g_o . Beam . U1 , 'node' ) beamU2 = self . g_o . getresults ( phase , self . g_o . Beam . U2 , 'node' ) beamU3 = self . g_o . getresults ( phase , self . g_o . Beam . U3 , 'node' ) beamN = self . g_o . getresults ( phase , self . g_o . Beam . N , 'node' ) beamQ12 = self . g_o . getresults ( phase , self . g_o . Beam . Q12 , 'node' ) beamQ13 = self . g_o . getresults ( phase , self . g_o . Beam . Q13 , 'node' ) beamM2 = self . g_o . getresults ( phase , self . g_o . Beam . M2 , 'node' ) beamM3 = self . g_o . getresults ( phase , self . g_o . Beam . M3 , 'node' ) for mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( beamMat , beamEl , beamX , beamY , beamZ , beamUx , beamUy , beamUz , beamUt , beamPUx , beamPUy , beamPUz , beamPUt , beamU1 , beamU2 , beamU3 , beamN , beamQ12 , beamQ13 , beamM2 , beamM3 ): # print ('YUt') # add filters in here if necessary bPhaseName . append ( phase . Name . value ) bPhaseIdent . append ( phase . Identification . value ) bMat . append ( mat ) bEl . append ( el ) bX . append ( x ) bY . append ( y ) bZ . append ( z ) bUx . append ( ux ) bUy . append ( uy ) bUz . append ( uz ) bUt . append ( ut ) bPUx . append ( pux ) bPUy . append ( puy ) bPUz . append ( puz ) bPUt . append ( put ) bU1 . append ( u1 ) bU2 . append ( u2 ) bU3 . append ( u3 ) bN . append ( n ) bQ12 . append ( q12 ) bQ13 . append ( q13 ) bM2 . append ( m2 ) bM3 . append ( m3 ) except : print ( 'Exception reading beam in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,MaterialID,ElementID,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN/m),Q12(kN/m),Q13(kN/m),M2(kNm/m),M3(kNm/m)' formats = ' {} , {} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bEl , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 )]) return columns + rows if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bEl , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bEl , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( mat ) row . append ( el ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n ) row . append ( q12 ) row . append ( q13 ) row . append ( m2 ) row . append ( m3 ) self . insertValues ( row ) print ( 'getBeamResults Done' ) def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_EmbeddedBeam.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' print ( 'FileOut=' , fileOut ) # init data for lists PhaseName = [] PhaseIdent = [] eY = [] eX = [] eZ = [] eMat = [] eEl = [] eUx = [] eUy = [] eUz = [] eUt = [] ePUx = [] ePUy = [] ePUz = [] ePUt = [] eU1 = [] eU2 = [] eU3 = [] eN = [] eQ12 = [] eQ13 = [] eM2 = [] eM3 = [] eTskin = [] eTlat = [] eTlat2 = [] eFfoot = [] for phase in self . phaseOrder : print ( 'Getting EmbeddedBeam results for Phase ' , phase . Name . value ) try : embeamX = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . X , 'node' ) embeamY = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Y , 'node' ) embeamZ = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Z , 'node' ) #print('Retrieved U') ebeamMat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . MaterialID , 'node' ) ebeamEl = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . ElementID , 'node' ) embeamUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Ux , 'node' ) embeamUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Uy , 'node' ) embeamUz = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Uz , 'node' ) embeamUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Utot , 'node' ) #print('Retrieved U') embeamPUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUx , 'node' ) embeamPUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUy , 'node' ) embeamPUz = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUz , 'node' ) embeamPUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUtot , 'node' ) #print('Retrieved dU') embeamU1 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U1 , 'node' ) embeamU2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U2 , 'node' ) embeamU3 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U3 , 'node' ) #print('Retrieved U1-U3') embeamN = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . N , 'node' ) embeamQ12 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Q12 , 'node' ) embeamQ13 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Q13 , 'node' ) embeamM2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . M2 , 'node' ) embeamM3 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . M3 , 'node' ) #print('Retrieved N') embeamTskin = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tskin , 'node' ) embeamTlat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tlat , 'node' ) embeamTlat2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tlat2 , 'node' ) #embeamFfoot= self.g_o.getresults(phase, self.g_o.EmbeddedBeam.Tlat2, 'node') print ( 'Retrieved EmbeddedBeam results for ' , phase . Name . value ) for x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( embeamX , embeamY , embeamZ , ebeamMat , ebeamEl , embeamUx , embeamUy , embeamUz , embeamUt , embeamPUx , embeamPUy , embeamPUz , embeamPUt , embeamU1 , embeamU2 , embeamU3 , embeamN , embeamQ12 , embeamQ13 , embeamM2 , embeamM3 , embeamTskin , embeamTlat , embeamTlat2 ): # add filters in here if necessary PhaseName . append ( phase . Name . value ) PhaseIdent . append ( phase . Identification . value ) eX . append ( x ) eY . append ( y ) eZ . append ( z ) eMat . append ( mat ) eEl . append ( el ) eUx . append ( ux ) eUy . append ( uy ) eUz . append ( uz ) eUt . append ( ut ) ePUx . append ( pux ) ePUy . append ( puy ) ePUz . append ( puz ) ePUt . append ( put ) eU1 . append ( u1 ) eU2 . append ( u2 ) eU3 . append ( u3 ) eN . append ( n ) eQ12 . append ( q12 ) eQ13 . append ( q13 ) eM2 . append ( m2 ) eM3 . append ( m3 ) eTskin . append ( tskin ) eTlat . append ( tlat ) eTlat2 . append ( tlat2 ) except : print ( 'Exception reading EmbeddedBeam in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,ElementID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN),Q12(kN),Q13(kN),M2(kNm),M3(kNm),Tskin(kN/m),Tlat(kN/m),Tlat2(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eEl , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eEl , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eEl , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n ) row . append ( q12 ) row . append ( q13 ) row . append ( m2 ) row . append ( m3 ) row . append ( tskin ) row . append ( tlat ) row . append ( tlat2 ) self . insertValues ( row ) print ( 'getEmbeddedBeamResults Done' ) def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_Interface.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' print ( 'FileOut=' , fileOut ) # initialize data for lists iPhaseName = [] iPhaseIdent = [] iY = [] iX = [] iZ = [] iMat = [] iUx = [] iUy = [] iUz = [] iUt = [] iPUx = [] iPUy = [] iPUz = [] iPUt = [] iU1 = [] iU2 = [] iU3 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : interX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . X , 'node' ) interY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Y , 'node' ) interZ = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Z , 'node' ) interMat = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . MaterialID , 'node' ) interUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Ux , 'node' ) interUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uy , 'node' ) interUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uz , 'node' ) interUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Utot , 'node' ) interPUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUx , 'node' ) interPUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUy , 'node' ) interPUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUz , 'node' ) interPUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUtot , 'node' ) interU1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U1 , 'node' ) interU2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U2 , 'node' ) interU3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U3 , 'node' ) interEffNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , 'node' ) interTotNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , 'node' ) interShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , 'node' ) interRelShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , 'node' ) interPExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PExcess , 'node' ) interPActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PActive , 'node' ) interPSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PSteady , 'node' ) interPWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PWater , 'node' ) interSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Suction , 'node' ) interEffSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . EffSuction , 'node' ) for x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( interX , interY , interZ , interMat , interUx , interUy , interUz , interUt , interPUx , interPUy , interPUz , interPUt , interU1 , interU2 , interU3 , interEffNormalStress , interTotNormalStress , interShearStress , interRelShearStress , interPExcess , interPActive , interPSteady , interPWater , interSuction , interEffSuction ): # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iZ . append ( z ) iMat . append ( mat ) iUx . append ( ux ) iUy . append ( uy ) iUz . append ( uz ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUz . append ( puz ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iU3 . append ( u3 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except Exception as e : msg = '...exception reading interface results ' + phase . Identification . value print ( msg ) self . logger . error ( msg + str ( e )) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResults Done' ) def getInterfaceResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): if self . phaseOrder is None : self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if not filePoints is None : self . loadXYZNodeList ( filePoints ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResultsByPoints' print ( 'FileOut=' , fileOut ) # initialize data for lists iPhaseName = [] iPhaseIdent = [] iLocName = [] iY = [] iX = [] iZ = [] iMat = [] iUx = [] iUy = [] iUz = [] iUt = [] iPUx = [] iPUy = [] iPUz = [] iPUt = [] iU1 = [] iU2 = [] iU3 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) for pt in self . NodeList : try : x = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . X , ( pt . x , pt . y , pt . z )) y = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Y , ( pt . x , pt . y , pt . z )) z = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Z , ( pt . x , pt . y , pt . z )) mat = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . MaterialID , ( pt . x , pt . y , pt . z )) ux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Uz , ( pt . x , pt . y , pt . z )) ut = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PUz , ( pt . x , pt . y , pt . z )) put = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PUtot , ( pt . x , pt . y , pt . z )) u1 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . U1 , ( pt . x , pt . y , pt . z )) u2 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . U2 , ( pt . x , pt . y , pt . z )) u3 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . U3 , ( pt . x , pt . y , pt . z )) ens = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , ( pt . x , pt . y , pt . z )) tns = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , ( pt . x , pt . y , pt . z )) ss = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , ( pt . x , pt . y , pt . z )) rss = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , ( pt . x , pt . y , pt . z )) pe = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PExcess , ( pt . x , pt . y , pt . z )) pa = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PActive , ( pt . x , pt . y , pt . z )) pst = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PSteady , ( pt . x , pt . y , pt . z )) pw = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PWater , ( pt . x , pt . y , pt . z )) su = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Suction , ( pt . x , pt . y , pt . z )) esu = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . EffSuction , ( pt . x , pt . y , pt . z )) if ux == 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' not found' ) if ux != 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' retrieved' ) # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iZ . append ( z ) iMat . append ( mat ) iLocName . append ( pt . name ) iUx . append ( ux ) iUy . append ( uy ) iUz . append ( uz ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUz . append ( puz ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iU3 . append ( u3 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,LocName,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( z ), float ( mat ), float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' #~ print(iLocName) #~ print(iPhaseName) #~ print(iPhaseIdent) #~ print(iX) #~ print(iY) #~ print(iZ) #~ print(iMat) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( z ), float ( mat ), float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( loc ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResultsByPoints Done' ) Plaxis3dResults2023 Bases: Plaxis3dResultsConnect Source code in src\\ge_lib\\plaxis\\Plaxis3dResults2023.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 class Plaxis3dResults2023 ( Plaxis3dResultsConnect ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis3dResultsConnect , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis3d2023\" def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_EmbeddedBeam.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,ElementID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN),Q12(kN),Q13(kN),M2(kNm),M3(kNm),Tskin(kN/m),Tlat(kN/m),Tlat2(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting EmbeddedBeam results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Z , 'node' ) #print('Retrieved U') Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Utot , 'node' ) #print('Retrieved U') PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUtot , 'node' ) #print('Retrieved dU') U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U3 , 'node' ) #print('Retrieved U1-U3') N = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . N , 'node' ) Q12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q12 , 'node' ) Q13 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q13 , 'node' ) M2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M2 , 'node' ) M3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M3 , 'node' ) #print('Retrieved N') Tskin = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tskin , 'node' ) Tlat = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat , 'node' ) Tlat2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat2 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , N , Q12 , Q13 , M2 , M3 , Tskin , Tlat , Tlat2 )] w . writeOutput () msg = 'Retreived EmbeddedBeam results for ' + phase . Name . value + '(embeddedbeam-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading EnbeddedBeam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading EmbeddedBeam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getEmbeddedBeamResults()' ) return Status . ELEMENT_PROCESSED def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID, ElementID, Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N1(kN/m),N2(kN/m),Q12(kN/m),Q23(kN/m),Q13(kN/m),M11(kNm/m),M22(kNm/m),M12(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Plate results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Z , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U3 , 'node' ) N11 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11 , 'node' ) N22 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22 , 'node' ) Q12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12 , 'node' ) Q23 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23 , 'node' ) Q13 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13 , 'node' ) M11 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11 , 'node' ) M22 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22 , 'node' ) M12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , N11 , N22 , Q12 , Q23 , Q13 , M11 , M22 , M12 )] w . writeOutput () except Exception as e : print ( 'Exception reading Plate in phase' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getPlateResults()' ) return Status . ELEMENT_PROCESSED def getBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getBeamResults' columns = 'Phase,PhaseIdent,MaterialID,ElementID,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN/m),Q12(kN/m),Q13(kN/m),M2(kNm/m),M3(kNm/m)' formats = ' {} , {} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Beam results for Phase ' , phase . Name . value , phase . Identification . value ) try : beamMat = self . g_o . getresults ( phase , self . g_o . Beam . Materialndex , 'node' ) beamEl = self . g_o . getresults ( phase , self . g_o . Beam . ElementID , 'node' ) beamX = self . g_o . getresults ( phase , self . g_o . Beam . X , 'node' ) beamY = self . g_o . getresults ( phase , self . g_o . Beam . Y , 'node' ) beamZ = self . g_o . getresults ( phase , self . g_o . Beam . Z , 'node' ) beamUx = self . g_o . getresults ( phase , self . g_o . Beam . Ux , 'node' ) beamUy = self . g_o . getresults ( phase , self . g_o . Beam . Uy , 'node' ) beamUz = self . g_o . getresults ( phase , self . g_o . Beam . Uz , 'node' ) beamUt = self . g_o . getresults ( phase , self . g_o . Beam . Utot , 'node' ) beamPUx = self . g_o . getresults ( phase , self . g_o . Beam . PUx , 'node' ) beamPUy = self . g_o . getresults ( phase , self . g_o . Beam . PUy , 'node' ) beamPUz = self . g_o . getresults ( phase , self . g_o . Beam . PUz , 'node' ) beamPUt = self . g_o . getresults ( phase , self . g_o . Beam . PUtot , 'node' ) beamU1 = self . g_o . getresults ( phase , self . g_o . Beam . U1 , 'node' ) beamU2 = self . g_o . getresults ( phase , self . g_o . Beam . U2 , 'node' ) beamU3 = self . g_o . getresults ( phase , self . g_o . Beam . U3 , 'node' ) beamN = self . g_o . getresults ( phase , self . g_o . Beam . N , 'node' ) beamQ12 = self . g_o . getresults ( phase , self . g_o . Beam . Q12 , 'node' ) beamQ13 = self . g_o . getresults ( phase , self . g_o . Beam . Q13 , 'node' ) beamM2 = self . g_o . getresults ( phase , self . g_o . Beam . M2 , 'node' ) beamM3 = self . g_o . getresults ( phase , self . g_o . Beam . M3 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( phaseName , phaseIdent , beamMat , beamEl , beamX , beamY , beamZ , beamUx , beamUy , beamUz , beamUt , beamPUx , beamPUy , beamPUz , beamPUt , beamU1 , beamU2 , beamU3 , beamN , beamQ12 , beamQ13 , beamM2 , beamM3 )] w . writeOutput () msg = 'Retreived Beam results for ' + phase . Name . value + '(beam-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading Beam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Beam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getBeamResults()' ) return Status . ELEMENT_PROCESSED def getSoilResultsByPoints_Displacements ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if not filePoints is None : self . loadXYZNodeList ( filePoints ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints_Displacements' columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),locZ(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),Epsxx,Epsyy,Epszz' formats = ' {} , {} , {} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : phaseName = phase . Name . value phaseIdent = phase . Identification . value for pt in self . NodeList : try : ux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uz , ( pt . x , pt . y , pt . z )) utot = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUz , ( pt . x , pt . y , pt . z )) putot = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUtot , ( pt . x , pt . y , pt . z )) ex = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epsxx , ( pt . x , pt . y , pt . z )) ey = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epsyy , ( pt . x , pt . y , pt . z )) ez = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epszz , ( pt . x , pt . y , pt . z )) w . rowsOut = [ formats . format ( phaseName , phaseIdent , pt . locname , float ( pt . x ), float ( pt . y ), float ( pt . z ), float ( ux ), float ( uy ), float ( uz ), float ( utot ), float ( pux ), float ( puy ), float ( puz ), float ( putot ), float ( ex ), float ( ey ), float ( ez ))] w . writeOutput () except Exception as e : msg = '...exception reading SoilResultsByPoints_Displacements results ' + phase . Identification . value print ( msg ) self . logger . error ( msg + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting SoilResultsByPoints_Displacements()' ) return Status . ELEMENT_PROCESSED def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_Interface.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Interface results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Z , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . MaterialIndex , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U3 , 'node' ) InterfaceEffNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , 'node' ) InterfaceTotNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , 'node' ) InterfaceShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , 'node' ) InterfaceRelShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , 'node' ) PExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PExcess , 'node' ) PActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PActive , 'node' ) PSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PSteady , 'node' ) PWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PWater , 'node' ) Suction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Suction , 'node' ) EffSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . EffSuction , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( phaseName , phaseIdent , X , Y , Z , Material , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , InterfaceEffNormalStress , InterfaceTotNormalStress , InterfaceShearStress , InterfaceRelShearStress , PExcess , PActive , PSteady , PWater , Suction , EffSuction )] w . writeOutput () msg = 'Retreived Interface results for ' + phase . Name . value + '(interface-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading interface results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Interface results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getInterfaceResults()' ) return Status . ELEMENT_PROCESSED def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): #file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_NodeToNodeAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Z , 'node' ) Mat = self . g_o . getresults ( phase , self . g_o . ResultTypes . Node2NodeAnchor . MaterialIndex , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U3 , 'node' ) Force3D = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . AnchorForce3D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( phaseName , phaseIdent , X , Y , Z , Mat , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , Force3D )] w . writeOutput () msg = 'Retreived Node2NodeAnchor results for ' + phase . Name . value + '(nodetonodeanchor-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading node2nodeanchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading node2nodeanchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getNode2NodeAnchoreResults()' ) return Status . ELEMENT_PROCESSED def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_FixedEndAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Z , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . MaterialIndex , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U3 , 'node' ) Force3D = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . AnchorForce3D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( phaseName , phaseIdent , X , Y , Z , Material , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , Force3D )] w . writeOutput () msg = 'Retreived FixedEndAnchor results for ' + phase . Name . value + '(nodetonodeanchor-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading fixedendanchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading node2nodeanchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getFixedEndAnchoreResults()' ) return Status . ELEMENT_PROCESSED def getPlateEnvelopeResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateEnvelopeResults' # with movements # columns ='Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID, ElementID, Ux_max(m),Ux_min(m),Uy_max(m),Uy_min(m),Uz_max(m),Uz_min(m),Utot_max(m),PUx_max(m),PUx_min(m),PUy_max(m),PUy_min(m),PUz_max(m),PUz_min(m),PUt_max(m),N11_max(kN/m),N11_min(kN/m),N22_max(kN/m),N22_max(kN/m),Q12_max(kN/m),Q12_min(kN/m),Q23_max(kN/m),Q23_min(kN/m),Q13_max(kN/m),Q13_min(kN/m),M11_max(kNm/m),M11_min(kNm/m),M12_max(kNm/m),M12_min(kNm/m),M22_max(kNm/m),M22_min(kN/m)' # formats = '{},{},{:2f},{:2f},{:2f},{:0},{:0},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f}' # without movements columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,ElementID,N11_max(kN/m),N11_min(kN/m),N22_max(kN/m),N22_max(kN/m),Q12_max(kN/m),Q12_min(kN/m),Q23_max(kN/m),Q23_min(kN/m),Q13_max(kN/m),Q13_min(kN/m),M11_max(kNm/m),M11_min(kNm/m),M12_max(kNm/m),M12_min(kNm/m),M22_max(kNm/m),M22_min(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Plate results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Z , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) # movement envelopes not reported in PLaxis3d 2023 # Ux_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UxMin, 'node') # Ux_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UxMax, 'node') # Uy_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UyMin, 'node') # Uy_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UyMax, 'node') # Uz_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UzMin, 'node') # Uz_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UzMax, 'node') # Ut_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UtotMax, 'node') # PUx_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUxMin, 'node') # PUx_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUxMax, 'node') # PUy_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUyMin, 'node') # PUy_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUyMax, 'node') # PUz_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUzMin, 'node') # PUz_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUzMax, 'node') # PUt_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUtotMax, 'node') N11_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11_EnvelopeMax , 'node' ) N11_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11_EnvelopeMin , 'node' ) N22_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22_EnvelopeMax , 'node' ) N22_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22_EnvelopeMin , 'node' ) Q12_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12_EnvelopeMax , 'node' ) Q12_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12_EnvelopeMin , 'node' ) Q13_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13_EnvelopeMax , 'node' ) Q13_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13_EnvelopeMin , 'node' ) Q23_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23_EnvelopeMax , 'node' ) Q23_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23_EnvelopeMin , 'node' ) M11_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11_EnvelopeMax , 'node' ) M11_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11_EnvelopeMin , 'node' ) M22_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22_EnvelopeMax , 'node' ) M22_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22_EnvelopeMin , 'node' ) M12_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12_EnvelopeMax , 'node' ) M12_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12_EnvelopeMin , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) # with movements # w.rowsOut = [formats.format(pname, pident, x, y, z, material, element, ux_max, ux_min, uy_max, uy_min, uz_max, uz_min, ut_max, pux_max, pux_min, puy_max, puy_min, puz_max, puz_min, put_max, n11_max, n11_min, n22_max, n22_min, q12_max, q12_min, q23_max, q23_min, q13_max, q13_min, m11_max, m11_min, m12_max, m12_min, m22_max, m22_min) # for pname, pident, x, y, z, material, element, ux_max, ux_min, uy_max, uy_min, uz_max, uz_min, ut_max, pux_max, pux_min, puy_max, puy_min, puz_max, puz_min, put_max, n11_max, n11_min, n22_max, n22_min, q12_max, q12_min, q23_max, q23_min, q13_max, q13_min, m11_max, m11_min, m12_max, m12_min, m22_max, m22_min in # zip(phaseName, phaseIdent, X, Y, Z, Material, Element, Ux_max, Ux_min, Uy_max, Uy_min, Uz_max, Uz_min, Ut_max, PUx_max, PUx_min, PUy_max, PUy_min, PUz_max, PUz_min, PUt_max, N11_max, N11_min, N22_max, N22_min, Q12_max, Q12_min, Q23_min, Q23_min, Q13_max, Q13_min, M11_max, M11_min, M12_max, M12_min, M22_max, M22_min)] # without movements w . rowsOut = [ formats . format ( pname , pident , x , y , z , material , element , n11_max , n11_min , n22_max , n22_min , q12_max , q12_min , q23_max , q23_min , q13_max , q13_min , m11_max , m11_min , m12_max , m12_min , m22_max , m22_min ) for pname , pident , x , y , z , material , element , n11_max , n11_min , n22_max , n22_min , q12_max , q12_min , q23_max , q23_min , q13_max , q13_min , m11_max , m11_min , m12_max , m12_min , m22_max , m22_min in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , N11_max , N11_min , N22_max , N22_min , Q12_max , Q12_min , Q23_max , Q23_min , Q13_max , Q13_min , M11_max , M11_min , M12_max , M12_min , M22_max , M22_min )] w . writeOutput () except Exception as e : print ( 'Exception reading PlateEnvelopeResults in phase' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading PlateEnvelope results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getPlateEnvelopeResults()' ) return Status . ELEMENT_PROCESSED Plaxis3dResultsConnect Bases: Plaxis3dResults2018 Source code in src\\ge_lib\\plaxis\\Plaxis3dResultsConnect.pyclass Plaxis3dResultsConnect ( Plaxis3dResults2018 ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis3dResultsConnect , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis3dConnect\" def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_EmbeddedBeam.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,ElementID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN),Q12(kN),Q13(kN),M2(kNm),M3(kNm),Tskin(kN/m),Tlat(kN/m),Tlat2(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting EmbeddedBeam results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Z , 'node' ) #print('Retrieved U') Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Utot , 'node' ) #print('Retrieved U') PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUtot , 'node' ) #print('Retrieved dU') U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U3 , 'node' ) #print('Retrieved U1-U3') N = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . N , 'node' ) Q12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q12 , 'node' ) Q13 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q13 , 'node' ) M2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M2 , 'node' ) M3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M3 , 'node' ) #print('Retrieved N') Tskin = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tskin , 'node' ) Tlat = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat , 'node' ) Tlat2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat2 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , N , Q12 , Q13 , M2 , M3 , Tskin , Tlat , Tlat2 )] w . writeOutput () msg = 'Retreived EmbeddedBeam results for ' + phase . Name . value + '(embeddedbeam-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading EnbeddedBeam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading EmbeddedBeam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getEmbeddedBeamResults()' ) return Status . ELEMENT_PROCESSED def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID, ElementID, Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N1(kN/m),N2(kN/m),Q12(kN/m),Q23(kN/m),Q13(kN/m),M11(kNm/m),M22(kNm/m),M12(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Plate results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Z , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U3 , 'node' ) N11 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11 , 'node' ) N22 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22 , 'node' ) Q12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12 , 'node' ) Q23 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23 , 'node' ) Q13 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13 , 'node' ) M11 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11 , 'node' ) M22 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22 , 'node' ) M12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , N11 , N22 , Q12 , Q23 , Q13 , M11 , M22 , M12 )] w . writeOutput () except Exception as e : print ( 'Exception reading Plate in phase' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getPlateResults()' ) return Status . ELEMENT_PROCESSED def getBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getBeamResults' columns = 'Phase,PhaseIdent,MaterialID,ElementID,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN/m),Q12(kN/m),Q13(kN/m),M2(kNm/m),M3(kNm/m)' formats = ' {} , {} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Beam results for Phase ' , phase . Name . value , phase . Identification . value ) try : beamMat = self . g_o . getresults ( phase , self . g_o . Beam . MaterialID , 'node' ) beamEl = self . g_o . getresults ( phase , self . g_o . Beam . ElementID , 'node' ) beamX = self . g_o . getresults ( phase , self . g_o . Beam . X , 'node' ) beamY = self . g_o . getresults ( phase , self . g_o . Beam . Y , 'node' ) beamZ = self . g_o . getresults ( phase , self . g_o . Beam . Z , 'node' ) beamUx = self . g_o . getresults ( phase , self . g_o . Beam . Ux , 'node' ) beamUy = self . g_o . getresults ( phase , self . g_o . Beam . Uy , 'node' ) beamUz = self . g_o . getresults ( phase , self . g_o . Beam . Uz , 'node' ) beamUt = self . g_o . getresults ( phase , self . g_o . Beam . Utot , 'node' ) beamPUx = self . g_o . getresults ( phase , self . g_o . Beam . PUx , 'node' ) beamPUy = self . g_o . getresults ( phase , self . g_o . Beam . PUy , 'node' ) beamPUz = self . g_o . getresults ( phase , self . g_o . Beam . PUz , 'node' ) beamPUt = self . g_o . getresults ( phase , self . g_o . Beam . PUtot , 'node' ) beamU1 = self . g_o . getresults ( phase , self . g_o . Beam . U1 , 'node' ) beamU2 = self . g_o . getresults ( phase , self . g_o . Beam . U2 , 'node' ) beamU3 = self . g_o . getresults ( phase , self . g_o . Beam . U3 , 'node' ) beamN = self . g_o . getresults ( phase , self . g_o . Beam . N , 'node' ) beamQ12 = self . g_o . getresults ( phase , self . g_o . Beam . Q12 , 'node' ) beamQ13 = self . g_o . getresults ( phase , self . g_o . Beam . Q13 , 'node' ) beamM2 = self . g_o . getresults ( phase , self . g_o . Beam . M2 , 'node' ) beamM3 = self . g_o . getresults ( phase , self . g_o . Beam . M3 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( phaseName , phaseIdent , beamMat , beamEl , beamX , beamY , beamZ , beamUx , beamUy , beamUz , beamUt , beamPUx , beamPUy , beamPUz , beamPUt , beamU1 , beamU2 , beamU3 , beamN , beamQ12 , beamQ13 , beamM2 , beamM3 )] w . writeOutput () msg = 'Retreived Beam results for ' + phase . Name . value + '(beam-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading Beam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Beam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getBeamResults()' ) return Status . ELEMENT_PROCESSED def getSoilResultsByPoints_Displacements ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if not filePoints is None : self . loadXYZNodeList ( filePoints ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints_Displacements' columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),locZ(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),Epsxx,Epsyy,Epszz' formats = ' {} , {} , {} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : phaseName = phase . Name . value phaseIdent = phase . Identification . value for pt in self . NodeList : try : ux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uz , ( pt . x , pt . y , pt . z )) utot = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUz , ( pt . x , pt . y , pt . z )) putot = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUtot , ( pt . x , pt . y , pt . z )) ex = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epsxx , ( pt . x , pt . y , pt . z )) ey = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epsyy , ( pt . x , pt . y , pt . z )) ez = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epszz , ( pt . x , pt . y , pt . z )) w . rowsOut = [ formats . format ( phaseName , phaseIdent , pt . locname , float ( pt . x ), float ( pt . y ), float ( pt . z ), float ( ux ), float ( uy ), float ( uz ), float ( utot ), float ( pux ), float ( puy ), float ( puz ), float ( putot ), float ( ex ), float ( ey ), float ( ez ))] w . writeOutput () except Exception as e : msg = '...exception reading SoilResultsByPoints_Displacements results ' + phase . Identification . value print ( msg ) self . logger . error ( msg + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting SoilResultsByPoints_Displacements()' ) return Status . ELEMENT_PROCESSED def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_Interface.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Interface results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Z , 'node' ) Mat = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . MaterialID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U3 , 'node' ) InterfaceEffNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , 'node' ) InterfaceTotNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , 'node' ) InterfaceShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , 'node' ) InterfaceRelShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , 'node' ) PExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PExcess , 'node' ) PActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PActive , 'node' ) PSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PSteady , 'node' ) PWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PWater , 'node' ) Suction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Suction , 'node' ) EffSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . EffSuction , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( phaseName , phaseIdent , X , Y , Z , Mat , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , InterfaceEffNormalStress , InterfaceTotNormalStress , InterfaceShearStress , InterfaceRelShearStress , PExcess , PActive , PSteady , PWater , Suction , EffSuction )] w . writeOutput msg = 'Retreived Interface results for ' + phase . Name . value + '(interface-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading interface results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Interface results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getInterfaceResults()' ) return Status . ELEMENT_PROCESSED def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): #file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_NodeToNodeAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Z , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U3 , 'node' ) Force3D = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . AnchorForce3D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( phaseName , phaseIdent , X , Y , Z , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , Force3D )] w . writeOutput msg = 'Retreived Node2NodeAnchor results for ' + phase . Name . value + '(nodetonodeanchor-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading node2nodeanchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading node2nodeanchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getNode2NodeAnchoreResults()' ) return Status . ELEMENT_PROCESSED def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_FixedEndAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Z , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U3 , 'node' ) Force3D = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . AnchorForce3D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( phaseName , phaseIdent , X , Y , Z , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , Force3D )] w . writeOutput msg = 'Retreived FixedEndAnchor results for ' + phase . Name . value + '(nodetonodeanchor-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading fixedendanchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading node2nodeanchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getFixedEndAnchoreResults()' ) return Status . ELEMENT_PROCESSED def getPlateEnvelopeResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateEnvelopeResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID, ElementID, Ux_max(m),Ux_min(m),Uy_max(m),Uy_min(m),Uz_max(m),Uz_min(m),Utot_max(m),PUx_max(m),PUx_min(m),PUy_max(m),PUy_min(m),PUz_max(m),PUz_min(m),PUt_max(m),N11_max(kN/m),N11_min(kN/m),N22_max(kN/m),N22_max(kN/m),Q12_max(kN/m),Q12_min(kN/m),Q23_max(kN/m),Q23_min(kN/m),Q13_max(kN/m),Q13_min(kN/m),M11_max(kNm/m),M11_min(kNm/m),M12_max(kNm/m),M12_min(kNm/m),M22_max(kNm/m),M22_min(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Plate results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Z , 'node' ) Materal = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMin , 'node' ) Ux_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMax , 'node' ) Uy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMin , 'node' ) Uy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMax , 'node' ) Uz_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UzMin , 'node' ) Uz_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UzMax , 'node' ) Ut_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UtotMax , 'node' ) PUx_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMin , 'node' ) PUx_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMax , 'node' ) PUy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMin , 'node' ) PUy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMax , 'node' ) PUz_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUzMin , 'node' ) PUz_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUzMax , 'node' ) PUt_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtotMax , 'node' ) N11_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11_EnvelopeMax , 'node' ) N11_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11_EnvelopeMin , 'node' ) N22_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22_EnvelopeMax , 'node' ) N22_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22_EnvelopeMin , 'node' ) Q12_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12_EnvelopeMax , 'node' ) Q12_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12_EnvelopeMin , 'node' ) Q13_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13_EnvelopeMax , 'node' ) Q13_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13_EnvelopeMin , 'node' ) Q23_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23_EnvelopeMax , 'node' ) Q23_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23_EnvelopeMin , 'node' ) M11_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11_EnvelopeMax , 'node' ) M11_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11_EnvelopeMin , 'node' ) M22_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22_EnvelopeMax , 'node' ) M22_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22_EnvelopeMin , 'node' ) M12_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12_EnvelopeMax , 'node' ) M12_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12_EnvelopeMin , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , material , element , ux_max , ux_min , uy_max , uy_min , uz_max , uz_min , ut_max , pux_max , pux_min , puy_max , puy_min , puz_max , puz_min , put_max , n11_max , n11_min , n22_max , n22_min , q12_max , q12_min , q23_max , q23_min , q13_max , q13_min , m11_max , m11_min , m12_max , m12_min , m22_max , m22_min ) for pname , pident , x , y , z , material , element , ux_max , ux_min , uy_max , uy_min , uz_max , uz_min , ut_max , pux_max , pux_min , puy_max , puy_min , puz_max , puz_min , put_max , n11_max , n11_min , n22_max , n22_min , q12_max , q12_min , q23_max , q23_min , q13_max , q13_min , m11_max , m11_min , m12_max , m12_min , m22_max , m22_min in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , Ux_max , Ux_min , Uy_max , Uy_min , Uz_max , Uz_min , Ut_max , PUx_max , PUx_min , PUy_max , PUy_min , PUz_max , PUz_min , PUt_max , N11_max , N11_min , N22_max , N22_min , Q12_max , Q12_min , Q23_min , Q23_min , Q13_max , Q13_min , M11_max , M11_min , M12_max , M12_min , M22_max , M22_min )] w . writeOutput () except Exception as e : print ( 'Exception reading PlateEnvelopeResults in phase' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading PlateEnvelope results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getPlateEnvelopeResults()' ) return Status . ELEMENT_PROCESSED PlaxisScripting Bases: object Source code in src\\ge_lib\\plaxis\\PlaxisScripting.pyclass PlaxisScripting ( object ): def __init__ ( self , ps = None , host = None , port = None , password = None , task_log = None , plx_log = None ): print ( 'getting Connected...' ) if ps is None : if password is None : password = '' self . s_o , self . g_o = new_server ( address = host , port = port , timeout = TIMEOUT , request_timeout = REQUEST_TIMEOUT , password = password ) if task_log is not None : if _is_file_like ( task_log ): hdlr = logging . StreamHandler ( task_log ) else : hdlr = logging . FileHandler ( task_log ) else : hdlr = logging . StreamHandler () formatter = logging . Formatter ( ' %(asctime)s %(levelname)s %(message)s ' ) hdlr . setFormatter ( formatter ) self . logger = logging . getLogger ( host + '_PlaxisResults' ) self . logger . addHandler ( hdlr ) self . logger . setLevel ( logging . INFO ) if plx_log is not None : if _is_file_like ( plx_log ): self . s_o . enable_logging ( buffer = plx_log ) else : self . s_o . enable_logging ( path = plx_log ) if ( self . s_o . is_2d is False and self . s_o . is_3d is False ): print ( '..no connection' ) raise ValueError ( \"Not Connected\" ) else : print ( 'Connected:' , host , port , self . s_o . name , self . s_o . major_version , self . s_o . minor_version , 'Is2d=' , self . s_o . is_2d , 'Is3d=' , self . s_o . is_3d ) self . NodeList = [] else : self . s_o = ps . s_o self . g_o = ps . g_o self . logger = ps . logger self . NodeList = ps . NodeList def match ( self , ** kwargs ): return all ( getattr ( self , key ) == val for ( key , val ) in kwargs . items ()) def connect ( self , host , port , password ): self . s_o , self . g_o = new_server ( address = host , port = port , password = password ) print ( 'Connected:' , host , port , self . s_o . name , self . s_o . major_version , self . s_o . minor_version , 'Is2d=' , self . s_o . is_2d , 'Is3d=' , self . s_o . is_3d ) def is_connected ( self ): if ( self . s_o is not None ): return self . s_o . active return False def clearNodeList ( self ): self . NodeList = [] def printNodeListXYZ ( self ): formats = ' {} , {:.3f} , {:.3f} , {:.3f} ' for point in self . NodeList : print ( formats . format ( point . name , point . x , point . y , point . z )) # print(point.name, point.x, point.y, point.z) class PointXY ( object ): def __init__ ( self , name , x , y ): self . name = name self . x = float ( x ) self . y = float ( y ) self . coord = ' {0:.3f} , {1:.3f} ' . format ( float ( x ), float ( y )) class PointXYZ ( object ): def __init__ ( self , name , x , y , z ): self . name = name self . x = float ( x ) self . y = float ( y ) self . z = float ( z ) self . coord = ' {0:.3f} , {1:.3f} , {2:.3f} ' . format ( float ( x ), float ( y ), float ( z )) def is_number ( self , s ): try : float ( s ) return True except ValueError : return False def isfloat ( self , s , value_false ): try : if s == 'NaN' : return value_false if s == 'not found' : return value_false else : f = float ( s ) print ( 'float:' , f ) return f except ValueError : return value_false def getPhaseList ( self ): # return [ph for ph in self.gi.phases phases = [] for phase in self . g_o . Phases : phases . append ( phase . Name . value ) return phases def getPhaseInt ( self , phaseName ): count = 0 print ( 'looking for phase:' + phaseName ) for phase in self . g_o . Phases : if phase . Name . value == phaseName : print ( 'found...' , count ) return count count += 1 return - 1 def setSteps2 ( self , phase ): self . Steps = [] steps = phase [:] accessed_mapping = map ( steps . __getitem__ , self . StepList ) self . Steps = list ( accessed_mapping ) def setSteps ( self , phase ): self . Steps = [] print ( \" {0} finding selected steps {1} \" . format ( phase . Name . value , self . g_o . count ( phase . Steps ))) steps = phase [:] print ( \" {} \" . format ( len ( steps ))) for step in steps : print ( \" {} \" . format ( step )) if not self . StepList or step in self . StepList : self . Steps . append ( step ) print ( \"Added {0} {1} \" . format ( step . Name , step )) def setOutput ( self , fileOut , tableOut , columns , formats ): self . fileOut = fileOut self . tableOut = tableOut self . rowsOut = [] self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' def writeOutput ( self , clear = True ): print ( 'Outputting rows to file ' , self . fileOut , '....' ) with open ( self . fileOut , \"w\" ) as fp : fp . write ( \" \\n \" . join ( str ( row ) for row in self . rowsOut )) if ( clear == True ): self . rowsOut = [] def setPhaseOrder ( self , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . phaseOrder = [] if sphaseOrder == 'All' : sphaseOrder = None if sphaseOrder is None : if sphaseStart is None and sphaseEnd is None : self . phaseOrder = self . g_o . Phases [:] if self . phaseOrder is not None : print ( 'All phases added to phaseOrder' ) if sphaseStart is None and sphaseEnd is not None : id = self . getPhaseInt ( sphaseEnd ) self . phaseOrder = self . g_o . Phases [: id ] if self . phaseOrder is not None : print ( 'All phases up to' , sphaseEnd , ' added' ) if sphaseStart is not None and sphaseEnd is None : id = self . getPhaseInt ( phaseName = sphaseStart ) self . phaseOrder = self . g_o . Phases [ id :] if self . phaseOrder is not None : print ( 'All phases from ' , sphaseStart , ' added' ) if sphaseStart is not None and sphaseEnd is not None : id = self . getPhaseInt ( sphaseStart ) id2 = self . getPhaseInt ( sphaseEnd ) self . phaseOrder = self . g_o . Phases [ id : id2 + 1 ] if self . phaseOrder is not None : print ( 'All phases from ' , sphaseStart , ' to ' , sphaseEnd , ' added' ) if sphaseOrder is not None : aphaseOrder = sphaseOrder . split ( \",\" ) for sphase in aphaseOrder : id = self . getPhaseInt ( sphase ) self . phaseOrder . append ( self . g_o . Phases [ id ]) print ( 'phase:' , sphase , ' added' ) if self . phaseOrder is not None : print ( 'phaseOrder initialised with' , len ( self . phaseOrder ) , ' no. phases' ) def setRange ( self , xMin = None , xMax = None , yMin = None , yMax = None , zMin = None , zMax = None ): global g_xMin , g_xMax , g_yMin , g_yMax , g_zMin , g_zMax g_xMin = xMin g_xMax = xMax g_yMin = yMin g_yMax = yMax g_zMin = zMin g_zMax = zMax def printRange ( self ): print ( 'g_xMin' , g_xMin , 'g_xMax' , g_xMax , 'g_yMin' , g_yMin , 'g_yMax' , g_yMax ,) def inRange ( self , x_val = None , y_val = None , z_val = None ): xMinRangeOk = True xMaxRangeOk = True yMinRangeOk = True yMaxRangeOk = True zMinRangeOk = True zMaxRangeOk = True # self.printRange() # print ('x_val', x_val, # 'y_val', y_val) if g_xMin is not None and x_val is not None : if x_val >= g_xMin : xMinRangeOk = True else : xMinRangeOk = False else : xMinRangeOk = True if g_yMin is not None and y_val is not None : if y_val >= g_yMin : yMinRangeOk = True else : yMinRangeOk = False else : yMinRangeOk = True if g_xMax is not None and x_val is not None : if x_val <= g_xMax : xMaxRangeOk = True else : xMaxRangeOk = False else : xMaxRangeOk = True if g_yMax is not None and y_val is not None : if y_val <= g_yMax : yMaxRangeOk = True else : yMaxRangeOk = False else : yMaxRangeOk = True if g_zMax is not None and z_val is not None : if z_val <= g_zMax : zMaxRangeOk = True else : zMaxRangeOk = False else : zMaxRangeOk = True if g_zMin is not None and z_val is not None : if z_val >= g_zMin : zMinRangeOk = True else : zMinRangeOk = False else : zMinRangeOk = True if xMinRangeOk and xMaxRangeOk and yMinRangeOk and yMaxRangeOk and zMinRangeOk and zMaxRangeOk : # print ('inRange x_val', x_val, # 'y_val', y_val) return True else : return False def setXYZNodeList ( self , xMin = 0.0 , xMax = 0.0 , yMin = 0.0 , yMax = 0.0 , zMin = 0.0 , zMax = 0.0 ): phase = self . phaseOrder [ 0 ] count = 0 self . setRange ( xMin , xMax , yMin , yMax , zMin , zMax ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) soilZ = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Z , 'node' ) print ( 'Coordinates retrieved for Phase ' , phase . Name . value ) for x , y , z in zip ( soilX , soilY , soilZ ): if self . inRange ( x_val = x , y_val = y , z_val = z ) == True : count = count + 1 self . NodeList . append ( self . PointXYZ ( count , x , y , z )) print ( 'Added node at (' , x , y , z , ')' ) print ( len ( self . NodeList ), ' nodes added to NodeList' ) def setXYZNodeList2 ( self , xMin = 0.0 , xMax = 0.0 , yMin = 0.0 , yMax = 0.0 , zMin = 0.0 , zMax = 0.0 ): phase = self . phaseOrder [ 0 ] count = 0 self . setRange ( xMin , xMax , yMin , yMax , zMin , zMax ) soilN = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . NodeID , 'node' ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) soilZ = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Z , 'node' ) print ( 'Coordinates retrieved for Phase ' , phase . Name . value ) for x , y , z , n in zip ( soilX , soilY , soilZ , soilN ): if self . inRange ( x_val = x , y_val = y , z_val = z ) == True : count = count + 1 self . NodeList . append ( self . PointXYZ ( n , x , y , z )) print ( 'Added node ' , n , ' at (' , x , y , z , ')' ) print ( len ( self . NodeList ), ' nodes added to NodeList' ) def setXYNodeList ( self , xMin = 0.0 , xMax = 0.0 , yMin = 0.0 , yMax = 0.0 ): phase = self . phaseOrder [ 0 ] count = 0 self . setRange ( xMin , xMax , yMin , yMax , zMin = None , zMax = None ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) print ( 'Coordinates retrieved for Phase ' , phase . Name . value ) for x , y in zip ( soilX , soilY ): if self . inRange ( x_val = x , y_val = y , z_val = None ) == True : count = count + 1 self . NodeList . append ( self . PointXY ( count , x , y )) print ( 'Added node at (' , x , y , ')' ) print ( len ( self . NodeList ), ' nodes added to NodeList' ) def addXYNode ( self , name , x = 0.0 , y = 0.0 ): self . NodeList . append ( self . PointXY ( name , x , y )) print ( 'Added node at (' , name , x , y , ')' ) def addXYZNode ( self , name , x = 0.0 , y = 0.0 , z = 0.0 ): self . NodeList . append ( self . PointXYZ ( name , x , y )) print ( 'Added node at (' , name , x , y , z , ')' ) def createXYArc ( self , name = None , xCen = 0.00 , yCen = 0.00 , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 ): ref = name count = 0 arc_array = [] x = 0.0 y = 0.0 arc_array = self . getArcCoordsArray ( xCen , yCen , rad , degStart , degEnd , degStep ) for coord in arc_array : x , y = coord self . NodeList . append ( self . PointXY ( name , x , y )) print ( 'Added node at (' , name , x , y , ')' ) def createXYZArc_XYPlane ( self , name = None , xCen = 0.00 , yCen = 0.00 , zCen = 0.00 , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 ): ref = name count = 0 arc_array = [] x = 0.0 z = 0.0 arc_array = self . getArcCoordsArray ( xCen , yCen , rad , degStart , degEnd , degStep ) for coord in arc_array : x , y = coord self . NodeList . append ( self . PointXYZ ( name , x , y , zCen )) print ( 'Added node at (' , name , x , y , zCen , ')' ) def createXYZArc_XZPlane ( self , name = None , xCen = 0.00 , yCen = 0.00 , zCen = 0.00 , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 ): ref = name count = 0 arc_array = [] x = 0.0 z = 0.0 arc_array = self . getArcCoordsArray ( xCen , zCen , rad , degStart , degEnd , degStep ) for coord in arc_array : x , z = coord self . NodeList . append ( self . PointXYZ ( name , x , yCen , z )) print ( 'Added node at (' , name , x , yCen , z , ')' ) def createXYZArc_YZPlane ( self , name = None , xCen = 0.00 , yCen = 0.00 , zCen = 0.00 , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 ): ref = name count = 0 arc_array = [] y = 0.0 z = 0.0 arc_array = self . getArcCoordsArray ( yCen , zCen , rad , degStart , degEnd , degStep ) for coord in arc_array : y , z = coord self . NodeList . append ( self . PointXYZ ( name , xCen , y , z )) print ( 'Added node at (' , name , xCen , y , z , ')' ) def getArcCoordsArray ( self , iCen = 0.00 , jCen = 0.00 , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 ): i_coord = 0.0 j_coord = 0.0 coords = [] # direction vector for 0 degree (j=1; i=0) # diection vector for 90 degree (j=0, i=1) deg = degStart while ( deg < degEnd ): i_coord = iCen + rad * math . sin ( math . radians ( deg )) j_coord = jCen + rad * math . cos ( math . radians ( deg )) coord = ( i_coord , j_coord ) coords . append ( coord ) deg = deg + degStep return coords ; def createXYZCylinder ( self , name = None , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 , xMin = 0.0 , xMax = 0.0 , xStep = 0.0 , yMin = 0.0 , yMax = 0.0 , yStep = 0.0 , zMin = 0.0 , zMax = 0.0 , zStep = 0.0 , ): count = 0 arc_coords = [] x = 0.0 y = 0.0 z = 0.0 if xStep == 0 : xcount = 1 else : xcount = int ( abs (( xMax - xMin ) / xStep ) + 0.1 ) + 1 if yStep == 0 : ycount = 1 else : ycount = int ( abs (( yMax - yMin ) / yStep ) + 0.1 ) + 1 if zStep == 0 : zcount = 1 else : zcount = int ( abs (( zMax - zMin ) / zStep ) + 0.1 ) + 1 if ( ycount == 1 and zcount == 1 ): # cyclinder direction in x axis, arc in zy plane arc_coords = self . getArcCoordsArray ( yMin , zMin , rad , degStart , degEnd , degStep ) if ( xcount == 1 and zcount == 1 ): # cyclinder direction in y axis, arc in zx plane arc_coords = self . getArcCoordsArray ( xMin , zMin , rad , degStart , degEnd , degStep ) if ( xcount == 1 and ycount == 1 ): # cyclinder direction in z axis, arc in xy plane arc_coords = self . getArcCoordsArray ( xMin , yMin , rad , degStart , degEnd , degStep ) for ix in range ( 0 , xcount , 1 ): x = xMin + xStep * ix for iy in range ( 0 , ycount , 1 ): y = yMin + yStep * iy for iz in range ( 0 , zcount , 1 ): z = zMin + zStep * iz if ( ycount == 1 and zcount == 1 ): # cyclinder direction in x axis, arc in zy plane for coord in arc_coords : y_arc , z_arc = coord self . NodeList . append ( self . PointXYZ ( name , x , y_arc , z_arc )) if ( xcount == 1 and zcount == 1 ): # cyclinder direction in y axis, arc in zx plane for coord in arc_coords : x_arc , z_arc = coord self . NodeList . append ( self . PointXYZ ( name , x_arc , y , z_arc )) if ( xcount == 1 and ycount == 1 ): # cyclinder direction in z axis, arc in xy plane for coord in arc_coords : x_arc , y_arc = coord self . NodeList . append ( self . PointXYZ ( name , x_arc , y_arc , z )) def getXYNodeListItem ( self , x , y ): find_coord = \" {0:.3f} , {1:.3f} \" . format ( float ( x ), float ( y )) for p in self . NodeList : # print (p.coord, find_coord) if ( p . coord == find_coord ): return p return None def createXYZGrid ( self , name = None , xMin = 0.0 , xMax = 0.0 , xStep = 0.0 , yMin = 0.0 , yMax = 0.0 , yStep = 0.0 , zMin = 0.0 , zMax = 0.0 , zStep = 0.0 , ): ref = name count = 0 x = 0.0 y = 0.0 z = 0.0 if xStep == 0 : xcount = 1 else : xcount = int ( abs (( xMax - xMin ) / xStep ) + 0.1 ) + 1 if yStep == 0 : ycount = 1 else : ycount = int ( abs (( yMax - yMin ) / yStep ) + 0.1 ) + 1 if zStep == 0 : zcount = 1 else : zcount = int ( abs (( zMax - zMin ) / zStep ) + 0.1 ) + 1 # print ('array size(', xcount, ycount, zcount, ')') self . setRange ( xMin , xMax , yMin , yMax , zMin , zMax ) for ix in range ( 0 , xcount , 1 ): x = xMin + xStep * ix for iy in range ( 0 , ycount , 1 ): y = yMin + yStep * iy for iz in range ( 0 , zcount , 1 ): z = zMin + zStep * iz count = count + 1 if name is None : ref = count self . NodeList . append ( self . PointXYZ ( ref , x , y , z )) # print ('Added node at (', x, y, z, ')') def createXYGrid ( self , name = None , xMin = 0.0 , xMax = 0.0 , xStep = 0.0 , yMin = 0.0 , yMax = 0.0 , yStep = 0.0 ): count = 0 ix = 0 iy = 0 x = 0.0 y = 0.0 self . setRange ( xMin , xMax , yMin , yMax ) if xStep == 0 : xcount = 1 else : xcount = int ( abs (( xMax - xMin ) / xStep ) + 0.1 ) + 1 if yStep == 0 : ycount = 1 else : ycount = int ( abs (( yMax - yMin ) / yStep ) + 0.1 ) + 1 for ix in range ( 1 , xcount , 1 ): x = xMin + xStep * ix for iy in range ( 1 , ycount , 1 ): y = yMin + yStep * iy count = count + 1 if name is None : ref = count self . NodeList . append ( self . PointXY ( ref , x , y )) print ( 'Added node at (' , x , y , ')' ) def loadXYZNodeList ( self , fileIn , append = False ): fpoint = open ( fileIn , \"r\" ) if ( append == False ): self . NodeList = [] while True : in_line = fpoint . readline () if in_line == \"\" : break if ',' in in_line : [ name , nx , ny , nz ] = in_line . split ( ',' ) if self . is_number ( nx ): if self . is_number ( ny ): if self . is_number ( nz ): self . NodeList . append ( self . PointXYZ ( name , nx , ny , nz )) print ( 'Node Added {} , {:3f} , {:3f} , {:3f} ' . format ( name , float ( nx ), float ( ny ), float ( nz ))) fpoint . close () def loadXYNodeList ( self , fileIn , append = False ): fpoint = open ( fileIn , \"r\" ) if ( append == False ): self . NodeList = [] while True : in_line = fpoint . readline () if in_line == \"\" : break if ',' in in_line : [ name , nx , ny ] = in_line . split ( ',' ) if self . is_number ( nx ): if self . is_number ( ny ): self . NodeList . append ( self . PointXY ( name , nx , ny )) print ( 'Node Added {} , {:3f} , {:3f} ' . format ( name , float ( nx ), float ( ny ))) fpoint . close () def loadStepList ( self , fileIn , append = False ): fpoint = open ( fileIn , \"r\" ) if ( append == False ): self . StepList = [] while True : in_line = fpoint . readline () in_line = in_line . replace ( ' \\n ' , '' ) if in_line == \"\" : break self . StepList . append ( int ( in_line )) fpoint . close () def IsDbFile ( self , db_file = None ): retvar = False if ( db_file != None ): if ( db_file [ - 4 :] == '.mdb' ): retvar = True if ( db_file [ - 6 :] == '.accdb' ): retvar = True return retvar def getConnected ( self , db_file ): self . conn_string = r 'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=' + db_file + ';' file = '' if ( os . path . isfile ( db_file )): self . conn = pyodbc . connect ( self . conn_string ) print ( 'connecting to existing db:' + db_file ) else : if db_file [ - 6 :] == '.accdb' : file = db_file [: - 6 ] if db_file [ - 4 :] == '.mdb' : file = db_file [: - 4 ] if not file : file = db_file self . conn = pyodbc . win_create_mdb ( file ) print ( 'connecting to new db:' + db_file ) db_file = file + '.mdb' self . db_file = db_file def setFields ( self , fields , formats ): self . columns = fields . split ( ',' ) self . formats = formats . split ( ',' ) self . types = formats . split ( ',' ) for i in range ( len ( self . types )): if ( self . formats [ i ] == ' {:2f} ' ): self . types [ i ] = 'float' if ( self . formats [ i ] == ' {:f} ' ): self . types [ i ] = 'float' if ( self . formats [ i ] == ' {} ' ): self . types [ i ] = 'varchar(255)' if ( self . formats [ i ] == ' {:0} ' ): self . types [ i ] = 'int' if ( self . formats [ i ] == ' {0} ' ): self . types [ i ] = 'int' def createTable ( self , tname , fields , formats ): self . tname = tname self . setFields ( fields , formats ) self . sql_insert = 'insert into ' + tname + ' (' self . sql_drop = 'drop table ' + tname self . sql_create = 'create table ' + tname + ' (id autoincrement primary key, ' self . sql_select = 'select ' separator = '' for i in range ( len ( self . columns )): if ( i > 0 ): separator = ', ' self . sql_create += separator + '[' + self . columns [ i ] + '] ' + self . types [ i ] self . sql_insert += separator + '[' + self . columns [ i ] + ']' self . sql_select += separator + '[' + self . columns [ i ] + ']' self . sql_create += ')' self . sql_insert += ')' self . sql_select += ' from ' + tname print ( self . sql_create ) cursor = self . conn . cursor () if ( self . tableExists ( tname )): cursor . execute ( self . sql_drop ) cursor . execute ( self . sql_create ) self . conn . commit () def tableExists ( self , tname ): try : cursor = self . conn . cursor () sql = 'select top 1 * from ' + tname cursor . execute ( sql ) return True except : return False def insertValues ( self , data ): self . sql_data = self . sql_insert + ' values (' separator = '' for i in range ( len ( data )): if ( i > 0 ): separator = ', ' if ( self . types [ i ] . find ( 'varchar' ) >= 0 ): self . sql_data += separator + ' \\' ' + str ( data [ i ]) + ' \\' ' else : self . sql_data += separator + str ( data [ i ]) self . sql_data += ')' cursor = self . conn . cursor () cursor . execute ( self . sql_data ) self . conn . commit () GetPlaxisResults ( host = None , port = None , password = None , version = None , task_log = None , plx_log = None ) Source code in src\\ge_lib\\plaxis\\PlaxisResults.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def GetPlaxisResults ( host = None , port = None , password = None , version = None , task_log = None , plx_log = None ): ps = PlaxisScripting ( ps = None , host = host , port = port , password = password , task_log = task_log , plx_log = plx_log ) if ( ps . is_connected == False ): return None if ( version != None ): if version not in versions : version = None if ( version == None ): if ( ps . s_o . is_3d ): if ( ps . s_o . major_version == 2023 ): return Plaxis3dResults2023 ( ps ) if ( ps . s_o . major_version == 22.0 ): return Plaxis3dResultsConnect ( ps ) if ( ps . s_o . major_version == 21.0 ): return Plaxis3dResultsConnect ( ps ) if ( ps . s_o . major_version == 20.0 ): return Plaxis3dResultsConnect ( ps ) if ( ps . s_o . major_version == 9.0 ): return Plaxis3dResults2018 ( ps ) if ( ps . s_o . major_version < 9.0 ): return Plaxis3dResults ( ps ) ## if (ps.s_o.minor_version==1422) if ( ps . s_o . is_2d ): if ( ps . s_o . major_version == 2023 ): return Plaxis2dResults2023 ( ps ) if ( ps . s_o . major_version == 22.0 ): return Plaxis2dResultsConnectV22 ( ps ) if ( ps . s_o . major_version == 21.0 ): return Plaxis2dResultsConnectV2 ( ps ) if ( ps . s_o . major_version == 20.0 ): return Plaxis2dResultsConnectV2 ( ps ) if ( ps . s_o . major_version == 9.0 ): return Plaxis2dResults2019 ( ps ) if ( ps . s_o . major_version == 8.0 ): return Plaxis2dResults2016 ( ps ) return ps else : if ( version == 'Plaxis2d' ): return Plaxis2dResults ( ps ) if ( version == 'Plaxis2d2016' ): return Plaxis2dResults2016 ( ps ) if ( version == 'Plaxis2d2019' ): return Plaxis2dResults2019 ( ps ) if ( version == 'Plaxis2dConnectV2' or version == 'Plaxis2dConnectV21' or version == 'Plaxis2dConnectV20' or version == 'Plaxis2dConnect' ): return Plaxis2dResultsConnectV2 ( ps ) if ( version == 'Plaxis2dConnectV22' ): return Plaxis2dResultsConnectV22 ( ps ) if ( version == 'Plaxis3d' ): return Plaxis3dResults ( ps ) if ( version == 'Plaxis3d2018' ): return Plaxis3dResults2018 ( ps ) if ( version == 'Plaxis3dConnect' ): return Plaxis3dResultsConnect ( ps )","title":"Plaxis Results Extraction"},{"location":"plaxis/#plaxis-results","text":"============================ A results class for each of the plaxis versions will connect to the host output server and will request selected results and phases from the output model | plx.getAllStructuralResults(param list) | plx.getInterfaceResults(param list) | plx.getPlateResults(param list) | plx.getEmbeddedBeamResults(param list) where param list may contain folderOut: 'c:\\temp', Any | None = None | The folder that the results should be saved to fileOut: 'myfile.csv', Any | None = None | The file name that will be used to save the data. The file name extention will tell the function which format is required. | \" .mdb\" Access database file | \" .csv\" Comma Separated Value text file tableOut: Any | None = None | The table name that will be used if the data is saved in a database storage system sphaseOrder: Any | None = None | List of phases to be included in returned data for example 'Phase_1,Phase_24,Phase_30' if left blank it will be taken as all phases between the sPhaseStart and sPhaseEnd parameters sphaseStart: Any | None = None, | First phase to be included in returned data for example 'Phase_1' if left blank it will be taken as the first phase in the output sphaseEnd: Any | None = None | Last phase to be included in returned data for example 'Phase_24' if left blank it will be the last phase in the output","title":"Plaxis Results"},{"location":"plaxis/#implementation","text":"A connection to the host server can be established and the appropriate version of the plaxis result class is returned, this is achieved using the GetPlaxisResults function as detailed below from ge_lib.plaxis.PlaxisResults import GetPlaxisResults try: plx = GetPlaxisResults(host=\"UKCRD1PC34587\", port=10000, password='D@r>Srh1/vft9#ky') if plx: plx.getAllStructuralResults(folderOut=\"c:\\\\Temp\", sphaseOrder='Phase_23,Phase_24,Phase_26') except Exception as e: print (str(e))","title":"Implementation"},{"location":"plaxis/#juypter-notebook","text":"We have created an example Juypter Notebook which connects to the Plaxis 2D Output program and extracts structural results dfor selected phases See here","title":"Juypter Notebook"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.versions","text":"","title":"versions"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.Plaxis2dResults","text":"Bases: PlaxisScripting Source code in src\\ge_lib\\plaxis\\Plaxis2dResults.pyclass Plaxis2dResults ( PlaxisScripting ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResults , self ) . __init__ ( server , host , port , password = password ) if ( self . s_o . is_2d == False ): raise ValueError ( 'This is a Plaxis2d output reader, but the output plaxis server is not Plaxis2d' ); def version ( self ): return \"Plaxis2d\" def getSoilResultsByRanges ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , xMin = None , xMax = None , yMin = None , yMax = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) self . setRange ( xMin , xMax , yMin , yMax ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByRanges' locY = [] locX = [] Uyy = [] Uxx = [] Utot = [] PUyy = [] PUxx = [] PUtot = [] MaterialID = [] ElementID = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] PExcess = [] PActive = [] PSteady = [] PWater = [] Suct = [] EffSuct = [] pPhaseName = [] pPhaseIdent = [] # look into all phases, all steps for phase in self . phaseOrder : print ( 'Getting Soil results for Phase ' , phase . Name . value , phase . Identification . value ) soilMat = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . MaterialID , 'node' ) soilEl = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . ElementID , 'node' ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) soilUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Ux , 'node' ) soilUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Uy , 'node' ) soilUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Ut , 'node' ) soilPUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUy , 'node' ) soilPUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUx , 'node' ) soilPUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUt , 'node' ) soilEffSxx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigxxE , 'node' ) soilEffSyy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigyyE , 'node' ) soilEffSzz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigzzE , 'node' ) soilEffP1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective1 , 'node' ) soilEffP2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective2 , 'node' ) soilEffP3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective3 , 'node' ) soilPExcess = self . g_o . getresults ( phase , self . g_o . Soil . PExcess , 'node' ) soilPActive = self . g_o . getresults ( phase , self . g_o . Soil . PActive , 'node' ) soilPSteady = self . g_o . getresults ( phase , self . g_o . Soil . PSteady , 'node' ) soilPWater = self . g_o . getresults ( phase , self . g_o . Soil . PWater , 'node' ) soilSuction = self . g_o . getresults ( phase , self . g_o . Soil . Suction , 'node' ) soilEffSuction = self . g_o . getresults ( phase , self . g_o . Soil . EffSuction , 'node' ) for x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( soilX , soilY , soilMat , soilEl , soilUx , soilUy , soilUt , soilPUx , soilPUy , soilPUt , soilEffSxx , soilEffSyy , soilEffSzz , soilEffP1 , soilEffP2 , soilEffP3 , soilPExcess , soilPActive , soilPSteady , soilPWater , soilSuction , soilEffSuction ): if self . inRange ( x_val = x , y_val = y ) == True : print ( phase . Name . value , phase . Identification . value , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu ) pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) locX . append ( x ) locY . append ( y ) Uxx . append ( ux ) Uyy . append ( uy ) Utot . append ( ut ) PUxx . append ( pux ) PUyy . append ( puy ) PUtot . append ( put ) MaterialID . append ( mat ) ElementID . append ( el ) EffSxx . append ( esx ) EffSyy . append ( esy ) EffSzz . append ( esz ) EffP1 . append ( ep1 ) EffP2 . append ( ep2 ) EffP3 . append ( ep3 ) PExcess . append ( pe ) PActive . append ( pa ) PSteady . append ( ps ) PWater . append ( pw ) Suct . append ( su ) EffSuct . append ( esu ) columns = 'Phase,PhaseIdent,locX(m),locY(m),MaterialID,ElementID,Ux(m),Uy(m),Ut(m),PUx(m),PUy(m),PUt(m),SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa),EffSuct(kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f}{:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to string....' ) rows = '' . join ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( pPhaseName , pPhaseIdent , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct , EffSuct )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( pPhaseName , pPhaseIdent , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct , EffSuct )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( pPhaseName , pPhaseIdent , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct , EffSuct ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( esx ) row . append ( esy ) row . append ( esz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pe ) row . append ( pa ) row . append ( ps ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getSoilResultsByRanges Done' ) def getSoilResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints' locName = [] locY = [] locX = [] MaterialID = [] ElementID = [] Uyy = [] Uxx = [] Utot = [] PUyy = [] PUxx = [] PUtot = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] PExcess = [] PActive = [] PSteady = [] PWater = [] Suct = [] EffSuct = [] pPhaseName = [] pPhaseIdent = [] if filePoints : fpoint = open ( filePoints , \"r\" ) while True : in_line = fpoint . readline () if in_line == \"\" : break print ( in_line ) [ name , nx , ny ] = in_line . split ( ',' ) self . NodeList . append ( self . PointXY ( name , nx , ny )) fpoint . close () for phase in self . phaseOrder : print ( 'Getting soil results ' + phase . Identification . value ) for pt in self . NodeList : try : mat = self . g_o . getsingleresult ( phase , self . g_o . Soil . MaterialID , ( pt . x , pt . y )) el = self . g_o . getsingleresult ( phase , self . g_o . Soil . ElementID , ( pt . x , pt . y )) ux = self . g_o . getsingleresult ( phase , self . g_o . Soil . Ux , ( pt . x , pt . y )) uy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uy , ( pt . x , pt . y )) ut = self . g_o . getsingleresult ( phase , self . g_o . Soil . Utot , ( pt . x , pt . y )) pux = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUx , ( pt . x , pt . y )) puy = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUy , ( pt . x , pt . y )) put = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUtot , ( pt . x , pt . y )) esx = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigxxE , ( pt . x , pt . y )) esy = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigyyE , ( pt . x , pt . y )) esz = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigzzE , ( pt . x , pt . y )) ep1 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective1 , ( pt . x , pt . y )) ep2 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective2 , ( pt . x , pt . y )) ep3 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective3 , ( pt . x , pt . y )) pe = self . g_o . getsingleresult ( phase , self . g_o . Soil . PExcess , ( pt . x , pt . y )) pa = self . g_o . getsingleresult ( phase , self . g_o . Soil . PActive , ( pt . x , pt . y )) ps = self . g_o . getsingleresult ( phase , self . g_o . Soil . PSteady , ( pt . x , pt . y )) pw = self . g_o . getsingleresult ( phase , self . g_o . Soil . PWater , ( pt . x , pt . y )) su = self . g_o . getsingleresult ( phase , self . g_o . Soil . Suction , ( pt . x , pt . y )) # print (pt.name, pt.x, pt.y, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) if ux != 'not found' : pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) locName . append ( pt . name ) locY . append ( pt . y ) locX . append ( pt . x ) MaterialID . append ( int ( float ( mat ) + .1 )) ElementID . append ( int ( float ( el ) + .1 )) Uyy . append ( uy ) Uxx . append ( ux ) Utot . append ( ut ) PUyy . append ( puy ) PUxx . append ( pux ) PUtot . append ( put ) EffSxx . append ( esx ) EffSyy . append ( esy ) EffSzz . append ( esz ) EffP1 . append ( ep1 ) EffP2 . append ( ep2 ) EffP3 . append ( ep3 ) PExcess . append ( pe ) PActive . append ( pa ) PSteady . append ( ps ) PWater . append ( pw ) Suct . append ( su ) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) print ( pt . name , pt . x , pt . y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su ) columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): try : print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , locname , float ( x ), float ( y ), mat , el , float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( esx ), float ( esy ), float ( esz ), float ( ep1 ), float ( ep2 ), float ( ep3 ), float ( pe ), float ( pa ), float ( ps ), float ( pw ), float ( su )) for pname , pident , locname , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct )]) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) #~ print (pname, pident, locname, x, y, mat, el, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) #~ print (pPhaseName, pPhaseIdent, locName, locX, locY, MaterialID, ElementID, Uxx, Uyy, Utot, PUxx, PUyy, PUtot, EffSxx, EffSyy, EffSzz, EffP1, EffP2, EffP3, PExcess, PActive, PSteady, PWater, Suct) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , locname , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct ): row = [] row . append ( pname ) row . append ( pident ) row . append ( locname ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( esx ) row . append ( esy ) row . append ( esz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pe ) row . append ( pa ) row . append ( ps ) row . append ( pw ) row . append ( su ) self . insertValues ( row ) print ( 'getSoilResultsByPoint Done' ) def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' # init data for lists pPhaseName = [] pPhaseIdent = [] pY = [] pX = [] pMat = [] pEl = [] pUx = [] pUy = [] pUt = [] pPUx = [] pPUy = [] pPUt = [] pU1 = [] pU2 = [] pM2D = [] pQ2D = [] pNx2D = [] pNz2D = [] for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : plateX = self . g_o . getresults ( phase , self . g_o . Plate . X , 'node' ) plateY = self . g_o . getresults ( phase , self . g_o . Plate . Y , 'node' ) plateMat = self . g_o . getresults ( phase , self . g_o . Plate . MaterialID , 'node' ) plateEl = self . g_o . getresults ( phase , self . g_o . Plate . ElementID , 'node' ) plateUx = self . g_o . getresults ( phase , self . g_o . Plate . Ux , 'node' ) plateUy = self . g_o . getresults ( phase , self . g_o . Plate . Uy , 'node' ) plateUt = self . g_o . getresults ( phase , self . g_o . Plate . Utot , 'node' ) platePUx = self . g_o . getresults ( phase , self . g_o . Plate . PUx , 'node' ) platePUy = self . g_o . getresults ( phase , self . g_o . Plate . PUy , 'node' ) platePUt = self . g_o . getresults ( phase , self . g_o . Plate . PUtot , 'node' ) plateU1 = self . g_o . getresults ( phase , self . g_o . Plate . U1 , 'node' ) plateU2 = self . g_o . getresults ( phase , self . g_o . Plate . U2 , 'node' ) plateM2D = self . g_o . getresults ( phase , self . g_o . Plate . M2D , 'node' ) plateQ2D = self . g_o . getresults ( phase , self . g_o . Plate . Q2D , 'node' ) plateNx2D = self . g_o . getresults ( phase , self . g_o . Plate . Nx2D , 'node' ) plateNz2D = self . g_o . getresults ( phase , self . g_o . Plate . Nz2D , 'node' ) print ( '...read Plate results ' + phase . Identification . value ) for x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( plateX , plateY , plateMat , plateEl , plateUx , plateUy , plateUt , platePUx , platePUy , platePUt , plateU1 , plateU2 , plateM2D , plateQ2D , plateNx2D , plateNz2D ): # add filters in here if necessary pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) pX . append ( x ) pY . append ( y ) pMat . append ( mat ) pEl . append ( el ) pUx . append ( ux ) pUy . append ( uy ) pUt . append ( ut ) pPUx . append ( pux ) pPUy . append ( puy ) pPUt . append ( put ) pU1 . append ( u1 ) pU2 . append ( u2 ) pM2D . append ( m2d ) pQ2D . append ( q2d ) pNx2D . append ( nx2d ) pNz2D . append ( nz2d ) except Exception as e : print ( '...exception reading Plate results ' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate results ' + str ( e )) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ( columns ) file . writelines ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( pPhaseName , pPhaseIdent , pX , pY , pMat , pEl , pUx , pUy , pUt , pPUx , pPUy , pPUt , pU1 , pU2 , pM2D , pQ2D , pNx2D , pNz2D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( pPhaseName , pPhaseIdent , pX , pY , pMat , pEl , pUx , pUy , pUt , pPUx , pPUy , pPUt , pU1 , pU2 , pM2D , pQ2D , pNx2D , pNz2D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( m2d ) row . append ( q2d ) row . append ( nx2d ) row . append ( nz2d ) self . insertValues ( row ) print ( 'getPlateResults Done' ) def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): return self . getEmbeddedBeamRowResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) def getEmbeddedBeamRowResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamRowResults' # init data for lists ePhaseName = [] ePhaseIdent = [] eY = [] eX = [] eMat = [] eEl = [] eUx = [] eUy = [] eUt = [] ePUx = [] ePUy = [] ePUt = [] eU1 = [] eU2 = [] eM2D = [] eQ2D = [] eNx2D = [] eNz2D = [] eTskin = [] eTlat = [] for phase in self . phaseOrder : #echo ResultTypes.EmbeddedBeamRow print ( 'Getting EmbeddedBeamRow results ' + phase . Identification . value ) try : embeamX = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . X , 'node' ) embeamY = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Y , 'node' ) embeamMat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . MaterialID , 'node' ) embeamEl = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . ElementID , 'node' ) embeamUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Ux , 'node' ) embeamUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Uy , 'node' ) embeamUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Utot , 'node' ) embeamPUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUx , 'node' ) embeamPUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUy , 'node' ) embeamPUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUtot , 'node' ) embeamU1 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . U1 , 'node' ) embeamU2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . U2 , 'node' ) embeamM2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . M2D , 'node' ) embeamQ2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Q2D , 'node' ) embeamNx2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Nx2D , 'node' ) embeamNz2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Nz2D , 'node' ) embeamTskin = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Tskin , 'node' ) embeamTlat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Tlat , 'node' ) print ( '...read EmbeddedBeamRow results ' + phase . Identification . value ) for x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( embeamX , embeamY , embeamMat , embeamEl , embeamUx , embeamUy , embeamUt , embeamPUx , embeamPUy , embeamPUt , embeamU1 , embeamU2 , embeamM2D , embeamQ2D , embeamNx2D , embeamNz2D , embeamTskin , embeamTlat ): # add filters in here if necessary ePhaseName . append ( phase . Name . value ) ePhaseIdent . append ( phase . Identification . value ) eX . append ( x ) eY . append ( y ) eMat . append ( mat ) eEl . append ( el ) eUx . append ( ux ) eUy . append ( uy ) eUt . append ( ut ) ePUx . append ( pux ) ePUy . append ( puy ) ePUt . append ( put ) eU1 . append ( u1 ) eU2 . append ( u2 ) eM2D . append ( m2d ) eQ2D . append ( q2d ) eNx2D . append ( nx2d ) eNz2D . append ( nz2d ) eTskin . append ( tskin ) eTlat . append ( tlat ) except : print ( '...exception reading EmbeddedBeamRow ' + phase . Identification . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m),Tskin(kN/m),Tlat(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( ename , eident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat ) for ename , eident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( ePhaseName , ePhaseIdent , eX , eY , eMat , eEl , eUx , eUy , eUt , ePUx , ePUy , ePUt , eU1 , eU2 , eM2D , eQ2D , eNx2D , eNz2D , eTskin , eTlat )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for ename , eident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( ePhaseName , ePhaseIdent , eX , eY , eMat , eEl , eUx , eUy , eUt , ePUx , ePUy , ePUt , eU1 , eU2 , eM2D , eQ2D , eNx2D , eNz2D , eTskin , eTlat ): row = [] row . append ( ename ) row . append ( eident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( m2d ) row . append ( q2d ) row . append ( nx2d ) row . append ( nz2d ) row . append ( tskin ) row . append ( tlat ) self . insertValues ( row ) print ( 'getEmbeddedBeamRowResults Done' ) def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' # init data for lists aPhaseName = [] aPhaseIdent = [] aY = [] aX = [] aMat = [] aEl = [] aUx = [] aUy = [] aPUx = [] aPUy = [] aPUt = [] aUt = [] aU1 = [] aU2 = [] aForce2D = [] for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : anchorX = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . X , 'node' ) anchorY = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Y , 'node' ) anchorMat = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . MaterialID , 'node' ) anchorEl = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . ElementID , 'node' ) anchorUx = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Ux , 'node' ) anchorUy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Uy , 'node' ) anchorUt = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Utot , 'node' ) anchorPUx = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUx , 'node' ) anchorPUy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUy , 'node' ) anchorPUt = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUtot , 'node' ) anchorU1 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U1 , 'node' ) anchorU2 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U2 , 'node' ) anchorForce2D = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . AnchorForce2D , 'node' ) for x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2D in zip ( anchorX , anchorY , anchorMat , anchorEl , anchorUx , anchorUy , anchorUt , anchorPUx , anchorPUy , anchorPUt , anchorU1 , anchorU2 , anchorForce2D ): # add filters in here if necessary aPhaseName . append ( phase . Name . value ) aPhaseIdent . append ( phase . Identification . value ) aX . append ( x ) aY . append ( y ) aMat . append ( mat ) aEl . append ( el ) aUx . append ( ux ) aUy . append ( uy ) aUt . append ( ut ) aPUx . append ( pux ) aPUy . append ( puy ) aPUt . append ( put ) aU1 . append ( u1 ) aU2 . append ( u2 ) aForce2D . append ( f2D ) except : print ( 'Exception reading NodeToNodeAnchor in phase' + phase . Name . value , phase . Identification . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d in zip ( aPhaseName , aPhaseIdent , aX , aY , aMat , aEl , aUx , aUy , aUt , aPUx , aPUy , aPUt , aU1 , aU2 , aForce2D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d in zip ( aPhaseName , aPhaseIdent , aX , aY , aMat , aEl , aUx , aUy , aUt , aPUx , aPUy , aPUt , aU1 , aU2 , aForce2D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( f2d ) self . insertValues ( row ) print ( 'getNodeToNodeAnchorResults Done' ) def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' # init data for lists aPhaseName = [] aPhaseIdent = [] aY = [] aX = [] aMat = [] aEl = [] aUx = [] aUy = [] aPUx = [] aPUy = [] aPUt = [] aUt = [] aU1 = [] aU2 = [] aForce2D = [] for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : anchorX = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . X , 'node' ) anchorY = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Y , 'node' ) anchorMat = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . MaterialID , 'node' ) anchorEl = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . ElementID , 'node' ) anchorUx = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Ux , 'node' ) anchorUy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Uy , 'node' ) anchorUt = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Utot , 'node' ) anchorPUx = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUx , 'node' ) anchorPUy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUy , 'node' ) anchorPUt = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUtot , 'node' ) anchorU1 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U1 , 'node' ) anchorU2 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U2 , 'node' ) anchorForce2D = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . AnchorForce2D , 'node' ) print ( 'Retrieved FixedEndAnchor results for ' , phase . Name . value ) for x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2D in zip ( anchorX , anchorY , anchorMat , anchorEl , anchorUx , anchorUy , anchorUt , anchorPUx , anchorPUy , anchorPUt , anchorU1 , anchorU2 , anchorForce2D ): # add filters in here if necessary aPhaseName . append ( phase . Name . value ) aPhaseIdent . append ( phase . Identification . value ) aX . append ( x ) aY . append ( y ) aMat . append ( mat ) aEl . append ( el ) aUx . append ( ux ) aUy . append ( uy ) aUt . append ( ut ) aPUx . append ( pux ) aPUy . append ( puy ) aPUt . append ( put ) aU1 . append ( u1 ) aU2 . append ( u2 ) aForce2D . append ( f2D ) except : print ( 'Exception reading FixedEndAnchor in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d in zip ( aPhaseName , aPhaseIdent , aX , aY , aMat , aEl , aUx , aUy , aUt , aPUx , aPUy , aPUt , aU1 , aU2 , aForce2D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , f2d in zip ( aPhaseName , aPhaseIdent , aX , aY , aMat , aEl , aUx , aUy , aUt , aPUx , aPUy , aPUt , aU1 , aU2 , aForce2D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( f2d ) self . insertValues ( row ) print ( 'getFixedEndAnchorResults Done' ) def getInterfaceResults2016 ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' # init data for lists iPhaseName = [] iPhaseIdent = [] iY = [] iX = [] iMat = [] iUx = [] iUy = [] iUt = [] iPUx = [] iPUy = [] iPUt = [] iU1 = [] iU2 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : interX = self . g_o . getresults ( phase , self . g_o . Interface . X , 'node' ) interY = self . g_o . getresults ( phase , self . g_o . Interface . Y , 'node' ) interMat = self . g_o . getresults ( phase , self . g_o . Interface . MaterialID , 'node' ) interUx = self . g_o . getresults ( phase , self . g_o . Interface . Ux , 'node' ) interUy = self . g_o . getresults ( phase , self . g_o . Interface . Uy , 'node' ) interUt = self . g_o . getresults ( phase , self . g_o . Interface . Utot , 'node' ) interPUx = self . g_o . getresults ( phase , self . g_o . Interface . PUx , 'node' ) interPUy = self . g_o . getresults ( phase , self . g_o . Interface . PUy , 'node' ) interPUt = self . g_o . getresults ( phase , self . g_o . Interface . PUtot , 'node' ) interU1 = self . g_o . getresults ( phase , self . g_o . Interface . U1 , 'node' ) interU2 = self . g_o . getresults ( phase , self . g_o . Interface . U2 , 'node' ) interEffNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceEffectiveNormalStress , 'node' ) interTotNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceTotalNormalStress , 'node' ) interShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceShearStress , 'node' ) interRelShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceRelativeShearStress , 'node' ) interPExcess = self . g_o . getresults ( phase , self . g_o . Interface . PExcess , 'node' ) interPActive = self . g_o . getresults ( phase , self . g_o . Interface . PActive , 'node' ) interPSteady = self . g_o . getresults ( phase , self . g_o . Interface . PSteady , 'node' ) interPWater = self . g_o . getresults ( phase , self . g_o . Interface . PWater , 'node' ) interSuction = self . g_o . getresults ( phase , self . g_o . Interface . Suction , 'node' ) interEffSuction = self . g_o . getresults ( phase , self . g_o . Interface . EffSuction , 'node' ) for x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( interX , interY , interMat , interUx , interUy , interUt , interPUx , interPUy , interPUt , interU1 , interU2 , interEffNormalStress , interTotNormalStress , interShearStress , interRelShearStress , interPExcess , interPActive , interPSteady , interPWater , interSuction , interEffSuction ): # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iMat . append ( mat ) iUx . append ( ux ) iUy . append ( uy ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase' + phase . Name . value ) columns = \"Phase,PhaseIdent,X(m),Y(m),MaterialId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)\" formats = \" {} , {} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} \" if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iMat , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iMat , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResults2016 Done' ) def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' # init data for lists iPhaseName = [] iPhaseIdent = [] iY = [] iX = [] iMat = [] iEl = [] iUx = [] iUy = [] iUt = [] iPUx = [] iPUy = [] iPUt = [] iU1 = [] iU2 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : interX = self . g_o . getresults ( phase , self . g_o . Interface . X , 'node' ) interY = self . g_o . getresults ( phase , self . g_o . Interface . Y , 'node' ) interMat = self . g_o . getresults ( phase , self . g_o . Interface . MaterialID , 'node' ) interEl = self . g_o . getresults ( phase , self . g_o . Interface . ElementID , 'node' ) interUx = self . g_o . getresults ( phase , self . g_o . Interface . Ux , 'node' ) interUy = self . g_o . getresults ( phase , self . g_o . Interface . Uy , 'node' ) interUt = self . g_o . getresults ( phase , self . g_o . Interface . Utot , 'node' ) interPUx = self . g_o . getresults ( phase , self . g_o . Interface . PUx , 'node' ) interPUy = self . g_o . getresults ( phase , self . g_o . Interface . PUy , 'node' ) interPUt = self . g_o . getresults ( phase , self . g_o . Interface . PUtot , 'node' ) interU1 = self . g_o . getresults ( phase , self . g_o . Interface . U1 , 'node' ) interU2 = self . g_o . getresults ( phase , self . g_o . Interface . U2 , 'node' ) interEffNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceEffectiveNormalStress , 'node' ) interTotNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceTotalNormalStress , 'node' ) interShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceShearStress , 'node' ) interRelShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceRelativeShearStress , 'node' ) interPExcess = self . g_o . getresults ( phase , self . g_o . Interface . PExcess , 'node' ) interPActive = self . g_o . getresults ( phase , self . g_o . Interface . PActive , 'node' ) interPSteady = self . g_o . getresults ( phase , self . g_o . Interface . PSteady , 'node' ) interPWater = self . g_o . getresults ( phase , self . g_o . Interface . PWater , 'node' ) interSuction = self . g_o . getresults ( phase , self . g_o . Interface . Suction , 'node' ) interEffSuction = self . g_o . getresults ( phase , self . g_o . Interface . EffSuction , 'node' ) for x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( interX , interY , interMat , interEl , interUx , interUy , interUt , interPUx , interPUy , interPUt , interU1 , interU2 , interEffNormalStress , interTotNormalStress , interShearStress , interRelShearStress , interPExcess , interPActive , interPSteady , interPWater , interSuction , interEffSuction ): # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iMat . append ( mat ) iEl . append ( el ) iUx . append ( ux ) iUy . append ( uy ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase' + phase . Name . value ) columns = \"Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)\" formats = \" {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} \" if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iMat , iEl , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iMat , iEl , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResults Done' ) def getAllStructuralResults ( self , folderOut = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getPlateResults.csv' else : tableOut = 'getPlateResults' self . getPlateResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getEmbeddedBeamRowResults.csv' else : tableOut = 'getEmbeddedBeamRowResults' self . getEmbeddedBeamRowResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getNodeToNodeAnchorResults.csv' else : tableOut = 'getNodeToNodeAnchorResults' self . getNodeToNodeAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getFixedEndAnchorResults.csv' tableOut = None else : tableOut = 'getFixedEndAnchorResults' self . getFixedEndAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getInterfaceResults.csv' else : tableOut = 'getInterfaceResults' self . getInterfaceResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) def getAllStructuralResults2016 ( self , folderOut = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getPlateResults.csv' else : tableOut = 'getPlateResults' self . getPlateResults2016 ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getEmbeddedBeamRowResults.csv' else : tableOut = 'getEmbeddedBeamRowResults' self . getEmbeddedBeamRowResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getNodeToNodeAnchorResults.csv' else : tableOut = 'getNodeToNodeAnchorResults' self . getNodeToNodeAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getFixedEndAnchorResults.csv' tableOut = None else : tableOut = 'getFixedEndAnchorResults' self . getFixedEndAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getInterfaceResults.csv' else : tableOut = 'getInterfaceResults' self . getInterfaceResults2016 ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd )","title":"Plaxis2dResults"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.Plaxis2dResults2016","text":"Bases: Plaxis2dResults Source code in src\\ge_lib\\plaxis\\Plaxis2dResults2016.pyclass Plaxis2dResults2016 ( Plaxis2dResults ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResults2016 , self ) . __init__ ( server , host , port , password = password ) def version ( self ): return \"Plaxis2d2016\" def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' # init data for lists pPhaseName = [] pPhaseIdent = [] pY = [] pX = [] pMat = [] pUx = [] pUy = [] pUt = [] pPUx = [] pPUy = [] pPUt = [] pU1 = [] pU2 = [] pM2D = [] pQ2D = [] pNx2D = [] pNz2D = [] for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : plateX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) plateY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) plateMat = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialID , 'node' ) plateUx = self . g_o . getresults ( phase , self . g_o . Plate . Ux , 'node' ) plateUy = self . g_o . getresults ( phase , self . g_o . Plate . Uy , 'node' ) plateUt = self . g_o . getresults ( phase , self . g_o . Plate . Utot , 'node' ) platePUx = self . g_o . getresults ( phase , self . g_o . Plate . PUx , 'node' ) platePUy = self . g_o . getresults ( phase , self . g_o . Plate . PUy , 'node' ) platePUt = self . g_o . getresults ( phase , self . g_o . Plate . PUtot , 'node' ) plateU1 = self . g_o . getresults ( phase , self . g_o . Plate . U1 , 'node' ) plateU2 = self . g_o . getresults ( phase , self . g_o . Plate . U2 , 'node' ) plateM2D = self . g_o . getresults ( phase , self . g_o . Plate . M2D , 'node' ) plateQ2D = self . g_o . getresults ( phase , self . g_o . Plate . Q2D , 'node' ) plateNx2D = self . g_o . getresults ( phase , self . g_o . Plate . Nx2D , 'node' ) plateNz2D = self . g_o . getresults ( phase , self . g_o . Plate . Nz2D , 'node' ) print ( '...read Plate results ' + phase . Identification . value ) for x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( plateX , plateY , plateMat , plateUx , plateUy , plateUt , platePUx , platePUy , platePUt , plateU1 , plateU2 , plateM2D , plateQ2D , plateNx2D , plateNz2D ): # add filters in here if necessary pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) pX . append ( x ) pY . append ( y ) pMat . append ( mat ) pUx . append ( ux ) pUy . append ( uy ) pUt . append ( ut ) pPUx . append ( pux ) pPUy . append ( puy ) pPUt . append ( put ) pU1 . append ( u1 ) pU2 . append ( u2 ) pM2D . append ( m2d ) pQ2D . append ( q2d ) pNx2D . append ( nx2d ) pNz2D . append ( nz2d ) except : print ( '...exception reading Plate results ' + phase . Identification . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ( columns ) file . writelines ([ formats . format ( pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d ) for pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( pPhaseName , pPhaseIdent , pX , pY , pMat , pUx , pUy , pUt , pPUx , pPUy , pPUt , pU1 , pU2 , pM2D , pQ2D , pNx2D , pNz2D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d in zip ( pPhaseName , pPhaseIdent , pX , pY , pMat , pUx , pUy , pUt , pPUx , pPUy , pPUt , pU1 , pU2 , pM2D , pQ2D , pNx2D , pNz2D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( m2d ) row . append ( q2d ) row . append ( nx2d ) row . append ( nz2d ) self . insertValues ( row ) print ( 'getPlateResults Done' ) def getEmbeddedBeamRowResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamRowResults' # init data for lists ePhaseName = [] ePhaseIdent = [] eY = [] eX = [] eMat = [] eUx = [] eUy = [] eUt = [] ePUx = [] ePUy = [] ePUt = [] eU1 = [] eU2 = [] eM2D = [] eQ2D = [] eNx2D = [] eNz2D = [] eTskin = [] eTlat = [] for phase in self . phaseOrder : #echo ResultTypes.EmbeddedBeamRow print ( 'Getting EmbeddedBeamRow results ' + phase . Identification . value ) try : embeamX = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . X , 'node' ) embeamY = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Y , 'node' ) embeamMat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . MaterialID , 'node' ) embeamUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Ux , 'node' ) embeamUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Uy , 'node' ) embeamUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Utot , 'node' ) embeamPUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUx , 'node' ) embeamPUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUy , 'node' ) embeamPUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . PUtot , 'node' ) embeamU1 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . U1 , 'node' ) embeamU2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . U2 , 'node' ) embeamM2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . M2D , 'node' ) embeamQ2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Q2D , 'node' ) embeamNx2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Nx2D , 'node' ) embeamNz2D = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Nz2D , 'node' ) embeamTskin = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Tskin , 'node' ) embeamTlat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeamRow . Tlat , 'node' ) print ( '...read EmbeddedBeamRow results ' + phase . Identification . value ) for x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( embeamX , embeamY , embeamMat , embeamUx , embeamUy , embeamUt , embeamPUx , embeamPUy , embeamPUt , embeamU1 , embeamU2 , embeamM2D , embeamQ2D , embeamNx2D , embeamNz2D , embeamTskin , embeamTlat ): # add filters in here if necessary ePhaseName . append ( phase . Name . value ) ePhaseIdent . append ( phase . Identification . value ) eX . append ( x ) eY . append ( y ) eMat . append ( mat ) eUx . append ( ux ) eUy . append ( uy ) eUt . append ( ut ) ePUx . append ( pux ) ePUy . append ( puy ) ePUt . append ( put ) eU1 . append ( u1 ) eU2 . append ( u2 ) eM2D . append ( m2d ) eQ2D . append ( q2d ) eNx2D . append ( nx2d ) eNz2D . append ( nz2d ) eTskin . append ( tskin ) eTlat . append ( tlat ) except : print ( '...exception reading EmbeddedBeamRow ' + phase . Identification . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m),Tskin(kN/m),Tlat(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( ename , eident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat ) for ename , eident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( ePhaseName , ePhaseIdent , eX , eY , eMat , eUx , eUy , eUt , ePUx , ePUy , ePUt , eU1 , eU2 , eM2D , eQ2D , eNx2D , eNz2D , eTskin , eTlat )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for ename , eident , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( ePhaseName , ePhaseIdent , eX , eY , eMat , eUx , eUy , eUt , ePUx , ePUy , ePUt , eU1 , eU2 , eM2D , eQ2D , eNx2D , eNz2D , eTskin , eTlat ): row = [] row . append ( ename ) row . append ( eident ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( m2d ) row . append ( q2d ) row . append ( nx2d ) row . append ( nz2d ) row . append ( tskin ) row . append ( tlat ) self . insertValues ( row ) def getSoilResultsByRange ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , xMin = None , xMax = None , yMin = None , yMax = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) self . setRange ( xMin , xMax , yMin , yMax ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByRange' locY = [] locX = [] Uyy = [] Uxx = [] Utot = [] PUyy = [] PUxx = [] PUtot = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] PExcess = [] PActive = [] PSteady = [] PWater = [] Suct = [] EffSuct = [] pPhaseName = [] pPhaseIdent = [] # look into all phases, all steps for phase in self . phaseOrder : print ( 'Getting Soil results for Phase ' , phase . Name . value , phase . Identification . value ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) soilUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Ux , 'node' ) soilUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Uy , 'node' ) soilUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Utot , 'node' ) soilPUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUx , 'node' ) soilPUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUy , 'node' ) soilPUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUtot , 'node' ) soilEffSxx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigxxE , 'node' ) soilEffSyy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigyyE , 'node' ) soilEffSzz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigzzE , 'node' ) soilEffP1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective1 , 'node' ) soilEffP2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective2 , 'node' ) soilEffP3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective3 , 'node' ) soilPExcess = self . g_o . getresults ( phase , self . g_o . Soil . PExcess , 'node' ) soilPActive = self . g_o . getresults ( phase , self . g_o . Soil . PActive , 'node' ) soilPSteady = self . g_o . getresults ( phase , self . g_o . Soil . PSteady , 'node' ) soilPWater = self . g_o . getresults ( phase , self . g_o . Soil . PWater , 'node' ) soilSuction = self . g_o . getresults ( phase , self . g_o . Soil . Suction , 'node' ) soilEffSuction = self . g_o . getresults ( phase , self . g_o . Soil . EffSuction , 'node' ) for x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( soilX , soilY , soilUx , soilUy , soilUt , soilPUx , soilPUy , soilPUt , soilEffSxx , soilEffSyy , soilEffSzz , soilEffP1 , soilEffP2 , soilEffP3 , soilPExcess , soilPActive , soilPSteady , soilPWater , soilSuction , soilEffSuction ): if self . inRange ( x_val = x , y_val = y ) == True : print ( phase . Name . value , phase . Identification . value , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu ) pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) locX . append ( x ) locY . append ( y ) Uyy . append ( uy ) Uxx . append ( ux ) Utot . append ( ut ) PUyy . append ( puy ) PUxx . append ( pux ) PUtot . append ( put ) EffSxx . append ( esx ) EffSyy . append ( esy ) EffSzz . append ( esz ) EffP1 . append ( ep1 ) EffP2 . append ( ep2 ) EffP3 . append ( ep3 ) PExcess . append ( pe ) PActive . append ( pa ) PSteady . append ( ps ) PWater . append ( pw ) Suct . append ( su ) EffSuct . append ( esu ) columns = 'Phase,PhaseIdent,locX(m),locY(m),Ux(m),Uy(m),Utot(m), PUx(m), PUy(m), PUt(m), SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa),EffSuct(kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu ) for pname , pident , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( pPhaseName , pPhaseIdent , locX , locY , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct , EffSuct )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su , esu in zip ( pPhaseName , pPhaseIdent , locX , locY , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct , EffSuct ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( esx ) row . append ( esy ) row . append ( esz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pe ) row . append ( pa ) row . append ( ps ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getSoilResultsByRange Done' ) def getSoilResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints' locName = [] locY = [] locX = [] Uyy = [] Uxx = [] Utot = [] PUyy = [] PUxx = [] PUtot = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] PExcess = [] PActive = [] PSteady = [] PWater = [] Suct = [] EffSuct = [] pPhaseName = [] pPhaseIdent = [] fpoint = open ( filePoints , \"r\" ) while True : in_line = fpoint . readline () if in_line == \"\" : break print ( in_line ) [ name , nx , ny ] = in_line . split ( ',' ) self . NodeList . append ( self . PointXY ( name , nx , ny )) fpoint . close () for phase in self . phaseOrder : print ( 'Getting soil results ' + phase . Identification . value ) for pt in self . NodeList : try : ux = self . g_o . getsingleresult ( phase , self . g_o . Soil . Ux , ( pt . x , pt . y )) uy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uy , ( pt . x , pt . y )) ut = self . g_o . getsingleresult ( phase , self . g_o . Soil . Utot , ( pt . x , pt . y )) pux = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUx , ( pt . x , pt . y )) puy = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUy , ( pt . x , pt . y )) put = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUtot , ( pt . x , pt . y )) esx = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigxxE , ( pt . x , pt . y )) esy = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigyyE , ( pt . x , pt . y )) esz = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigzzE , ( pt . x , pt . y )) ep1 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective1 , ( pt . x , pt . y )) ep2 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective2 , ( pt . x , pt . y )) ep3 = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigmaEffective3 , ( pt . x , pt . y )) pe = self . g_o . getsingleresult ( phase , self . g_o . Soil . PExcess , ( pt . x , pt . y )) pa = self . g_o . getsingleresult ( phase , self . g_o . Soil . PActive , ( pt . x , pt . y )) ps = self . g_o . getsingleresult ( phase , self . g_o . Soil . PSteady , ( pt . x , pt . y )) pw = self . g_o . getsingleresult ( phase , self . g_o . Soil . PWater , ( pt . x , pt . y )) su = self . g_o . getsingleresult ( phase , self . g_o . Soil . Suction , ( pt . x , pt . y )) # print (pt.name, pt.x, pt.y, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) if ux != 'not found' : pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) locName . append ( pt . name ) locY . append ( pt . y ) locX . append ( pt . x ) Uyy . append ( uy ) Uxx . append ( ux ) Utot . append ( ut ) PUyy . append ( puy ) PUxx . append ( pux ) PUtot . append ( put ) EffSxx . append ( esx ) EffSyy . append ( esy ) EffSzz . append ( esz ) EffP1 . append ( ep1 ) EffP2 . append ( ep2 ) EffP3 . append ( ep3 ) PExcess . append ( pe ) PActive . append ( pa ) PSteady . append ( ps ) PWater . append ( pw ) Suct . append ( su ) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) print ( pt . name , pt . x , pt . y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su ) columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): try : print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , locname , float ( x ), float ( y ), float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( esx ), float ( esy ), float ( esz ), float ( ep1 ), float ( ep2 ), float ( ep3 ), float ( pe ), float ( pa ), float ( ps ), float ( pw ), float ( su )) for pname , pident , locname , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct )]) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) #~ print (pname, pident, locname, x, y, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) #~ print (pPhaseName, pPhaseIdent, locName, locX, locY, MaterialID, ElementID, Uxx, Uyy, Utot, PUxx, PUyy, PUtot, EffSxx, EffSyy, EffSzz, EffP1, EffP2, EffP3, PExcess, PActive, PSteady, PWater, Suct) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , locname , x , y , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct ): row = [] row . append ( pname ) row . append ( pident ) row . append ( locname ) row . append ( x ) row . append ( y ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( esx ) row . append ( esy ) row . append ( esz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pe ) row . append ( pa ) row . append ( ps ) row . append ( pw ) row . append ( su ) self . insertValues ( row ) print ( 'getSoilResultsByPoint Done' )","title":"Plaxis2dResults2016"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.Plaxis2dResults2019","text":"Bases: Plaxis2dResults Source code in src\\ge_lib\\plaxis\\Plaxis2dResults2019.pyclass Plaxis2dResults2019 ( Plaxis2dResults ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResults2019 , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis2d2019\" def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Nx2D(kN/m),Nz2D(kN/m),Q2D(kN/m),M2D(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U2 , 'node' ) M2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M2D , 'node' ) Q2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q2D , 'node' ) Nx2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx2D , 'node' ) Nz2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , nx2d , nz2d , q2d , m2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , nx2d , nz2d , q2d , m2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Nx2D , Nz2D , Q2D , M2D )] w . writeOutput () except Exception as e : print ( '...exception reading Plate results ' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getPlateResults Done' ) return Status . ELEMENT_PROCESSED def getPlateEnvelopeResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,ElementID,Ux_max(m),Ux_min(m),Uy_max(m),Uy_min(m),Utot_max(m),PUx_max(m),PUx_min(m),PUy_max(m),PUy_min(m),PUt_max(m),Nx2D_max(kN/m),Nx2D_min(kN/m),Nz2D_max(kN/m),Nz2D_min(kN/m),Q2D_max(kN/m),Q2D_min(kN/m),M2D_max(kNm/m),M2D_min(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMin , 'node' ) Ux_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMax , 'node' ) Uy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMin , 'node' ) Uy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMax , 'node' ) Ut_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UtotMax , 'node' ) PUx_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMin , 'node' ) PUx_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMax , 'node' ) PUy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMin , 'node' ) PUy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMax , 'node' ) PUt_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtotMax , 'node' ) M2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M_EnvelopeMax2D , 'node' ) M2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M_EnvelopeMin2D , 'node' ) Q2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q_EnvelopeMax2D , 'node' ) Q2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q_EnvelopeMin2D , 'node' ) Nx2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx_EnvelopeMax2D , 'node' ) Nx2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx_EnvelopeMin2D , 'node' ) Nz2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz_EnvelopeMax2D , 'node' ) Nz2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz_EnvelopeMin2D , 'node' ) print ( '...read Plate Envelope results ' + phase . Identification . value ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux_max , ux_min , uy_max , uy_min , ut_max , pux_max , pux_min , puy_max , puy_min , put_max , nx2d_max , nx2d_min , nz2d_max , nz2d_min , q2d_max , q2d_min , m2d_max , m2d_min ) for pname , pident , x , y , mat , el , ux_max , ux_min , uy_max , uy_min , ut_max , pux_max , pux_min , puy_max , puy_min , put_max , nx2d_max , nx2d_min , nz2d_max , nz2d_min , q2d_max , q2d_min , m2d_max , m2d_min in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux_max , Ux_min , Uy_max , Uy_min , Ut_max , PUx_max , PUx_min , PUy_max , PUy_min , PUt_max , Nx2D_max , Nx2D_min , Nz2D_max , Nz2D_min , Q2D_max , Q2D_min , M2D_max , M2D_min )] w . writeOutput () except Exception as e : print ( '...exception reading Plate Envelope results ' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate Envelope results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getPlateEmvelopeResults Done' ) return Status . ELEMENT_PROCESSED def getEmbeddedBeamRowResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamRowResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m),Tskin(kN/m),Tlat(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Embeddedbeam results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . U2 , 'node' ) M2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . M2D , 'node' ) Q2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Q2D , 'node' ) Nx2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Nx2D , 'node' ) Nz2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Nz2D , 'node' ) Tskin = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Tskin , 'node' ) Tlat = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeamRow . Tlat , 'node' ) print ( 'Retrieved EmbeddedBeam results ' + phase . Identification . value ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , M2D , Q2D , Nx2D , Nz2D , Tskin , Tlat )] w . writeOutput () except Exception as e : print ( 'Exception reading EnbeddedBeamRow results in phase' + phase . Name . value ) self . logger . error ( '...exception reading EmbeddedBeamRow results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getEmbeddedBeamRowResults Done' ) return Status . ELEMENT_PROCESSED def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U2 , 'node' ) Force2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . AnchorForce2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Force2D )] w . writeOutput () except Exception as e : print ( 'Exception reading NodeToNodeAnchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading NodeToNodeAnchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getNodeToNodeAnchorResults Done' ) return Status . ELEMENT_PROCESSED def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U2 , 'node' ) Force2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . AnchorForce2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Force2D )] w . writeOutput () except Exception as e : print ( 'Exception reading NodeToNodeAnchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading NodeToNodeAnchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getFixedEndAnchorResults Done' ) return Status . ELEMENT_PROCESSED def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' columns = \"Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)\" formats = \" {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} \" w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U2 , 'node' ) EffNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , 'node' ) TotNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , 'node' ) ShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , 'node' ) RelShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , 'node' ) PExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PExcess , 'node' ) PActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PActive , 'node' ) PSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PSteady , 'node' ) PWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PWater , 'node' ) Suction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Suction , 'node' ) EffSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . EffSuction , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , EffNormalStress , TotNormalStress , ShearStress , RelShearStress , PExcess , PActive , PSteady , PWater , Suction , EffSuction )] w . writeOutput () except Exception as e : print ( 'Exception reading Interface results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Interface results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getInterfaceResults Done' ) return Status . ELEMENT_PROCESSED def getSoilResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints' locName = [] locY = [] locX = [] MaterialID = [] ElementID = [] Uyy = [] Uxx = [] Utot = [] PUyy = [] PUxx = [] PUtot = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] PExcess = [] PActive = [] PSteady = [] PWater = [] Suct = [] pPhaseName = [] pPhaseIdent = [] if filePoints : fpoint = open ( filePoints , \"r\" ) while True : in_line = fpoint . readline () if in_line == \"\" : break print ( in_line ) [ name , nx , ny ] = in_line . split ( ',' ) self . NodeList . append ( self . PointXY ( name , nx , ny )) fpoint . close () for phase in self . phaseOrder : print ( 'Getting soil results ' + phase . Identification . value ) for pt in self . NodeList : try : mat = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . MaterialID , ( pt . x , pt . y )) el = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . ElementID , ( pt . x , pt . y )) ux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Ux , ( pt . x , pt . y )) uy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uy , ( pt . x , pt . y )) ut = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Utot , ( pt . x , pt . y )) pux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUx , ( pt . x , pt . y )) puy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUy , ( pt . x , pt . y )) put = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUtot , ( pt . x , pt . y )) esx = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigxxE , ( pt . x , pt . y )) esy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigyyE , ( pt . x , pt . y )) esz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigzzE , ( pt . x , pt . y )) ep1 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective1 , ( pt . x , pt . y )) ep2 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective2 , ( pt . x , pt . y )) ep3 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective3 , ( pt . x , pt . y )) pe = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PExcess , ( pt . x , pt . y )) pa = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PActive , ( pt . x , pt . y )) ps = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PSteady , ( pt . x , pt . y )) pw = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PWater , ( pt . x , pt . y )) su = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Suction , ( pt . x , pt . y )) # print (pt.name, pt.x, pt.y, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) if ux != 'not found' : pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) locName . append ( pt . name ) locY . append ( pt . y ) locX . append ( pt . x ) MaterialID . append ( int ( float ( mat ) + .1 )) ElementID . append ( int ( float ( el ) + .1 )) Uyy . append ( uy ) Uxx . append ( ux ) Utot . append ( ut ) PUyy . append ( puy ) PUxx . append ( pux ) PUtot . append ( put ) EffSxx . append ( esx ) EffSyy . append ( esy ) EffSzz . append ( esz ) EffP1 . append ( ep1 ) EffP2 . append ( ep2 ) EffP3 . append ( ep3 ) PExcess . append ( pe ) PActive . append ( pa ) PSteady . append ( ps ) PWater . append ( pw ) Suct . append ( su ) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) print ( pt . name , pt . x , pt . y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su ) columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to string....' ) rows = '' . join ([ formats . format ( pname , pident , locname , float ( x ), float ( y ), mat , el , float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( esx ), float ( esy ), float ( esz ), float ( ep1 ), float ( ep2 ), float ( ep3 ), float ( pe ), float ( pa ), float ( ps ), float ( pw ), float ( su )) for pname , pident , locname , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct )]) return columns + rows if ( fileOut != None and tableOut == None ): try : print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , locname , float ( x ), float ( y ), mat , el , float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( esx ), float ( esy ), float ( esz ), float ( ep1 ), float ( ep2 ), float ( ep3 ), float ( pe ), float ( pa ), float ( ps ), float ( pw ), float ( su )) for pname , pident , locname , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct )]) except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) #~ print (pname, pident, locname, x, y, mat, el, ux, uy, ut, pux, puy, put, esx, esy, esz, ep1, ep2, ep3, pe, pa, ps, pw, su) #~ print (pPhaseName, pPhaseIdent, locName, locX, locY, MaterialID, ElementID, Uxx, Uyy, Utot, PUxx, PUyy, PUtot, EffSxx, EffSyy, EffSzz, EffP1, EffP2, EffP3, PExcess, PActive, PSteady, PWater, Suct) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , locname , x , y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su in zip ( pPhaseName , pPhaseIdent , locName , locX , locY , MaterialID , ElementID , Uxx , Uyy , Utot , PUxx , PUyy , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , PExcess , PActive , PSteady , PWater , Suct ): row = [] row . append ( pname ) row . append ( pident ) row . append ( locname ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( esx ) row . append ( esy ) row . append ( esz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pe ) row . append ( pa ) row . append ( ps ) row . append ( pw ) row . append ( su ) self . insertValues ( row ) print ( 'getSoilResultsByPoint Done' )","title":"Plaxis2dResults2019"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.Plaxis2dResults2023","text":"Bases: Plaxis2dResults2019 Source code in src\\ge_lib\\plaxis\\Plaxis2dResults2023.pyclass Plaxis2dResults2023 ( Plaxis2dResults2019 ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResults2019 , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis2d2023\" def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Nx2D(kN/m),Nz2D(kN/m),Q2D(kN/m),M2D(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U2 , 'node' ) M2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M2D , 'node' ) Q2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q2D , 'node' ) Nx2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx2D , 'node' ) Nz2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , nx2d , nz2d , q2d , m2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , nx2d , nz2d , q2d , m2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Nx2D , Nz2D , Q2D , M2D )] w . writeOutput () except Exception as e : print ( '...exception reading Plate results ' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getPlateResults Done' ) return Status . ELEMENT_PROCESSED def getPlateEnvelopeResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialID,ElementID,Ux_max(m),Ux_min(m),Uy_max(m),Uy_min(m),Utot_max(m),PUx_max(m),PUx_min(m),PUy_max(m),PUy_min(m),PUt_max(m),Nx2D_max(kN/m),Nx2D_min(kN/m),Nz2D_max(kN/m),Nz2D_min(kN/m),Q2D_max(kN/m),Q2D_min(kN/m),M2D_max(kNm/m),M2D_min(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Plate results ' + phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMin , 'node' ) Ux_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMax , 'node' ) Uy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMin , 'node' ) Uy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMax , 'node' ) Ut_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UtotMax , 'node' ) PUx_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMin , 'node' ) PUx_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMax , 'node' ) PUy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMin , 'node' ) PUy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMax , 'node' ) PUt_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtotMax , 'node' ) M2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M_EnvelopeMax2D , 'node' ) M2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M_EnvelopeMin2D , 'node' ) Q2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q_EnvelopeMax2D , 'node' ) Q2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q_EnvelopeMin2D , 'node' ) Nx2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx_EnvelopeMax2D , 'node' ) Nx2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nx_EnvelopeMin2D , 'node' ) Nz2D_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz_EnvelopeMax2D , 'node' ) Nz2D_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Nz_EnvelopeMin2D , 'node' ) print ( '...read Plate Envelope results ' + phase . Identification . value ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux_max , ux_min , uy_max , uy_min , ut_max , pux_max , pux_min , puy_max , puy_min , put_max , nx2d_max , nx2d_min , nz2d_max , nz2d_min , q2d_max , q2d_min , m2d_max , m2d_min ) for pname , pident , x , y , mat , el , ux_max , ux_min , uy_max , uy_min , ut_max , pux_max , pux_min , puy_max , puy_min , put_max , nx2d_max , nx2d_min , nz2d_max , nz2d_min , q2d_max , q2d_min , m2d_max , m2d_min in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux_max , Ux_min , Uy_max , Uy_min , Ut_max , PUx_max , PUx_min , PUy_max , PUy_min , PUt_max , Nx2D_max , Nx2D_min , Nz2D_max , Nz2D_min , Q2D_max , Q2D_min , M2D_max , M2D_min )] w . writeOutput () except Exception as e : print ( '...exception reading Plate Envelope results ' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate Envelope results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getPlateEmvelopeResults Done' ) return Status . ELEMENT_PROCESSED def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m),Tskin(kN/m),Tlat(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Embeddedbeam results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U2 , 'node' ) M2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M2D , 'node' ) Q2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q2D , 'node' ) Nx2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Nx2D , 'node' ) Nz2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Nz2D , 'node' ) Tskin = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tskin , 'node' ) Tlat = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat , 'node' ) print ( 'Retrieved EmbeddedBeam results ' + phase . Identification . value ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , M2D , Q2D , Nx2D , Nz2D , Tskin , Tlat )] w . writeOutput () except Exception as e : print ( 'Exception reading EnbeddedBeam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading EmbeddedBeam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getEmbeddedBeamResults Done' ) return Status . ELEMENT_PROCESSED def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' columns = \"Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)\" formats = \" {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} \" w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U2 , 'node' ) EffNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , 'node' ) TotNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , 'node' ) ShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , 'node' ) RelShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , 'node' ) PExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PExcess , 'node' ) PActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PActive , 'node' ) PSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PSteady , 'node' ) PWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PWater , 'node' ) Suction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Suction , 'node' ) EffSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . EffSuction , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , EffNormalStress , TotNormalStress , ShearStress , RelShearStress , PExcess , PActive , PSteady , PWater , Suction , EffSuction )] w . writeOutput () except Exception as e : print ( 'Exception reading Interface results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Interface results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getInterfaceResults Done' ) return Status . ELEMENT_PROCESSED def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U2 , 'node' ) Force2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . AnchorForce2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Force2D )] w . writeOutput () except Exception as e : print ( 'Exception reading NodeToNodeAnchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading NodeToNodeAnchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getNodeToNodeAnchorResults Done' ) return Status . ELEMENT_PROCESSED def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),U1(m),U2(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U2 , 'node' ) Force2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . AnchorForce2D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , force2d in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , Force2D )] w . writeOutput () except Exception as e : print ( 'Exception reading NodeToNodeAnchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading NodeToNodeAnchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getFixedEndAnchorResults Done' ) return Status . ELEMENT_PROCESSED","title":"Plaxis2dResults2023"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.Plaxis2dResultsConnectV2","text":"Bases: Plaxis2dResults2019 Source code in src\\ge_lib\\plaxis\\Plaxis2dResultsConnectV2.pyclass Plaxis2dResultsConnectV2 ( Plaxis2dResults2019 ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResultsConnectV2 , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis2dConnectV2\" def getInterfaceResultsByPointsByStep ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , stepList = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if not filePoints is None : self . loadXYNodeList ( filePoints ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResultsByPointsStep' print ( 'FileOut=' , fileOut ) # initialize data for lists iPhaseName = [] iPhaseIdent = [] iLocName = [] iY = [] iX = [] iMat = [] iUx = [] iUy = [] iUt = [] iPUx = [] iPUy = [] iPUt = [] iU1 = [] iU2 = [] iVx = [] iVy = [] iVt = [] iAx = [] iAy = [] iAt = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( \"Getting Interface results for Phase: {} \" . format ( phase . Name . value )) for step in phase : if stepList is None or step . Name . value in stepList : print ( \"Getting Interface results for Step: {} \" . format ( step . Name . value )) for pt in self . NodeList : print ( \"Getting Interface results for Node: {} \" . format ( pt . name )) try : x = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . X , ( pt . x , pt . y )) y = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Y , ( pt . x , pt . y )) mat = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . MaterialID , ( pt . x , pt . y )) ux = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Ux , ( pt . x , pt . y )) uy = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Uy , ( pt . x , pt . y )) ut = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Utot , ( pt . x , pt . y )) pux = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PUx , ( pt . x , pt . y )) puy = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PUy , ( pt . x , pt . y )) put = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PUtot , ( pt . x , pt . y )) u1 = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . U1 , ( pt . x , pt . y )) u2 = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . U2 , ( pt . x , pt . y )) vx = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Vx , ( pt . x , pt . y )) vy = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Vy , ( pt . x , pt . y )) vt = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Vtot , ( pt . x , pt . y )) ax = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Ax , ( pt . x , pt . y )) ay = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Ay , ( pt . x , pt . y )) at = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Atot , ( pt . x , pt . y )) ens = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , ( pt . x , pt . y )) tns = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , ( pt . x , pt . y )) ss = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . InterfaceShearStress , ( pt . x , pt . y )) rss = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , ( pt . x , pt . y )) pe = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PExcess , ( pt . x , pt . y )) pa = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PActive , ( pt . x , pt . y )) pst = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PSteady , ( pt . x , pt . y )) pw = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . PWater , ( pt . x , pt . y )) su = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . Suction , ( pt . x , pt . y )) esu = self . g_o . getsingleresult ( step , self . g_o . ResultTypes . Interface . EffSuction , ( pt . x , pt . y )) if ux == 'not found' : print ( \"results for {} {} ( {} {} ) not found\" . format ( step . Name . value , pt . name , pt . x , pt . y )) if ux != 'not found' : print ( \"results for {} {} ( {} {} ) retrieved\" . format ( step . Name . value , pt . name , pt . x , pt . y )) # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iMat . append ( mat ) iLocName . append ( pt . name ) iUx . append ( ux ) iUy . append ( uy ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iVx . append ( vx ) iVy . append ( vy ) iVt . append ( vt ) iAx . append ( ax ) iAy . append ( ay ) iAt . append ( at ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase:' + phase . Name . value + ' step:' + step . Name . value ) break columns = 'Phase,PhaseIdent,LocName,X(m),Y(m),MaterialID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),Vx(m/s),Vy(m/s),Vt(m/s),Ax(m/s2),Ay(m/s2),At(m/s2),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to string....' ) rows = '' . join ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( mat ), float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( u1 ), float ( u2 ), float ( vx ), float ( vy ), float ( vt ), float ( ax ), float ( ay ), float ( at ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , vx , vy , vt , ax , ay , at , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iMat , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iVx , iVy , iVt , iAx , iAy , iAt , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' #~ print(iLocName) #~ print(iPhaseName) #~ print(iPhaseIdent) #~ print(iX) #~ print(iY) #~ print(iZ) #~ print(iMat) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( mat ), float ( ux ), float ( uy ), float ( ut ), float ( pux ), float ( puy ), float ( put ), float ( u1 ), float ( u2 ), float ( vx ), float ( vy ), float ( vt ), float ( ax ), float ( ay ), float ( at ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , vx , vy , vt , ax , ay , at , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iMat , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iVx , iVy , iVt , iAx , iAy , iAt , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , loc , x , y , mat , ux , uy , ut , pux , puy , put , u1 , u2 , vx , vy , vt , ax , ay , at , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iMat , iUx , iUy , iUt , iPUx , iPUy , iPUt , iU1 , iU2 , iVx , iVy , iVt , iAx , iAy , iAt , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( loc ) row . append ( x ) row . append ( y ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( vx ) row . append ( vy ) row . append ( vt ) row . append ( ax ) row . append ( ay ) row . append ( at ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResultsByPointsByStep Done' ) def getSoilResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): NotFound = [ 'not found' , 'nan' , 'Nan' ] self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 print ( 'FileOut=' , fileOut ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints' if filePoints : fpoint = open ( filePoints , \"r\" ) while True : in_line = fpoint . readline () if in_line == \"\" : break print ( in_line ) try : [ name , nx , ny ] = in_line . split ( ',' ) self . NodeList . append ( self . PointXY ( name , nx , ny )) except Exception as e : print ( str ( e )) return fpoint . close () columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),MaterialID,ElementID,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUtot(m),SigxxEff(kPa),SigyyEff(kPa),SigzzEff(kPa),SigP1Eff(kPa),SigyP2Eff(kPa),SigP3Eff(kPa),PExcess(kPa),PActive(kPa),PSteady(kPa),Pwater(kPa),Suct(kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting soil results ' + phase . Identification . value ) for pt in self . NodeList : try : mat = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . MaterialID , ( pt . x , pt . y )) el = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . ElementID , ( pt . x , pt . y )) ux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Ux , ( pt . x , pt . y )) uy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uy , ( pt . x , pt . y )) ut = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Utot , ( pt . x , pt . y )) pux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUx , ( pt . x , pt . y )) puy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUy , ( pt . x , pt . y )) put = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUtot , ( pt . x , pt . y )) esx = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigxxE , ( pt . x , pt . y )) esy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigyyE , ( pt . x , pt . y )) esz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigzzE , ( pt . x , pt . y )) ep1 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective1 , ( pt . x , pt . y )) ep2 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective2 , ( pt . x , pt . y )) ep3 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . SigmaEffective3 , ( pt . x , pt . y )) pe = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PExcess , ( pt . x , pt . y )) pa = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PActive , ( pt . x , pt . y )) ps = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PSteady , ( pt . x , pt . y )) pw = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PWater , ( pt . x , pt . y )) su = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Suction , ( pt . x , pt . y )) w . rowsOut = [ formats . format ( phase . Name . value , phase . Identification . value , pt . name , pt . x , pt . y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su )] w . writeOutput () except : print ( '...exception soil results ' + phase . Identification . value , pt . x , pt . y ) print ( phase . Name . value , phase . Identification . value , pt . name , pt . x , pt . y , mat , el , ux , uy , ut , pux , puy , put , esx , esy , esz , ep1 , ep2 , ep3 , pe , pa , ps , pw , su ) print ( 'getSoilResultsByPoint Done' )","title":"Plaxis2dResultsConnectV2"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.Plaxis2dResultsConnectV22","text":"Bases: Plaxis2dResultsConnectV2 Source code in src\\ge_lib\\plaxis\\Plaxis2dResultsConnectV22.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 class Plaxis2dResultsConnectV22 ( Plaxis2dResultsConnectV2 ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis2dResultsConnectV22 , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis2dConnectV22\" def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' columns = 'Phase,PhaseIdent,X(m),Y(m),MaterialId,ElementId,Ux(m),Uy(m),Utot(m),PUx(m),PUy(m),PUt(m),U1(m),U2(m),M2D(kNm/m),Q2D(kN/m),Nx2D(kN/m),Nz2D(kN/m),Tskin(kN/m),Tlat(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Embeddedbeam results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Y , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uy , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUy , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U2 , 'node' ) M2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M2D , 'node' ) Q2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q2D , 'node' ) Nx2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Nx2D , 'node' ) Nz2D = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Nz2D , 'node' ) Tskin = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tskin , 'node' ) Tlat = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat , 'node' ) print ( 'Retrieved EmbeddedBeam results ' + phase . Identification . value ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat ) for pname , pident , x , y , mat , el , ux , uy , ut , pux , puy , put , u1 , u2 , m2d , q2d , nx2d , nz2d , tskin , tlat in zip ( phaseName , phaseIdent , X , Y , Material , Element , Ux , Uy , Ut , PUx , PUy , PUt , U1 , U2 , M2D , Q2D , Nx2D , Nz2D , Tskin , Tlat )] w . writeOutput () except Exception as e : print ( 'Exception reading EnbeddedBeam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading EmbeddedBeam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'getEmbeddedBeamResults Done' ) return Status . ELEMENT_PROCESSED","title":"Plaxis2dResultsConnectV22"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.Plaxis3dResults","text":"Bases: PlaxisScripting Source code in src\\ge_lib\\plaxis\\Plaxis3dResults.pyclass Plaxis3dResults ( PlaxisScripting ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis3dResults , self ) . __init__ ( server , host , port , password ) if ( self . s_o . is_3d == False ): raise ValueError ( 'This is a Plaxis3d output reader, but the output plaxis server is not Plaxis3d' ); def version ( self ): return \"Plaxis3d\" def getPhaseDetails ( self ): results = [] allpassed = True print ( 'getting output phase details' ) for phase in self . g_o . Phases [:]: results . append ( \" {} , {} , {} \\n \" . format ( phase . Name , phase . Identification , phase . Number )) return allpassed , results def getSoilResultsByRange ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , xMin = 0.0 , xMax = 0.0 , yMin = 0.0 , yMax = 0.0 , zMin = 0.0 , zMax = 0.0 , Output = \"stress, displacement,pwp\" ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByRange' PhaseName = [] PhaseIdent = [] locY = [] locX = [] locZ = [] Uyy = [] Uxx = [] Uzz = [] Utot = [] PUyy = [] PUxx = [] PUzz = [] PUtot = [] EffSxx = [] EffSyy = [] EffSzz = [] EffP1 = [] EffP2 = [] EffP3 = [] pExcess = [] pActive = [] pSteady = [] pWater = [] phasenames = [] # look into all phases, all steps for phase in self . phaseOrder : print ( 'Getting soil results for Phase ' , phase . Name . value ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) soilZ = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Z , 'node' ) print ( 'Coordinates retrieved for Phase ' , phase . Name . value ) if \"displacement\" in Output : soilUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Ux , 'node' ) soilUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Uy , 'node' ) soilUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Uz , 'node' ) soilUtot = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Utot , 'node' ) soilPUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUx , 'node' ) soilPUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUy , 'node' ) soilPUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUz , 'node' ) soilPUtot = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PUtot , 'node' ) print ( 'Displacments retrieved for Phase ' , phase . Name . value ) if \"stress\" in Output : soilEffSxx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigxxE , 'node' ) soilEffSyy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigyyE , 'node' ) soilEffSzz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigzzE , 'node' ) soilEffP1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective1 , 'node' ) soilEffP2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective2 , 'node' ) soilEffP3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . SigmaEffective3 , 'node' ) print ( 'Stresses retrieved for Phase ' , phase . Name . value ) if \"pwp\" in Output : soilPExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PExcess , 'node' ) soilPActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PActive , 'node' ) soilPSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PSteady , 'node' ) soilPWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . PWater , 'node' ) print ( 'PWP retrieved for Phase ' , phase . Name . value ) print ( 'Preparing to cycle through results for nodes within range...x(' , xMin , xMax , ') y(' , yMin , yMax , ') z (' , zMin , zMax , ')' ) if \"displacement\" in Output and \"stress\" in Output and \"pwp\" in Output : for x , y , z , ux , uy , uz , utot , pux , puy , puz , putot , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw in zip ( soilX , soilY , soilZ , soilUx , soilUy , soilUz , soilUtot , soilPUx , soilPUy , soilPUz , soilPUtot , soilEffSxx , soilEffSyy , soilEffSzz , soilEffP1 , soilEffP2 , soilEffP3 , soilPExcess , soilPActive , soilPSteady , soilPWater ): if xMin < x < xMax : if yMin < y < yMax : if zMin < z < zMax : print ( 'Adding Results for' , x , y , z ) PhaseName . append ( phase . Name . value ) PhaseIdent . append ( phase . Identification . value ) locX . append ( x ) locY . append ( y ) locZ . append ( z ) Uxx . append ( ux ) Uyy . append ( uy ) Uzz . append ( uz ) Utot . append ( utot ) PUxx . append ( pux ) PUyy . append ( puy ) PUzz . append ( puz ) PUtot . append ( putot ) EffSxx . append ( esxx ) EffSyy . append ( esyy ) EffSzz . append ( eszz ) EffP1 . append ( esxx ) EffP2 . append ( esyy ) EffP3 . append ( eszz ) pExcess . append ( pex ) pActive . append ( pact ) pSteady . append ( pst ) pWater . append ( pw ) columns = 'Phase, PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),SigxxE(kPa),SigyyE(kPa),SigzzE(kPa),SigEff1(kPa),SigEff2(kPa),SigEff3(kPa),pExcess(kPa),pActive(kPa),pSteady(kPa),pWater(kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , put , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw ) for pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , put , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw in zip ( PhaseName , PhaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , pExcess , pActive , pSteady , pWater )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , put , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw ) for pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , put , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw in zip ( PhaseName , PhaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , pExcess , pActive , pSteady , pWater )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , put , esxx , esyy , eszz , ep1 , ep2 , ep3 , pex , pact , pst , pw in zip ( PhaseName , PhaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot , EffSxx , EffSyy , EffSzz , EffP1 , EffP2 , EffP3 , pExcess , pActive , pSteady , pWater ): row = [] row . append ( pName ) row . append ( pIdent ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( utot ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( esxx ) row . append ( esyy ) row . append ( eszz ) row . append ( ep1 ) row . append ( ep2 ) row . append ( ep3 ) row . append ( pex ) row . append ( pact ) row . append ( pst ) row . append ( pw ) self . insertValues ( row ) if \"displacement\" in Output and not \"stress\" in Output and not \"pwp\" in Output : for x , y , z , ux , uy , uz , utot , pux , puy , puz , dutot in zip ( soilX , soilY , soilZ , soilUx , soilUy , soilUz , soilUtot , soilPUx , soilPUy , soilPUz , soilPUtot ): print ( x , y , z ) if xMin < x < xMax : if yMin < y < yMax : if zMin < z < zMax : print ( 'Adding Results for' , x , y , z ) PhaseName . append ( phase . Name . value ) PhaseIdent . append ( phase . Identification . value ) locX . append ( x ) locY . append ( y ) locZ . append ( z ) Uxx . append ( ux ) Uyy . append ( uy ) Uzz . append ( uz ) Utot . append ( utot ) PUxx . append ( pux ) PUyy . append ( puy ) PUzz . append ( puz ) PUtot . append ( putot ) columns = 'Phase, PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , putot ) for x , y , z , ux , uy , uz , utot , pux , puy , puz , dutot in zip ( PhaseName , PhaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for x , y , z , ux , uy , uz , utot , pux , puy , puz , dutot in zip ( PhaseName , PhaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot ): row = [] row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( utot ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( dutot ) self . insertValues ( row ) def getSoilResultsByPoints ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , Output = \"stress, displacement,pwp\" , xMin = 0.0 , xMax = 0.0 , yMin = 0.0 , yMax = 0.0 , zMin = 0.0 , zMax = 0.0 , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByRange2' phaseName = [] phaseIdent = [] locY = [] locX = [] locZ = [] Uyy = [] Uxx = [] Uzz = [] Utot = [] PUyy = [] PUxx = [] PUzz = [] PUtot = [] self . setNodeList ( xMin , xMax , yMin , yMax , zMin , zMax ) for phase in self . phaseOrder : print ( 'retrieving results for ' , phase . Name . value ) for pt in self . NodeList : ux = self . g_o . getsingleresult ( phase , self . g_o . Soil . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uz , ( pt . x , pt . y , pt . z )) utot = self . g_o . getsingleresult ( phase , self . g_o . Soil . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUz , ( pt . x , pt . y , pt . z )) putot = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUtot , ( pt . x , pt . y , pt . z )) # sxx = self.g_o.getsingleresult(phase, self.g_o.Soil.SigxxE, (pt.x, pt.y, pt.z)) # syy = self.g_o.getsingleresult(phase, self.g_o.Soil.SigyyE, (pt.x, pt.y, pt.z)) # szz = self.g_o.getsingleresult(phase, self.g_o.Soil.SigzzE, (pt.x, pt.y, pt.z)) # xpwp = self.g_o.getsingleresult(phase, self.g_o.Soil.PExcess, (pt.x, pt.y, pt.z)) print ( 'results for ' , phase . Name . value , pt . x , pt . y , pt . z , ' retrieved' ) phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) locX . append ( pt . x ) locY . append ( pt . y ) locZ . append ( pt . z ) Uxx . append ( ux ) Uyy . append ( uy ) Uzz . append ( uz ) Utot . append ( utot ) PUxx . append ( pux ) PUyy . append ( puy ) PUzz . append ( puy ) PUtot . append ( putot ) columns = 'Phase, PhaseIdent,X(m),Y(m),Z(m),MaterialId,ElementId,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , putot ) for pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , dutot in zip ( phaseName , phaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pName , pIdent , x , y , z , ux , uy , uz , utot , pux , puy , puz , dutot in zip ( phaseName , phaseIdent , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot ): row = [] row . append ( pName ) row . append ( pIdent ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( utot ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( dutot ) self . insertValues ( row ) def getSoilResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . getSoilResultsByPoints_Displacements ( filePoints = filePoints , fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd , ) def getSoilResultsByPoints_Displacements ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if not filePoints is None : self . loadXYZNodeList ( filePoints ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints_Displacements' phaseName = [] phaseIdent = [] locName = [] locY = [] locX = [] locZ = [] Uyy = [] Uxx = [] Uzz = [] Utot = [] PUyy = [] PUxx = [] PUzz = [] PUtot = [] Epsyy = [] Epsxx = [] Epszz = [] for phase in self . phaseOrder : print ( phase . Name . value ) for pt in self . NodeList : ux = self . g_o . getsingleresult ( phase , self . g_o . Soil . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uz , ( pt . x , pt . y , pt . z )) utot = self . g_o . getsingleresult ( phase , self . g_o . Soil . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUz , ( pt . x , pt . y , pt . z )) putot = self . g_o . getsingleresult ( phase , self . g_o . Soil . PUtot , ( pt . x , pt . y , pt . z )) ex = self . g_o . getsingleresult ( phase , self . g_o . Soil . Epsxx , ( pt . x , pt . y , pt . z )) ey = self . g_o . getsingleresult ( phase , self . g_o . Soil . Epsyy , ( pt . x , pt . y , pt . z )) ez = self . g_o . getsingleresult ( phase , self . g_o . Soil . Epszz , ( pt . x , pt . y , pt . z )) if ux != 'not found' : print ( 'results for ' , phase . Name . value , pt . x , pt . y , pt . z , ' retrieved' ) phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) locName . append ( pt . name ) locX . append ( pt . x ) locY . append ( pt . y ) locZ . append ( pt . z ) Uxx . append ( ux ) Uyy . append ( uy ) Uzz . append ( uz ) Utot . append ( utot ) PUxx . append ( pux ) PUyy . append ( puy ) PUzz . append ( puz ) PUtot . append ( putot ) Epsxx . append ( ex ) Epsyy . append ( ey ) Epszz . append ( ez ) columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),locZ(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),Epsxx,Epsyy,Epszz' formats = ' {} , {} , {} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} ' if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pName , pIdent , locname , float ( x ), float ( y ), float ( z ), float ( ux ), float ( uy ), float ( uz ), float ( utot ), float ( pux ), float ( puy ), float ( puz ), float ( putot ), float ( ex ), float ( ey ), float ( ez )) for pName , pIdent , locname , x , y , z , ux , uy , uz , utot , pux , puy , puz , putot , ex , ey , ez in zip ( phaseName , phaseIdent , locName , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot , Epsxx , Epsyy , Epszz )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pName , pIdent , locname , x , y , z , ux , uy , uz , utot , pux , puy , puz , putot , ex , ey , ez in zip ( phaseName , phaseIdent , locName , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , PUxx , PUyy , PUzz , PUtot , Epsxx , Epsyy , Epszz ): row = [] row . append ( pName ) row . append ( pIdent ) row . append ( locname ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( utot ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( putot ) row . append ( ex ) row . append ( ey ) row . append ( ez ) self . insertValues ( row ) def getSoilResultsByPoints_Stresses ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if not filePoints is None : self . loadXYZNodeList ( filePoints ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints_Stresses' phaseName = [] phaseIdent = [] locName = [] locY = [] locX = [] locZ = [] Uyy = [] Uxx = [] Uzz = [] Utot = [] SigxxT = [] SigyyT = [] SigzzT = [] Sigxy = [] Sigyz = [] Sigzx = [] for phase in self . phaseOrder : print ( phase . Name . value ) for pt in self . NodeList : ux = self . g_o . getsingleresult ( phase , self . g_o . Soil . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . Soil . Uz , ( pt . x , pt . y , pt . z )) utot = self . g_o . getsingleresult ( phase , self . g_o . Soil . Utot , ( pt . x , pt . y , pt . z )) sig_xxt = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigxxT , ( pt . x , pt . y , pt . z )) sig_yyt = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigyyT , ( pt . x , pt . y , pt . z )) sig_zzt = self . g_o . getsingleresult ( phase , self . g_o . Soil . SigzzT , ( pt . x , pt . y , pt . z )) sig_xy = self . g_o . getsingleresult ( phase , self . g_o . Soil . Sigxy , ( pt . x , pt . y , pt . z )) sig_yz = self . g_o . getsingleresult ( phase , self . g_o . Soil . Sigyz , ( pt . x , pt . y , pt . z )) sig_zx = self . g_o . getsingleresult ( phase , self . g_o . Soil . Sigzx , ( pt . x , pt . y , pt . z )) if ux != 'not found' : print ( 'results for ' , phase . Name . value , pt . x , pt . y , pt . z , ' retrieved' ) phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) locName . append ( pt . name ) locX . append ( pt . x ) locY . append ( pt . y ) locZ . append ( pt . z ) Uxx . append ( ux ) Uyy . append ( uy ) Uzz . append ( uz ) Utot . append ( utot ) SigxxT . append ( sig_xxt ) SigyyT . append ( sig_yyt ) SigzzT . append ( sig_zzt ) Sigxy . append ( sig_xy ) Sigyz . append ( sig_yz ) Sigzx . append ( sig_zx ) columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),locZ(m),Ux(m),Uy(m),Uz(m),Utot(m),SxxT,SyyT,SzzT,Sxy,Syz,Szx' formats = ' {} , {} , {} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} ' if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' try : with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pName , pIdent , locname , float ( x ), float ( y ), float ( z ), float ( ux ), float ( uy ), float ( uz ), float ( utot ), float ( sig_xxt ), float ( sig_yyt ), float ( sig_zzt ), float ( sig_xy ), float ( sig_yz ), float ( sig_zx )) for pName , pIdent , locname , x , y , z , ux , uy , uz , utot , sig_xxt , sig_yyt , sig_zzt , sig_xy , sig_yz , sig_zx in zip ( phaseName , phaseIdent , locName , locX , locY , locZ , Uxx , Uyy , Uzz , Utot , SigxxT , SigyyT , SigzzT , Sigxy , Sigyz , Sigzx )]) except : print ( 'Exception writing fileoutput' ) print ( \"end\" ) file . close def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' print ( 'FileOut=' , fileOut ) # initialise data for lists pPhaseName = [] pPhaseIdent = [] pY = [] pX = [] pZ = [] pMat = [] pUx = [] pUy = [] pUz = [] pUt = [] pPUx = [] pPUy = [] pPUz = [] pPUt = [] pU1 = [] pU2 = [] pU3 = [] pM11 = [] pM22 = [] pM12 = [] pQ12 = [] pQ23 = [] pQ13 = [] pN1 = [] pN2 = [] for phase in self . phaseOrder : print ( 'Getting Plate results for Phase ' , phase . Name . value , phase . Identification . value ) try : plateX = self . g_o . getresults ( phase , self . g_o . Plate . X , 'node' ) plateY = self . g_o . getresults ( phase , self . g_o . Plate . Y , 'node' ) plateZ = self . g_o . getresults ( phase , self . g_o . Plate . Z , 'node' ) plateMat = self . g_o . getresults ( phase , self . g_o . Plate . MaterialID , 'node' ) #~ plateEl = self.g_o.getresults(phase, self.g_o.Plate.ElementID, 'node') plateUx = self . g_o . getresults ( phase , self . g_o . Plate . Ux , 'node' ) plateUy = self . g_o . getresults ( phase , self . g_o . Plate . Uy , 'node' ) plateUz = self . g_o . getresults ( phase , self . g_o . Plate . Uz , 'node' ) plateUt = self . g_o . getresults ( phase , self . g_o . Plate . Utot , 'node' ) platePUx = self . g_o . getresults ( phase , self . g_o . Plate . PUx , 'node' ) platePUy = self . g_o . getresults ( phase , self . g_o . Plate . PUy , 'node' ) platePUz = self . g_o . getresults ( phase , self . g_o . Plate . PUz , 'node' ) platePUt = self . g_o . getresults ( phase , self . g_o . Plate . PUtot , 'node' ) plateU1 = self . g_o . getresults ( phase , self . g_o . Plate . U1 , 'node' ) plateU2 = self . g_o . getresults ( phase , self . g_o . Plate . U2 , 'node' ) plateU3 = self . g_o . getresults ( phase , self . g_o . Plate . U3 , 'node' ) plateN1 = self . g_o . getresults ( phase , self . g_o . Plate . N11 , 'node' ) plateN2 = self . g_o . getresults ( phase , self . g_o . Plate . N22 , 'node' ) plateQ12 = self . g_o . getresults ( phase , self . g_o . Plate . Q12 , 'node' ) plateQ23 = self . g_o . getresults ( phase , self . g_o . Plate . Q23 , 'node' ) plateQ13 = self . g_o . getresults ( phase , self . g_o . Plate . Q13 , 'node' ) plateM11 = self . g_o . getresults ( phase , self . g_o . Plate . M11 , 'node' ) plateM22 = self . g_o . getresults ( phase , self . g_o . Plate . M22 , 'node' ) plateM12 = self . g_o . getresults ( phase , self . g_o . Plate . M12 , 'node' ) #~ print (plateEl) for x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( plateX , plateY , plateZ , plateMat , plateUx , plateUy , plateUz , plateUt , platePUx , platePUy , platePUz , platePUt , plateU1 , plateU2 , plateU3 , plateN1 , plateN2 , plateQ12 , plateQ23 , plateQ13 , plateM11 , plateM22 , plateM12 ): # add filters in here if necessary pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) pX . append ( x ) pY . append ( y ) pZ . append ( z ) pMat . append ( mat ) pUx . append ( ux ) pUy . append ( uy ) pUz . append ( uz ) pUt . append ( ut ) pPUx . append ( pux ) pPUy . append ( puy ) pPUz . append ( puz ) pPUt . append ( put ) pU1 . append ( u1 ) pU2 . append ( u2 ) pU3 . append ( u3 ) pN1 . append ( n1 ) pN2 . append ( n2 ) pQ12 . append ( q12 ) pQ23 . append ( q23 ) pQ13 . append ( q13 ) pM11 . append ( m11 ) pM22 . append ( m22 ) pM12 . append ( m12 ) except : print ( 'Exception reading Plate in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N1(kN/m),N2(kN/m),Q12(kN/m),Q23(kN/m),Q13(kN/m),M11(kNm/m),M22(kNm/m),M12(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) return columns + rows if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) print ( self . columns ) print ( self . formats ) print ( self . types ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n1 ) row . append ( n2 ) row . append ( q12 ) row . append ( q23 ) row . append ( q13 ) row . append ( m11 ) row . append ( m22 ) row . append ( m12 ) self . insertValues ( row ) print ( 'getPlateResults Done' ) def getPlateResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if not filePoints is None : self . loadXYZNodeList ( filePoints ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResultsByPoints' print ( 'FileOut=' , fileOut ) # initialise data for lists pPhaseName = [] pPhaseIdent = [] pLocName = [] pY = [] pX = [] pZ = [] pMat = [] pUx = [] pUy = [] pUz = [] pUt = [] pPUx = [] pPUy = [] pPUz = [] pPUt = [] pU1 = [] pU2 = [] pU3 = [] pM11 = [] pM22 = [] pM12 = [] pQ12 = [] pQ23 = [] pQ13 = [] pN1 = [] pN2 = [] for phase in self . phaseOrder : print ( 'Getting Plate results for Phase ' , phase . Name . value , phase . Identification . value ) for pt in self . NodeList : try : mat = self . g_o . getsingleresult ( phase , self . g_o . Plate . MaterialID , ( pt . x , pt . y , pt . z )) ux = self . g_o . getsingleresult ( phase , self . g_o . Plate . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . Plate . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . Plate . Uz , ( pt . x , pt . y , pt . z )) ut = self . g_o . getsingleresult ( phase , self . g_o . Plate . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . Plate . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . Plate . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . Plate . PUz , ( pt . x , pt . y , pt . z )) put = self . g_o . getsingleresult ( phase , self . g_o . Plate . PUtot , ( pt . x , pt . y , pt . z )) u1 = self . g_o . getsingleresult ( phase , self . g_o . Plate . U1 , ( pt . x , pt . y , pt . z )) u2 = self . g_o . getsingleresult ( phase , self . g_o . Plate . U2 , ( pt . x , pt . y , pt . z )) u3 = self . g_o . getsingleresult ( phase , self . g_o . Plate . U3 , ( pt . x , pt . y , pt . z )) n1 = self . g_o . getsingleresult ( phase , self . g_o . Plate . N11 , ( pt . x , pt . y , pt . z )) n2 = self . g_o . getsingleresult ( phase , self . g_o . Plate . N22 , ( pt . x , pt . y , pt . z )) q12 = self . g_o . getsingleresult ( phase , self . g_o . Plate . Q12 , ( pt . x , pt . y , pt . z )) q23 = self . g_o . getsingleresult ( phase , self . g_o . Plate . Q23 , ( pt . x , pt . y , pt . z )) q13 = self . g_o . getsingleresult ( phase , self . g_o . Plate . Q13 , ( pt . x , pt . y , pt . z )) m11 = self . g_o . getsingleresult ( phase , self . g_o . Plate . M11 , ( pt . x , pt . y , pt . z )) m22 = self . g_o . getsingleresult ( phase , self . g_o . Plate . M22 , ( pt . x , pt . y , pt . z )) m12 = self . g_o . getsingleresult ( phase , self . g_o . Plate . M12 , ( pt . x , pt . y , pt . z )) if ux == 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' not found' ) if ux != 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' retrieved' ) # add filters in here if necessary pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) pX . append ( pt . x ) pY . append ( pt . y ) pZ . append ( pt . z ) pMat . append ( int ( float ( mat ) + .1 )) pLocName . append ( pt . name ) pUx . append ( ux ) pUy . append ( uy ) pUz . append ( uz ) pUt . append ( ut ) pPUx . append ( pux ) pPUy . append ( puy ) pPUz . append ( puz ) pPUt . append ( put ) pU1 . append ( u1 ) pU2 . append ( u2 ) pU3 . append ( u3 ) pN1 . append ( n1 ) pN2 . append ( n2 ) pQ12 . append ( q12 ) pQ23 . append ( q23 ) pQ13 . append ( q13 ) pM11 . append ( m11 ) pM22 . append ( m22 ) pM12 . append ( m12 ) except : print ( 'Exception reading Plate in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,LocName, X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N1(kN/m),N2(kN/m),Q12(kN/m),Q23(kN/m),Q13(kN/m),M11(kNm/m),M22(kNm/m),M12(kNm/m)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:2f} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , plocname , float ( x ), float ( y ), float ( z ), mat , float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( n1 ), float ( n2 ), float ( q12 ), float ( q23 ), float ( q13 ), float ( m11 ), float ( m22 ), float ( m12 )) for pname , pident , plocname , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pLocName , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) return columns + rows if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , plocname , float ( x ), float ( y ), float ( z ), mat , float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( n1 ), float ( n2 ), float ( q12 ), float ( q23 ), float ( q13 ), float ( m11 ), float ( m22 ), float ( m12 )) for pname , pident , plocname , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pLocName , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) print ( self . columns ) print ( self . formats ) print ( self . types ) for pname , pident , locname , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pLocName , pX , pY , pZ , pMat , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( locname ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n1 ) row . append ( n2 ) row . append ( q12 ) row . append ( q23 ) row . append ( q13 ) row . append ( m11 ) row . append ( m22 ) row . append ( m12 ) self . insertValues ( row ) print ( 'getPlateResultsByPoints Done' ) def getInterfaceResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if not filePoints is None : self . loadXYZNodeList ( filePoints ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResultsByPoints' print ( 'FileOut=' , fileOut ) # initialize data for lists iPhaseName = [] iPhaseIdent = [] iLocName = [] iY = [] iX = [] iZ = [] iMat = [] iUx = [] iUy = [] iUz = [] iUt = [] iPUx = [] iPUy = [] iPUz = [] iPUt = [] iU1 = [] iU2 = [] iU3 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) for pt in self . NodeList : try : x = self . g_o . getsingleresult ( phase , self . g_o . Interface . X , ( pt . x , pt . y , pt . z )) y = self . g_o . getsingleresult ( phase , self . g_o . Interface . Y , ( pt . x , pt . y , pt . z )) z = self . g_o . getsingleresult ( phase , self . g_o . Interface . Z , ( pt . x , pt . y , pt . z )) mat = self . g_o . getsingleresult ( phase , self . g_o . Interface . MaterialID , ( pt . x , pt . y , pt . z )) ux = self . g_o . getsingleresult ( phase , self . g_o . Interface . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . Interface . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . Interface . Uz , ( pt . x , pt . y , pt . z )) ut = self . g_o . getsingleresult ( phase , self . g_o . Interface . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . Interface . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . Interface . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . Interface . PUz , ( pt . x , pt . y , pt . z )) put = self . g_o . getsingleresult ( phase , self . g_o . Interface . PUtot , ( pt . x , pt . y , pt . z )) u1 = self . g_o . getsingleresult ( phase , self . g_o . Interface . U1 , ( pt . x , pt . y , pt . z )) u2 = self . g_o . getsingleresult ( phase , self . g_o . Interface . U2 , ( pt . x , pt . y , pt . z )) u3 = self . g_o . getsingleresult ( phase , self . g_o . Interface . U3 , ( pt . x , pt . y , pt . z )) ens = self . g_o . getsingleresult ( phase , self . g_o . Interface . InterfaceEffectiveNormalStress , ( pt . x , pt . y , pt . z )) tns = self . g_o . getsingleresult ( phase , self . g_o . Interface . InterfaceTotalNormalStress , ( pt . x , pt . y , pt . z )) ss = self . g_o . getsingleresult ( phase , self . g_o . Interface . InterfaceShearStress , ( pt . x , pt . y , pt . z )) rss = self . g_o . getsingleresult ( phase , self . g_o . Interface . InterfaceRelativeShearStress , ( pt . x , pt . y , pt . z )) pe = self . g_o . getsingleresult ( phase , self . g_o . Interface . PExcess , ( pt . x , pt . y , pt . z )) pa = self . g_o . getsingleresult ( phase , self . g_o . Interface . PActive , ( pt . x , pt . y , pt . z )) pst = self . g_o . getsingleresult ( phase , self . g_o . Interface . PSteady , ( pt . x , pt . y , pt . z )) pw = self . g_o . getsingleresult ( phase , self . g_o . Interface . PWater , ( pt . x , pt . y , pt . z )) su = self . g_o . getsingleresult ( phase , self . g_o . Interface . Suction , ( pt . x , pt . y , pt . z )) esu = self . g_o . getsingleresult ( phase , self . g_o . Interface . EffSuction , ( pt . x , pt . y , pt . z )) if ux == 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' not found' ) if ux != 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' retrieved' ) # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iZ . append ( z ) iMat . append ( mat ) iLocName . append ( pt . name ) iUx . append ( ux ) iUy . append ( uy ) iUz . append ( uz ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUz . append ( puz ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iU3 . append ( u3 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,LocName,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( z ), float ( mat ), float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' #~ print(iLocName) #~ print(iPhaseName) #~ print(iPhaseIdent) #~ print(iX) #~ print(iY) #~ print(iZ) #~ print(iMat) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( z ), float ( mat ), float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( loc ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResultsByPoints Done' ) def getBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getBeamResults' print ( 'FileOut=' , fileOut ) # initialise data for lists bPhaseName = [] bPhaseIdent = [] bMat = [] bY = [] bX = [] bZ = [] bUx = [] bUy = [] bUz = [] bUt = [] bPUx = [] bPUy = [] bPUz = [] bPUt = [] bU1 = [] bU2 = [] bU3 = [] bM2 = [] bM3 = [] bQ12 = [] bQ13 = [] bN = [] for phase in self . phaseOrder : print ( 'Getting Beam results for Phase ' , phase . Name . value , phase . Identification . value ) try : beamMat = self . g_o . getresults ( phase , self . g_o . Beam . MaterialID , 'node' ) beamX = self . g_o . getresults ( phase , self . g_o . Beam . X , 'node' ) beamY = self . g_o . getresults ( phase , self . g_o . Beam . Y , 'node' ) beamZ = self . g_o . getresults ( phase , self . g_o . Beam . Z , 'node' ) beamUx = self . g_o . getresults ( phase , self . g_o . Beam . Ux , 'node' ) beamUy = self . g_o . getresults ( phase , self . g_o . Beam . Uy , 'node' ) beamUz = self . g_o . getresults ( phase , self . g_o . Beam . Uz , 'node' ) beamUt = self . g_o . getresults ( phase , self . g_o . Beam . Utot , 'node' ) beamPUx = self . g_o . getresults ( phase , self . g_o . Beam . PUx , 'node' ) beamPUy = self . g_o . getresults ( phase , self . g_o . Beam . PUy , 'node' ) beamPUz = self . g_o . getresults ( phase , self . g_o . Beam . PUz , 'node' ) beamPUt = self . g_o . getresults ( phase , self . g_o . Beam . PUtot , 'node' ) beamU1 = self . g_o . getresults ( phase , self . g_o . Beam . U1 , 'node' ) beamU2 = self . g_o . getresults ( phase , self . g_o . Beam . U2 , 'node' ) beamU3 = self . g_o . getresults ( phase , self . g_o . Beam . U3 , 'node' ) beamN = self . g_o . getresults ( phase , self . g_o . Beam . N , 'node' ) beamQ12 = self . g_o . getresults ( phase , self . g_o . Beam . Q12 , 'node' ) beamQ13 = self . g_o . getresults ( phase , self . g_o . Beam . Q13 , 'node' ) beamM2 = self . g_o . getresults ( phase , self . g_o . Beam . M2 , 'node' ) beamM3 = self . g_o . getresults ( phase , self . g_o . Beam . M3 , 'node' ) for mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( beamMat , beamX , beamY , beamZ , beamUx , beamUy , beamUz , beamUt , beamPUx , beamPUy , beamPUz , beamPUt , beamU1 , beamU2 , beamU3 , beamN , beamQ12 , beamQ13 , beamM2 , beamM3 ): # print ('YUt') # add filters in here if necessary bPhaseName . append ( phase . Name . value ) bPhaseIdent . append ( phase . Identification . value ) bMat . append ( mat ) bX . append ( x ) bY . append ( y ) bZ . append ( z ) bUx . append ( ux ) bUy . append ( uy ) bUz . append ( uz ) bUt . append ( ut ) bPUx . append ( pux ) bPUy . append ( puy ) bPUz . append ( puz ) bPUt . append ( put ) bU1 . append ( u1 ) bU2 . append ( u2 ) bU3 . append ( u3 ) bN . append ( n ) bQ12 . append ( q12 ) bQ13 . append ( q13 ) bM2 . append ( m2 ) bM3 . append ( m3 ) except : print ( 'Exception reading beam in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,MaterialID,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN/m),Q12(kN/m),Q13(kN/m),M2(kNm/m),M3(kNm/m)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 )]) return columns + rows if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , mat , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( mat ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n ) row . append ( q12 ) row . append ( q13 ) row . append ( m2 ) row . append ( m3 ) self . insertValues ( row ) print ( 'getBeamResults Done' ) def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_EmbeddedBeam.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' print ( 'FileOut=' , fileOut ) # init data for lists PhaseName = [] PhaseIdent = [] eY = [] eX = [] eZ = [] eMat = [] eUx = [] eUy = [] eUz = [] eUt = [] ePUx = [] ePUy = [] ePUz = [] ePUt = [] eU1 = [] eU2 = [] eU3 = [] eN = [] eQ12 = [] eQ13 = [] eM2 = [] eM3 = [] eTskin = [] eTlat = [] eTlat2 = [] eFfoot = [] for phase in self . phaseOrder : print ( 'Getting EmbeddedBeam results for Phase ' , phase . Name . value ) try : embeamX = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . X , 'node' ) embeamY = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Y , 'node' ) embeamZ = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Z , 'node' ) print ( 'Retrieved U' ) ebeamMat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . MaterialID , 'node' ) embeamUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Ux , 'node' ) embeamUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Uy , 'node' ) embeamUz = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Uz , 'node' ) embeamUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Utot , 'node' ) print ( 'Retrieved U' ) embeamPUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUx , 'node' ) embeamPUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUy , 'node' ) embeamPUz = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUz , 'node' ) embeamPUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUtot , 'node' ) print ( 'Retrieved dU' ) embeamU1 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U1 , 'node' ) embeamU2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U2 , 'node' ) embeamU3 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U3 , 'node' ) #print('Retrieved U1-U3') embeamN = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . N , 'node' ) embeamQ12 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Q12 , 'node' ) embeamQ13 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Q13 , 'node' ) embeamM2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . M2 , 'node' ) embeamM3 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . M3 , 'node' ) #print('Retrieved N') embeamTskin = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tskin , 'node' ) embeamTlat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tlat , 'node' ) embeamTlat2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tlat2 , 'node' ) #embeamFfoot= self.g_o.getresults(phase, self.g_o.EmbeddedBeam.Tlat2, 'node') print ( 'Retrieved EmbeddedBeam results for ' , phase . Name . value ) for x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( embeamX , embeamY , embeamZ , ebeamMat , embeamUx , embeamUy , embeamUz , embeamUt , embeamPUx , embeamPUy , embeamPUz , embeamPUt , embeamU1 , embeamU2 , embeamU3 , embeamN , embeamQ12 , embeamQ13 , embeamM2 , embeamM3 , embeamTskin , embeamTlat , embeamTlat2 ): # add filters in here if necessary PhaseName . append ( phase . Name . value ) PhaseIdent . append ( phase . Identification . value ) eX . append ( x ) eY . append ( y ) eZ . append ( z ) eMat . append ( mat ) eUx . append ( ux ) eUy . append ( uy ) eUz . append ( uz ) eUt . append ( ut ) ePUx . append ( pux ) ePUy . append ( puy ) ePUz . append ( puz ) ePUt . append ( put ) eU1 . append ( u1 ) eU2 . append ( u2 ) eU3 . append ( u3 ) eN . append ( n ) eQ12 . append ( q12 ) eQ13 . append ( q13 ) eM2 . append ( m2 ) eM3 . append ( m3 ) eTskin . append ( tskin ) eTlat . append ( tlat ) eTlat2 . append ( tlat2 ) except : print ( 'Exception reading EmbeddedBeam in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN),Q12(kN),Q13(kN),M2(kNm),M3(kNm),Tskin(kN/m),Tlat(kN/m),Tlat2(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n ) row . append ( q12 ) row . append ( q13 ) row . append ( m2 ) row . append ( m3 ) row . append ( tskin ) row . append ( tlat ) row . append ( tlat2 ) self . insertValues ( row ) print ( 'getEmbeddedBeamResults Done' ) def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): #file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_NodeToNodeAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' print ( 'FileOut=' , fileOut ) # initialize data for lists aPhaseName = [] aPhaseIdent = [] aY = [] aX = [] aZ = [] aUx = [] aUy = [] aUz = [] aUt = [] aPUx = [] aPUy = [] aPUz = [] aPUt = [] aU1 = [] aU2 = [] aU3 = [] aForce3D = [] for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : anchorX = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . X , 'node' ) anchorY = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Y , 'node' ) anchorZ = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Z , 'node' ) anchorUx = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Ux , 'node' ) anchorUy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Uy , 'node' ) anchorUz = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Uz , 'node' ) anchorUt = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Utot , 'node' ) anchorPUx = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUx , 'node' ) anchorPUy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUy , 'node' ) anchorPUz = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUz , 'node' ) anchorPUt = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUtot , 'node' ) anchorU1 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U1 , 'node' ) anchorU2 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U2 , 'node' ) anchorU3 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U3 , 'node' ) anchorForce3D = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . AnchorForce3D , 'node' ) for x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3D in zip ( anchorX , anchorY , anchorZ , anchorUx , anchorUy , anchorUz , anchorUt , anchorPUx , anchorPUy , anchorPUz , anchorPUt , anchorU1 , anchorU2 , anchorU3 , anchorForce3D ): # add filters in here if necessary aPhaseName . append ( phase . Name . value ) aPhaseIdent . append ( phase . Identification . value ) aX . append ( x ) aY . append ( y ) aZ . append ( z ) aUx . append ( ux ) aUy . append ( uy ) aUz . append ( uz ) aUt . append ( ut ) aPUx . append ( pux ) aPUy . append ( puy ) aPUz . append ( puz ) aPUt . append ( put ) aU1 . append ( u1 ) aU2 . append ( u2 ) aU3 . append ( u3 ) aForce3D . append ( f3D ) except : print ( 'Exception reading NodeToNodeAnchor in phase' + phase . Name . value , phase . Identification . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( f3d ) self . insertValues ( row ) print ( 'getNodeToNodeAnchorResults Done' ) def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_FixedEndAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' print ( 'FileOut=' , fileOut ) # initialize data for lists aPhaseName = [] aPhaseIdent = [] aY = [] aX = [] aZ = [] aUx = [] aUy = [] aUz = [] aUt = [] aPUx = [] aPUy = [] aPUz = [] aPUt = [] aU1 = [] aU2 = [] aU3 = [] aForce3D = [] for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : anchorX = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . X , 'node' ) anchorY = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Y , 'node' ) anchorZ = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Z , 'node' ) anchorUx = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Ux , 'node' ) anchorUy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Uy , 'node' ) anchorUz = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Uz , 'node' ) anchorUt = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Utot , 'node' ) anchorPUx = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUx , 'node' ) anchorPUy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUy , 'node' ) anchorPUz = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUz , 'node' ) anchorPUt = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUtot , 'node' ) anchorU1 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U1 , 'node' ) anchorU2 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U2 , 'node' ) anchorU3 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U3 , 'node' ) anchorForce3D = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . AnchorForce3D , 'node' ) print ( 'Retrieved FixedEndAnchor results for ' , phase . Name . value ) for x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3D in zip ( anchorX , anchorY , anchorZ , anchorUx , anchorUy , anchorUz , anchorUt , anchorPUx , anchorPUy , anchorPUz , anchorPUt , anchorU1 , anchorU2 , anchorU3 , anchorForce3D ): # add filters in here if necessary aPhaseName . append ( phase . Name . value ) aPhaseIdent . append ( phase . Identification . value ) aX . append ( x ) aY . append ( y ) aZ . append ( z ) aUx . append ( ux ) aUy . append ( uy ) aUz . append ( uz ) aUt . append ( ut ) aPUx . append ( pux ) aPUy . append ( puy ) aPUz . append ( puz ) aPUt . append ( put ) aU1 . append ( u1 ) aU2 . append ( u2 ) aU3 . append ( u3 ) aForce3D . append ( f3D ) except : print ( 'Exception reading FixedEndAnchor in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( aPhaseName , aPhaseIdent , aX , aY , aZ , aUx , aUy , aUz , aUt , aPUx , aPUy , aPUz , aPUt , aU1 , aU2 , aU3 , aForce3D ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( f3d ) self . insertValues ( row ) print ( 'getFixedEndAnchorResults Done' ) def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_Interface.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' print ( 'FileOut=' , fileOut ) # initialize data for lists iPhaseName = [] iPhaseIdent = [] iY = [] iX = [] iZ = [] iMat = [] iUx = [] iUy = [] iUz = [] iUt = [] iPUx = [] iPUy = [] iPUz = [] iPUt = [] iU1 = [] iU2 = [] iU3 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : interX = self . g_o . getresults ( phase , self . g_o . Interface . X , 'node' ) interY = self . g_o . getresults ( phase , self . g_o . Interface . Y , 'node' ) interZ = self . g_o . getresults ( phase , self . g_o . Interface . Z , 'node' ) interMat = self . g_o . getresults ( phase , self . g_o . Interface . MaterialID , 'node' ) interUx = self . g_o . getresults ( phase , self . g_o . Interface . Ux , 'node' ) interUy = self . g_o . getresults ( phase , self . g_o . Interface . Uy , 'node' ) interUz = self . g_o . getresults ( phase , self . g_o . Interface . Uz , 'node' ) interUt = self . g_o . getresults ( phase , self . g_o . Interface . Utot , 'node' ) interPUx = self . g_o . getresults ( phase , self . g_o . Interface . PUx , 'node' ) interPUy = self . g_o . getresults ( phase , self . g_o . Interface . PUy , 'node' ) interPUz = self . g_o . getresults ( phase , self . g_o . Interface . PUz , 'node' ) interPUt = self . g_o . getresults ( phase , self . g_o . Interface . PUtot , 'node' ) interU1 = self . g_o . getresults ( phase , self . g_o . Interface . U1 , 'node' ) interU2 = self . g_o . getresults ( phase , self . g_o . Interface . U2 , 'node' ) interU3 = self . g_o . getresults ( phase , self . g_o . Interface . U3 , 'node' ) interEffNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceEffectiveNormalStress , 'node' ) interTotNormalStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceTotalNormalStress , 'node' ) interShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceShearStress , 'node' ) interRelShearStress = self . g_o . getresults ( phase , self . g_o . Interface . InterfaceRelativeShearStress , 'node' ) interPExcess = self . g_o . getresults ( phase , self . g_o . Interface . PExcess , 'node' ) interPActive = self . g_o . getresults ( phase , self . g_o . Interface . PActive , 'node' ) interPSteady = self . g_o . getresults ( phase , self . g_o . Interface . PSteady , 'node' ) interPWater = self . g_o . getresults ( phase , self . g_o . Interface . PWater , 'node' ) interSuction = self . g_o . getresults ( phase , self . g_o . Interface . Suction , 'node' ) interEffSuction = self . g_o . getresults ( phase , self . g_o . Interface . EffSuction , 'node' ) for x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( interX , interY , interZ , interMat , interUx , interUy , interUz , interUt , interPUx , interPUy , interPUz , interPUt , interU1 , interU2 , interU3 , interEffNormalStress , interTotNormalStress , interShearStress , interRelShearStress , interPExcess , interPActive , interPSteady , interPWater , interSuction , interEffSuction ): # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iZ . append ( z ) iMat . append ( mat ) iUx . append ( ux ) iUy . append ( uy ) iUz . append ( uz ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUz . append ( puz ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iU3 . append ( u3 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResults Done' ) def getAllStructuralResults ( self , folderOut = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getBeamResults.csv' else : tableOut = 'getBeamResults' self . getBeamResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getPlateResults.csv' else : tableOut = 'getPlateResults' self . getPlateResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getEmbeddedBeamResults.csv' else : tableOut = 'getEmbeddedBeamResults' self . getEmbeddedBeamResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getNodeToNodeAnchorResults.csv' else : tableOut = 'getNodeToNodeAnchorResults' self . getNodeToNodeAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getFixedEndAnchorResults.csv' tableOut = None else : tableOut = 'getFixedEndAnchorResults' self . getFixedEndAnchorResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd ) if ( self . IsDbFile ( fileOut ) == False ): fileOut = folderOut + r '\\getInterfaceResults.csv' else : tableOut = 'getInterfaceResults' self . getInterfaceResults ( fileOut = fileOut , tableOut = tableOut , sphaseOrder = sphaseOrder , sphaseStart = sphaseStart , sphaseEnd = sphaseEnd )","title":"Plaxis3dResults"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.Plaxis3dResults2018","text":"Bases: Plaxis3dResults Source code in src\\ge_lib\\plaxis\\Plaxis3dResults2018.pyclass Plaxis3dResults2018 ( Plaxis3dResults ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis3dResults2018 , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis3d2018\" def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' print ( 'FileOut=' , fileOut ) # initialise data for lists pPhaseName = [] pPhaseIdent = [] pY = [] pX = [] pZ = [] pMat = [] pEl = [] pUx = [] pUy = [] pUz = [] pUt = [] pPUx = [] pPUy = [] pPUz = [] pPUt = [] pU1 = [] pU2 = [] pU3 = [] pM11 = [] pM22 = [] pM12 = [] pQ12 = [] pQ23 = [] pQ13 = [] pN1 = [] pN2 = [] for phase in self . phaseOrder : print ( 'Getting Plate results for Phase ' , phase . Name . value , phase . Identification . value ) try : plateX = self . g_o . getresults ( phase , self . g_o . Plate . X , 'node' ) plateY = self . g_o . getresults ( phase , self . g_o . Plate . Y , 'node' ) plateZ = self . g_o . getresults ( phase , self . g_o . Plate . Z , 'node' ) plateMat = self . g_o . getresults ( phase , self . g_o . Plate . MaterialID , 'node' ) plateEl = self . g_o . getresults ( phase , self . g_o . Plate . ElementID , 'node' ) plateUx = self . g_o . getresults ( phase , self . g_o . Plate . Ux , 'node' ) plateUy = self . g_o . getresults ( phase , self . g_o . Plate . Uy , 'node' ) plateUz = self . g_o . getresults ( phase , self . g_o . Plate . Uz , 'node' ) plateUt = self . g_o . getresults ( phase , self . g_o . Plate . Utot , 'node' ) platePUx = self . g_o . getresults ( phase , self . g_o . Plate . PUx , 'node' ) platePUy = self . g_o . getresults ( phase , self . g_o . Plate . PUy , 'node' ) platePUz = self . g_o . getresults ( phase , self . g_o . Plate . PUz , 'node' ) platePUt = self . g_o . getresults ( phase , self . g_o . Plate . PUtot , 'node' ) plateU1 = self . g_o . getresults ( phase , self . g_o . Plate . U1 , 'node' ) plateU2 = self . g_o . getresults ( phase , self . g_o . Plate . U2 , 'node' ) plateU3 = self . g_o . getresults ( phase , self . g_o . Plate . U3 , 'node' ) plateN1 = self . g_o . getresults ( phase , self . g_o . Plate . N11 , 'node' ) plateN2 = self . g_o . getresults ( phase , self . g_o . Plate . N22 , 'node' ) plateQ12 = self . g_o . getresults ( phase , self . g_o . Plate . Q12 , 'node' ) plateQ23 = self . g_o . getresults ( phase , self . g_o . Plate . Q23 , 'node' ) plateQ13 = self . g_o . getresults ( phase , self . g_o . Plate . Q13 , 'node' ) plateM11 = self . g_o . getresults ( phase , self . g_o . Plate . M11 , 'node' ) plateM22 = self . g_o . getresults ( phase , self . g_o . Plate . M22 , 'node' ) plateM12 = self . g_o . getresults ( phase , self . g_o . Plate . M12 , 'node' ) for x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( plateX , plateY , plateZ , plateMat , plateEl , plateUx , plateUy , plateUz , plateUt , platePUx , platePUy , platePUz , platePUt , plateU1 , plateU2 , plateU3 , plateN1 , plateN2 , plateQ12 , plateQ23 , plateQ13 , plateM11 , plateM22 , plateM12 ): # add filters in here if necessary pPhaseName . append ( phase . Name . value ) pPhaseIdent . append ( phase . Identification . value ) pX . append ( x ) pY . append ( y ) pZ . append ( z ) pMat . append ( mat ) pEl . append ( el ) pUx . append ( ux ) pUy . append ( uy ) pUz . append ( uz ) pUt . append ( ut ) pPUx . append ( pux ) pPUy . append ( puy ) pPUz . append ( puz ) pPUt . append ( put ) pU1 . append ( u1 ) pU2 . append ( u2 ) pU3 . append ( u3 ) pN1 . append ( n1 ) pN2 . append ( n2 ) pQ12 . append ( q12 ) pQ23 . append ( q23 ) pQ13 . append ( q13 ) pM11 . append ( m11 ) pM22 . append ( m22 ) pM12 . append ( m12 ) except Exception as e : print ( 'Exception reading Plate in phase' + phase . Name . value ) self . logger . error ( '...exception reading Plate results ' + str ( e )) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID, ElementID, Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N1(kN/m),N2(kN/m),Q12(kN/m),Q23(kN/m),Q13(kN/m),M11(kNm/m),M22(kNm/m),M12(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pEl , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) return columns + rows if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pEl , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) print ( self . columns ) print ( self . formats ) print ( self . types ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( pPhaseName , pPhaseIdent , pX , pY , pZ , pMat , pEl , pUx , pUy , pUz , pUt , pPUx , pPUy , pPUz , pPUt , pU1 , pU2 , pU3 , pN1 , pN2 , pQ12 , pQ23 , pQ13 , pM11 , pM22 , pM12 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n1 ) row . append ( n2 ) row . append ( q12 ) row . append ( q23 ) row . append ( q13 ) row . append ( m11 ) row . append ( m22 ) row . append ( m12 ) self . insertValues ( row ) print ( 'getPlateResults Done' ) def getBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getBeamResults' print ( 'FileOut=' , fileOut ) # initialise data for lists bPhaseName = [] bPhaseIdent = [] bMat = [] bEl = [] bY = [] bX = [] bZ = [] bUx = [] bUy = [] bUz = [] bUt = [] bPUx = [] bPUy = [] bPUz = [] bPUt = [] bU1 = [] bU2 = [] bU3 = [] bM2 = [] bM3 = [] bQ12 = [] bQ13 = [] bN = [] for phase in self . phaseOrder : print ( 'Getting Beam results for Phase ' , phase . Name . value , phase . Identification . value ) try : beamMat = self . g_o . getresults ( phase , self . g_o . Beam . MaterialID , 'node' ) beamEl = self . g_o . getresults ( phase , self . g_o . Beam . ElementID , 'node' ) beamX = self . g_o . getresults ( phase , self . g_o . Beam . X , 'node' ) beamY = self . g_o . getresults ( phase , self . g_o . Beam . Y , 'node' ) beamZ = self . g_o . getresults ( phase , self . g_o . Beam . Z , 'node' ) beamUx = self . g_o . getresults ( phase , self . g_o . Beam . Ux , 'node' ) beamUy = self . g_o . getresults ( phase , self . g_o . Beam . Uy , 'node' ) beamUz = self . g_o . getresults ( phase , self . g_o . Beam . Uz , 'node' ) beamUt = self . g_o . getresults ( phase , self . g_o . Beam . Utot , 'node' ) beamPUx = self . g_o . getresults ( phase , self . g_o . Beam . PUx , 'node' ) beamPUy = self . g_o . getresults ( phase , self . g_o . Beam . PUy , 'node' ) beamPUz = self . g_o . getresults ( phase , self . g_o . Beam . PUz , 'node' ) beamPUt = self . g_o . getresults ( phase , self . g_o . Beam . PUtot , 'node' ) beamU1 = self . g_o . getresults ( phase , self . g_o . Beam . U1 , 'node' ) beamU2 = self . g_o . getresults ( phase , self . g_o . Beam . U2 , 'node' ) beamU3 = self . g_o . getresults ( phase , self . g_o . Beam . U3 , 'node' ) beamN = self . g_o . getresults ( phase , self . g_o . Beam . N , 'node' ) beamQ12 = self . g_o . getresults ( phase , self . g_o . Beam . Q12 , 'node' ) beamQ13 = self . g_o . getresults ( phase , self . g_o . Beam . Q13 , 'node' ) beamM2 = self . g_o . getresults ( phase , self . g_o . Beam . M2 , 'node' ) beamM3 = self . g_o . getresults ( phase , self . g_o . Beam . M3 , 'node' ) for mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( beamMat , beamEl , beamX , beamY , beamZ , beamUx , beamUy , beamUz , beamUt , beamPUx , beamPUy , beamPUz , beamPUt , beamU1 , beamU2 , beamU3 , beamN , beamQ12 , beamQ13 , beamM2 , beamM3 ): # print ('YUt') # add filters in here if necessary bPhaseName . append ( phase . Name . value ) bPhaseIdent . append ( phase . Identification . value ) bMat . append ( mat ) bEl . append ( el ) bX . append ( x ) bY . append ( y ) bZ . append ( z ) bUx . append ( ux ) bUy . append ( uy ) bUz . append ( uz ) bUt . append ( ut ) bPUx . append ( pux ) bPUy . append ( puy ) bPUz . append ( puz ) bPUt . append ( put ) bU1 . append ( u1 ) bU2 . append ( u2 ) bU3 . append ( u3 ) bN . append ( n ) bQ12 . append ( q12 ) bQ13 . append ( q13 ) bM2 . append ( m2 ) bM3 . append ( m3 ) except : print ( 'Exception reading beam in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,MaterialID,ElementID,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN/m),Q12(kN/m),Q13(kN/m),M2(kNm/m),M3(kNm/m)' formats = ' {} , {} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bEl , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 )]) return columns + rows if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' print ( 'Outputting to file ' , fileOut , '....' ) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bEl , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( bPhaseName , bPhaseIdent , bMat , bEl , bX , bY , bZ , bUx , bUy , bUz , bUt , bPUx , bPUy , bPUz , bPUt , bU1 , bU2 , bU3 , bN , bQ12 , bQ13 , bM2 , bM3 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( mat ) row . append ( el ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n ) row . append ( q12 ) row . append ( q13 ) row . append ( m2 ) row . append ( m3 ) self . insertValues ( row ) print ( 'getBeamResults Done' ) def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_EmbeddedBeam.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' print ( 'FileOut=' , fileOut ) # init data for lists PhaseName = [] PhaseIdent = [] eY = [] eX = [] eZ = [] eMat = [] eEl = [] eUx = [] eUy = [] eUz = [] eUt = [] ePUx = [] ePUy = [] ePUz = [] ePUt = [] eU1 = [] eU2 = [] eU3 = [] eN = [] eQ12 = [] eQ13 = [] eM2 = [] eM3 = [] eTskin = [] eTlat = [] eTlat2 = [] eFfoot = [] for phase in self . phaseOrder : print ( 'Getting EmbeddedBeam results for Phase ' , phase . Name . value ) try : embeamX = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . X , 'node' ) embeamY = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Y , 'node' ) embeamZ = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Z , 'node' ) #print('Retrieved U') ebeamMat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . MaterialID , 'node' ) ebeamEl = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . ElementID , 'node' ) embeamUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Ux , 'node' ) embeamUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Uy , 'node' ) embeamUz = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Uz , 'node' ) embeamUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Utot , 'node' ) #print('Retrieved U') embeamPUx = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUx , 'node' ) embeamPUy = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUy , 'node' ) embeamPUz = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUz , 'node' ) embeamPUt = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . PUtot , 'node' ) #print('Retrieved dU') embeamU1 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U1 , 'node' ) embeamU2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U2 , 'node' ) embeamU3 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . U3 , 'node' ) #print('Retrieved U1-U3') embeamN = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . N , 'node' ) embeamQ12 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Q12 , 'node' ) embeamQ13 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Q13 , 'node' ) embeamM2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . M2 , 'node' ) embeamM3 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . M3 , 'node' ) #print('Retrieved N') embeamTskin = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tskin , 'node' ) embeamTlat = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tlat , 'node' ) embeamTlat2 = self . g_o . getresults ( phase , self . g_o . EmbeddedBeam . Tlat2 , 'node' ) #embeamFfoot= self.g_o.getresults(phase, self.g_o.EmbeddedBeam.Tlat2, 'node') print ( 'Retrieved EmbeddedBeam results for ' , phase . Name . value ) for x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( embeamX , embeamY , embeamZ , ebeamMat , ebeamEl , embeamUx , embeamUy , embeamUz , embeamUt , embeamPUx , embeamPUy , embeamPUz , embeamPUt , embeamU1 , embeamU2 , embeamU3 , embeamN , embeamQ12 , embeamQ13 , embeamM2 , embeamM3 , embeamTskin , embeamTlat , embeamTlat2 ): # add filters in here if necessary PhaseName . append ( phase . Name . value ) PhaseIdent . append ( phase . Identification . value ) eX . append ( x ) eY . append ( y ) eZ . append ( z ) eMat . append ( mat ) eEl . append ( el ) eUx . append ( ux ) eUy . append ( uy ) eUz . append ( uz ) eUt . append ( ut ) ePUx . append ( pux ) ePUy . append ( puy ) ePUz . append ( puz ) ePUt . append ( put ) eU1 . append ( u1 ) eU2 . append ( u2 ) eU3 . append ( u3 ) eN . append ( n ) eQ12 . append ( q12 ) eQ13 . append ( q13 ) eM2 . append ( m2 ) eM3 . append ( m3 ) eTskin . append ( tskin ) eTlat . append ( tlat ) eTlat2 . append ( tlat2 ) except : print ( 'Exception reading EmbeddedBeam in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,ElementID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN),Q12(kN),Q13(kN),M2(kNm),M3(kNm),Tskin(kN/m),Tlat(kN/m),Tlat2(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eEl , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eEl , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( PhaseName , PhaseIdent , eX , eY , eZ , eMat , eEl , eUx , eUy , eUz , eUt , ePUx , ePUy , ePUz , ePUt , eU1 , eU2 , eU3 , eN , eQ12 , eQ13 , eM2 , eM3 , eTskin , eTlat , eTlat2 ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( el ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( n ) row . append ( q12 ) row . append ( q13 ) row . append ( m2 ) row . append ( m3 ) row . append ( tskin ) row . append ( tlat ) row . append ( tlat2 ) self . insertValues ( row ) print ( 'getEmbeddedBeamResults Done' ) def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_Interface.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' print ( 'FileOut=' , fileOut ) # initialize data for lists iPhaseName = [] iPhaseIdent = [] iY = [] iX = [] iZ = [] iMat = [] iUx = [] iUy = [] iUz = [] iUt = [] iPUx = [] iPUy = [] iPUz = [] iPUt = [] iU1 = [] iU2 = [] iU3 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) try : interX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . X , 'node' ) interY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Y , 'node' ) interZ = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Z , 'node' ) interMat = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . MaterialID , 'node' ) interUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Ux , 'node' ) interUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uy , 'node' ) interUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uz , 'node' ) interUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Utot , 'node' ) interPUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUx , 'node' ) interPUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUy , 'node' ) interPUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUz , 'node' ) interPUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUtot , 'node' ) interU1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U1 , 'node' ) interU2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U2 , 'node' ) interU3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U3 , 'node' ) interEffNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , 'node' ) interTotNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , 'node' ) interShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , 'node' ) interRelShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , 'node' ) interPExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PExcess , 'node' ) interPActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PActive , 'node' ) interPSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PSteady , 'node' ) interPWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PWater , 'node' ) interSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Suction , 'node' ) interEffSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . EffSuction , 'node' ) for x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( interX , interY , interZ , interMat , interUx , interUy , interUz , interUt , interPUx , interPUy , interPUz , interPUt , interU1 , interU2 , interU3 , interEffNormalStress , interTotNormalStress , interShearStress , interRelShearStress , interPExcess , interPActive , interPSteady , interPWater , interSuction , interEffSuction ): # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iZ . append ( z ) iMat . append ( mat ) iUx . append ( ux ) iUy . append ( uy ) iUz . append ( uz ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUz . append ( puz ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iU3 . append ( u3 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except Exception as e : msg = '...exception reading interface results ' + phase . Identification . value print ( msg ) self . logger . error ( msg + str ( e )) columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResults Done' ) def getInterfaceResultsByPoints ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): if self . phaseOrder is None : self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if not filePoints is None : self . loadXYZNodeList ( filePoints ) if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResultsByPoints' print ( 'FileOut=' , fileOut ) # initialize data for lists iPhaseName = [] iPhaseIdent = [] iLocName = [] iY = [] iX = [] iZ = [] iMat = [] iUx = [] iUy = [] iUz = [] iUt = [] iPUx = [] iPUy = [] iPUz = [] iPUt = [] iU1 = [] iU2 = [] iU3 = [] iEffNormalStress = [] iTotNormalStress = [] iShearStress = [] iRelShearStress = [] iPExcess = [] iPActive = [] iPSteady = [] iPWater = [] iSuction = [] iEffSuction = [] for phase in self . phaseOrder : print ( 'Getting Interface results for Phase ' , phase . Name . value ) for pt in self . NodeList : try : x = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . X , ( pt . x , pt . y , pt . z )) y = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Y , ( pt . x , pt . y , pt . z )) z = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Z , ( pt . x , pt . y , pt . z )) mat = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . MaterialID , ( pt . x , pt . y , pt . z )) ux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Uz , ( pt . x , pt . y , pt . z )) ut = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PUz , ( pt . x , pt . y , pt . z )) put = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PUtot , ( pt . x , pt . y , pt . z )) u1 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . U1 , ( pt . x , pt . y , pt . z )) u2 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . U2 , ( pt . x , pt . y , pt . z )) u3 = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . U3 , ( pt . x , pt . y , pt . z )) ens = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , ( pt . x , pt . y , pt . z )) tns = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , ( pt . x , pt . y , pt . z )) ss = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , ( pt . x , pt . y , pt . z )) rss = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , ( pt . x , pt . y , pt . z )) pe = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PExcess , ( pt . x , pt . y , pt . z )) pa = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PActive , ( pt . x , pt . y , pt . z )) pst = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PSteady , ( pt . x , pt . y , pt . z )) pw = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . PWater , ( pt . x , pt . y , pt . z )) su = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . Suction , ( pt . x , pt . y , pt . z )) esu = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Interface . EffSuction , ( pt . x , pt . y , pt . z )) if ux == 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' not found' ) if ux != 'not found' : print ( 'results for ' , phase . Name . value , pt . name , pt . x , pt . y , pt . z , ' retrieved' ) # add filters in here if necessary iPhaseName . append ( phase . Name . value ) iPhaseIdent . append ( phase . Identification . value ) iX . append ( x ) iY . append ( y ) iZ . append ( z ) iMat . append ( mat ) iLocName . append ( pt . name ) iUx . append ( ux ) iUy . append ( uy ) iUz . append ( uz ) iUt . append ( ut ) iPUx . append ( pux ) iPUy . append ( puy ) iPUz . append ( puz ) iPUt . append ( put ) iU1 . append ( u1 ) iU2 . append ( u2 ) iU3 . append ( u3 ) iEffNormalStress . append ( ens ) iTotNormalStress . append ( tns ) iShearStress . append ( ss ) iRelShearStress . append ( rss ) iPExcess . append ( pe ) iPActive . append ( pa ) iPSteady . append ( pst ) iPWater . append ( pw ) iSuction . append ( su ) iEffSuction . append ( esu ) except : print ( 'Exception reading Interface results in phase' + phase . Name . value ) columns = 'Phase,PhaseIdent,LocName,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' if ( fileOut == None and tableOut == None ): print ( 'Outputting to string....' ) columns += ' \\n ' formats += ' \\n ' rows = '' . join ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( z ), float ( mat ), float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) return columns + rows if ( fileOut != None and tableOut == None ): print ( 'Outputting to file ' , fileOut , '....' ) columns += ' \\n ' formats += ' \\n ' #~ print(iLocName) #~ print(iPhaseName) #~ print(iPhaseIdent) #~ print(iX) #~ print(iY) #~ print(iZ) #~ print(iMat) with open ( fileOut , \"w\" ) as file : file . writelines ([ columns ]) file . writelines ([ formats . format ( pname , pident , loc , float ( x ), float ( y ), float ( z ), float ( mat ), float ( ux ), float ( uy ), float ( uz ), float ( ut ), float ( pux ), float ( puy ), float ( puz ), float ( put ), float ( u1 ), float ( u2 ), float ( u3 ), float ( ens ), float ( tns ), float ( ss ), float ( rss ), float ( pe ), float ( pa ), float ( pst ), float ( pw ), float ( su ), float ( esu )) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction )]) if ( fileOut != None and tableOut != None ): print ( 'Outputting to database ' , fileOut , '....' ) self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) for pname , pident , loc , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( iPhaseName , iPhaseIdent , iLocName , iX , iY , iZ , iMat , iUx , iUy , iUz , iUt , iPUx , iPUy , iPUz , iPUt , iU1 , iU2 , iU3 , iEffNormalStress , iTotNormalStress , iShearStress , iRelShearStress , iPExcess , iPActive , iPSteady , iPWater , iSuction , iEffSuction ): row = [] row . append ( pname ) row . append ( pident ) row . append ( loc ) row . append ( x ) row . append ( y ) row . append ( z ) row . append ( mat ) row . append ( ux ) row . append ( uy ) row . append ( uz ) row . append ( ut ) row . append ( pux ) row . append ( puy ) row . append ( puz ) row . append ( put ) row . append ( u1 ) row . append ( u2 ) row . append ( u3 ) row . append ( ens ) row . append ( tns ) row . append ( ss ) row . append ( rss ) row . append ( pe ) row . append ( pa ) row . append ( pst ) row . append ( pw ) row . append ( su ) row . append ( esu ) self . insertValues ( row ) print ( 'getInterfaceResultsByPoints Done' )","title":"Plaxis3dResults2018"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.Plaxis3dResults2023","text":"Bases: Plaxis3dResultsConnect Source code in src\\ge_lib\\plaxis\\Plaxis3dResults2023.pyclass Plaxis3dResults2023 ( Plaxis3dResultsConnect ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis3dResultsConnect , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis3d2023\" def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_EmbeddedBeam.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,ElementID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN),Q12(kN),Q13(kN),M2(kNm),M3(kNm),Tskin(kN/m),Tlat(kN/m),Tlat2(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting EmbeddedBeam results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Z , 'node' ) #print('Retrieved U') Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Utot , 'node' ) #print('Retrieved U') PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUtot , 'node' ) #print('Retrieved dU') U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U3 , 'node' ) #print('Retrieved U1-U3') N = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . N , 'node' ) Q12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q12 , 'node' ) Q13 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q13 , 'node' ) M2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M2 , 'node' ) M3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M3 , 'node' ) #print('Retrieved N') Tskin = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tskin , 'node' ) Tlat = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat , 'node' ) Tlat2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat2 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , N , Q12 , Q13 , M2 , M3 , Tskin , Tlat , Tlat2 )] w . writeOutput () msg = 'Retreived EmbeddedBeam results for ' + phase . Name . value + '(embeddedbeam-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading EnbeddedBeam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading EmbeddedBeam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getEmbeddedBeamResults()' ) return Status . ELEMENT_PROCESSED def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID, ElementID, Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N1(kN/m),N2(kN/m),Q12(kN/m),Q23(kN/m),Q13(kN/m),M11(kNm/m),M22(kNm/m),M12(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Plate results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Z , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U3 , 'node' ) N11 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11 , 'node' ) N22 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22 , 'node' ) Q12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12 , 'node' ) Q23 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23 , 'node' ) Q13 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13 , 'node' ) M11 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11 , 'node' ) M22 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22 , 'node' ) M12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , N11 , N22 , Q12 , Q23 , Q13 , M11 , M22 , M12 )] w . writeOutput () except Exception as e : print ( 'Exception reading Plate in phase' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getPlateResults()' ) return Status . ELEMENT_PROCESSED def getBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getBeamResults' columns = 'Phase,PhaseIdent,MaterialID,ElementID,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN/m),Q12(kN/m),Q13(kN/m),M2(kNm/m),M3(kNm/m)' formats = ' {} , {} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Beam results for Phase ' , phase . Name . value , phase . Identification . value ) try : beamMat = self . g_o . getresults ( phase , self . g_o . Beam . Materialndex , 'node' ) beamEl = self . g_o . getresults ( phase , self . g_o . Beam . ElementID , 'node' ) beamX = self . g_o . getresults ( phase , self . g_o . Beam . X , 'node' ) beamY = self . g_o . getresults ( phase , self . g_o . Beam . Y , 'node' ) beamZ = self . g_o . getresults ( phase , self . g_o . Beam . Z , 'node' ) beamUx = self . g_o . getresults ( phase , self . g_o . Beam . Ux , 'node' ) beamUy = self . g_o . getresults ( phase , self . g_o . Beam . Uy , 'node' ) beamUz = self . g_o . getresults ( phase , self . g_o . Beam . Uz , 'node' ) beamUt = self . g_o . getresults ( phase , self . g_o . Beam . Utot , 'node' ) beamPUx = self . g_o . getresults ( phase , self . g_o . Beam . PUx , 'node' ) beamPUy = self . g_o . getresults ( phase , self . g_o . Beam . PUy , 'node' ) beamPUz = self . g_o . getresults ( phase , self . g_o . Beam . PUz , 'node' ) beamPUt = self . g_o . getresults ( phase , self . g_o . Beam . PUtot , 'node' ) beamU1 = self . g_o . getresults ( phase , self . g_o . Beam . U1 , 'node' ) beamU2 = self . g_o . getresults ( phase , self . g_o . Beam . U2 , 'node' ) beamU3 = self . g_o . getresults ( phase , self . g_o . Beam . U3 , 'node' ) beamN = self . g_o . getresults ( phase , self . g_o . Beam . N , 'node' ) beamQ12 = self . g_o . getresults ( phase , self . g_o . Beam . Q12 , 'node' ) beamQ13 = self . g_o . getresults ( phase , self . g_o . Beam . Q13 , 'node' ) beamM2 = self . g_o . getresults ( phase , self . g_o . Beam . M2 , 'node' ) beamM3 = self . g_o . getresults ( phase , self . g_o . Beam . M3 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( phaseName , phaseIdent , beamMat , beamEl , beamX , beamY , beamZ , beamUx , beamUy , beamUz , beamUt , beamPUx , beamPUy , beamPUz , beamPUt , beamU1 , beamU2 , beamU3 , beamN , beamQ12 , beamQ13 , beamM2 , beamM3 )] w . writeOutput () msg = 'Retreived Beam results for ' + phase . Name . value + '(beam-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading Beam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Beam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getBeamResults()' ) return Status . ELEMENT_PROCESSED def getSoilResultsByPoints_Displacements ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if not filePoints is None : self . loadXYZNodeList ( filePoints ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints_Displacements' columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),locZ(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),Epsxx,Epsyy,Epszz' formats = ' {} , {} , {} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : phaseName = phase . Name . value phaseIdent = phase . Identification . value for pt in self . NodeList : try : ux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uz , ( pt . x , pt . y , pt . z )) utot = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUz , ( pt . x , pt . y , pt . z )) putot = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUtot , ( pt . x , pt . y , pt . z )) ex = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epsxx , ( pt . x , pt . y , pt . z )) ey = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epsyy , ( pt . x , pt . y , pt . z )) ez = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epszz , ( pt . x , pt . y , pt . z )) w . rowsOut = [ formats . format ( phaseName , phaseIdent , pt . locname , float ( pt . x ), float ( pt . y ), float ( pt . z ), float ( ux ), float ( uy ), float ( uz ), float ( utot ), float ( pux ), float ( puy ), float ( puz ), float ( putot ), float ( ex ), float ( ey ), float ( ez ))] w . writeOutput () except Exception as e : msg = '...exception reading SoilResultsByPoints_Displacements results ' + phase . Identification . value print ( msg ) self . logger . error ( msg + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting SoilResultsByPoints_Displacements()' ) return Status . ELEMENT_PROCESSED def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_Interface.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Interface results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Z , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . MaterialIndex , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U3 , 'node' ) InterfaceEffNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , 'node' ) InterfaceTotNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , 'node' ) InterfaceShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , 'node' ) InterfaceRelShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , 'node' ) PExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PExcess , 'node' ) PActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PActive , 'node' ) PSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PSteady , 'node' ) PWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PWater , 'node' ) Suction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Suction , 'node' ) EffSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . EffSuction , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( phaseName , phaseIdent , X , Y , Z , Material , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , InterfaceEffNormalStress , InterfaceTotNormalStress , InterfaceShearStress , InterfaceRelShearStress , PExcess , PActive , PSteady , PWater , Suction , EffSuction )] w . writeOutput () msg = 'Retreived Interface results for ' + phase . Name . value + '(interface-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading interface results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Interface results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getInterfaceResults()' ) return Status . ELEMENT_PROCESSED def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): #file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_NodeToNodeAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Z , 'node' ) Mat = self . g_o . getresults ( phase , self . g_o . ResultTypes . Node2NodeAnchor . MaterialIndex , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . U3 , 'node' ) Force3D = self . g_o . getresults ( phase , self . g_o . ResultTypes . NodeToNodeAnchor . AnchorForce3D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( phaseName , phaseIdent , X , Y , Z , Mat , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , Force3D )] w . writeOutput () msg = 'Retreived Node2NodeAnchor results for ' + phase . Name . value + '(nodetonodeanchor-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading node2nodeanchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading node2nodeanchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getNode2NodeAnchoreResults()' ) return Status . ELEMENT_PROCESSED def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_FixedEndAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Z , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . MaterialIndex , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . U3 , 'node' ) Force3D = self . g_o . getresults ( phase , self . g_o . ResultTypes . FixedEndAnchor . AnchorForce3D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( phaseName , phaseIdent , X , Y , Z , Material , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , Force3D )] w . writeOutput () msg = 'Retreived FixedEndAnchor results for ' + phase . Name . value + '(nodetonodeanchor-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading fixedendanchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading node2nodeanchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getFixedEndAnchoreResults()' ) return Status . ELEMENT_PROCESSED def getPlateEnvelopeResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateEnvelopeResults' # with movements # columns ='Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID, ElementID, Ux_max(m),Ux_min(m),Uy_max(m),Uy_min(m),Uz_max(m),Uz_min(m),Utot_max(m),PUx_max(m),PUx_min(m),PUy_max(m),PUy_min(m),PUz_max(m),PUz_min(m),PUt_max(m),N11_max(kN/m),N11_min(kN/m),N22_max(kN/m),N22_max(kN/m),Q12_max(kN/m),Q12_min(kN/m),Q23_max(kN/m),Q23_min(kN/m),Q13_max(kN/m),Q13_min(kN/m),M11_max(kNm/m),M11_min(kNm/m),M12_max(kNm/m),M12_min(kNm/m),M22_max(kNm/m),M22_min(kN/m)' # formats = '{},{},{:2f},{:2f},{:2f},{:0},{:0},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f},{:2f}' # without movements columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,ElementID,N11_max(kN/m),N11_min(kN/m),N22_max(kN/m),N22_max(kN/m),Q12_max(kN/m),Q12_min(kN/m),Q23_max(kN/m),Q23_min(kN/m),Q13_max(kN/m),Q13_min(kN/m),M11_max(kNm/m),M11_min(kNm/m),M12_max(kNm/m),M12_min(kNm/m),M22_max(kNm/m),M22_min(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Plate results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Z , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialIndex , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) # movement envelopes not reported in PLaxis3d 2023 # Ux_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UxMin, 'node') # Ux_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UxMax, 'node') # Uy_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UyMin, 'node') # Uy_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UyMax, 'node') # Uz_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UzMin, 'node') # Uz_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UzMax, 'node') # Ut_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.UtotMax, 'node') # PUx_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUxMin, 'node') # PUx_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUxMax, 'node') # PUy_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUyMin, 'node') # PUy_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUyMax, 'node') # PUz_min = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUzMin, 'node') # PUz_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUzMax, 'node') # PUt_max = self.g_o.getresults(phase, self.g_o.ResultTypes.Plate.PUtotMax, 'node') N11_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11_EnvelopeMax , 'node' ) N11_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11_EnvelopeMin , 'node' ) N22_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22_EnvelopeMax , 'node' ) N22_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22_EnvelopeMin , 'node' ) Q12_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12_EnvelopeMax , 'node' ) Q12_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12_EnvelopeMin , 'node' ) Q13_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13_EnvelopeMax , 'node' ) Q13_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13_EnvelopeMin , 'node' ) Q23_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23_EnvelopeMax , 'node' ) Q23_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23_EnvelopeMin , 'node' ) M11_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11_EnvelopeMax , 'node' ) M11_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11_EnvelopeMin , 'node' ) M22_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22_EnvelopeMax , 'node' ) M22_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22_EnvelopeMin , 'node' ) M12_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12_EnvelopeMax , 'node' ) M12_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12_EnvelopeMin , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) # with movements # w.rowsOut = [formats.format(pname, pident, x, y, z, material, element, ux_max, ux_min, uy_max, uy_min, uz_max, uz_min, ut_max, pux_max, pux_min, puy_max, puy_min, puz_max, puz_min, put_max, n11_max, n11_min, n22_max, n22_min, q12_max, q12_min, q23_max, q23_min, q13_max, q13_min, m11_max, m11_min, m12_max, m12_min, m22_max, m22_min) # for pname, pident, x, y, z, material, element, ux_max, ux_min, uy_max, uy_min, uz_max, uz_min, ut_max, pux_max, pux_min, puy_max, puy_min, puz_max, puz_min, put_max, n11_max, n11_min, n22_max, n22_min, q12_max, q12_min, q23_max, q23_min, q13_max, q13_min, m11_max, m11_min, m12_max, m12_min, m22_max, m22_min in # zip(phaseName, phaseIdent, X, Y, Z, Material, Element, Ux_max, Ux_min, Uy_max, Uy_min, Uz_max, Uz_min, Ut_max, PUx_max, PUx_min, PUy_max, PUy_min, PUz_max, PUz_min, PUt_max, N11_max, N11_min, N22_max, N22_min, Q12_max, Q12_min, Q23_min, Q23_min, Q13_max, Q13_min, M11_max, M11_min, M12_max, M12_min, M22_max, M22_min)] # without movements w . rowsOut = [ formats . format ( pname , pident , x , y , z , material , element , n11_max , n11_min , n22_max , n22_min , q12_max , q12_min , q23_max , q23_min , q13_max , q13_min , m11_max , m11_min , m12_max , m12_min , m22_max , m22_min ) for pname , pident , x , y , z , material , element , n11_max , n11_min , n22_max , n22_min , q12_max , q12_min , q23_max , q23_min , q13_max , q13_min , m11_max , m11_min , m12_max , m12_min , m22_max , m22_min in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , N11_max , N11_min , N22_max , N22_min , Q12_max , Q12_min , Q23_max , Q23_min , Q13_max , Q13_min , M11_max , M11_min , M12_max , M12_min , M22_max , M22_min )] w . writeOutput () except Exception as e : print ( 'Exception reading PlateEnvelopeResults in phase' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading PlateEnvelope results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getPlateEnvelopeResults()' ) return Status . ELEMENT_PROCESSED","title":"Plaxis3dResults2023"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.Plaxis3dResultsConnect","text":"Bases: Plaxis3dResults2018 Source code in src\\ge_lib\\plaxis\\Plaxis3dResultsConnect.pyclass Plaxis3dResultsConnect ( Plaxis3dResults2018 ): def __init__ ( self , server = None , host = None , port = None , password = None ): super ( Plaxis3dResultsConnect , self ) . __init__ ( server , host , port , password ) def version ( self ): return \"Plaxis3dConnect\" def getEmbeddedBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_EmbeddedBeam.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getEmbeddedBeamResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,ElementID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN),Q12(kN),Q13(kN),M2(kNm),M3(kNm),Tskin(kN/m),Tlat(kN/m),Tlat2(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting EmbeddedBeam results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Z , 'node' ) #print('Retrieved U') Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Utot , 'node' ) #print('Retrieved U') PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . PUtot , 'node' ) #print('Retrieved dU') U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . U3 , 'node' ) #print('Retrieved U1-U3') N = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . N , 'node' ) Q12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q12 , 'node' ) Q13 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Q13 , 'node' ) M2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M2 , 'node' ) M3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . M3 , 'node' ) #print('Retrieved N') Tskin = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tskin , 'node' ) Tlat = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat , 'node' ) Tlat2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . EmbeddedBeam . Tlat2 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 , tskin , tlat , tlat2 in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , N , Q12 , Q13 , M2 , M3 , Tskin , Tlat , Tlat2 )] w . writeOutput () msg = 'Retreived EmbeddedBeam results for ' + phase . Name . value + '(embeddedbeam-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading EnbeddedBeam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading EmbeddedBeam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getEmbeddedBeamResults()' ) return Status . ELEMENT_PROCESSED def getPlateResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID, ElementID, Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N1(kN/m),N2(kN/m),Q12(kN/m),Q23(kN/m),Q13(kN/m),M11(kNm/m),M22(kNm/m),M12(kNm/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Plate results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Z , 'node' ) Material = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . U3 , 'node' ) N11 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11 , 'node' ) N22 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22 , 'node' ) Q12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12 , 'node' ) Q23 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23 , 'node' ) Q13 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13 , 'node' ) M11 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11 , 'node' ) M22 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22 , 'node' ) M12 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 ) for pname , pident , x , y , z , mat , el , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n1 , n2 , q12 , q23 , q13 , m11 , m22 , m12 in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , N11 , N22 , Q12 , Q23 , Q13 , M11 , M22 , M12 )] w . writeOutput () except Exception as e : print ( 'Exception reading Plate in phase' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading Plate results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getPlateResults()' ) return Status . ELEMENT_PROCESSED def getBeamResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getBeamResults' columns = 'Phase,PhaseIdent,MaterialID,ElementID,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),N(kN/m),Q12(kN/m),Q13(kN/m),M2(kNm/m),M3(kNm/m)' formats = ' {} , {} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting Beam results for Phase ' , phase . Name . value , phase . Identification . value ) try : beamMat = self . g_o . getresults ( phase , self . g_o . Beam . MaterialID , 'node' ) beamEl = self . g_o . getresults ( phase , self . g_o . Beam . ElementID , 'node' ) beamX = self . g_o . getresults ( phase , self . g_o . Beam . X , 'node' ) beamY = self . g_o . getresults ( phase , self . g_o . Beam . Y , 'node' ) beamZ = self . g_o . getresults ( phase , self . g_o . Beam . Z , 'node' ) beamUx = self . g_o . getresults ( phase , self . g_o . Beam . Ux , 'node' ) beamUy = self . g_o . getresults ( phase , self . g_o . Beam . Uy , 'node' ) beamUz = self . g_o . getresults ( phase , self . g_o . Beam . Uz , 'node' ) beamUt = self . g_o . getresults ( phase , self . g_o . Beam . Utot , 'node' ) beamPUx = self . g_o . getresults ( phase , self . g_o . Beam . PUx , 'node' ) beamPUy = self . g_o . getresults ( phase , self . g_o . Beam . PUy , 'node' ) beamPUz = self . g_o . getresults ( phase , self . g_o . Beam . PUz , 'node' ) beamPUt = self . g_o . getresults ( phase , self . g_o . Beam . PUtot , 'node' ) beamU1 = self . g_o . getresults ( phase , self . g_o . Beam . U1 , 'node' ) beamU2 = self . g_o . getresults ( phase , self . g_o . Beam . U2 , 'node' ) beamU3 = self . g_o . getresults ( phase , self . g_o . Beam . U3 , 'node' ) beamN = self . g_o . getresults ( phase , self . g_o . Beam . N , 'node' ) beamQ12 = self . g_o . getresults ( phase , self . g_o . Beam . Q12 , 'node' ) beamQ13 = self . g_o . getresults ( phase , self . g_o . Beam . Q13 , 'node' ) beamM2 = self . g_o . getresults ( phase , self . g_o . Beam . M2 , 'node' ) beamM3 = self . g_o . getresults ( phase , self . g_o . Beam . M3 , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 ) for pname , pident , mat , el , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , n , q12 , q13 , m2 , m3 in zip ( phaseName , phaseIdent , beamMat , beamEl , beamX , beamY , beamZ , beamUx , beamUy , beamUz , beamUt , beamPUx , beamPUy , beamPUz , beamPUt , beamU1 , beamU2 , beamU3 , beamN , beamQ12 , beamQ13 , beamM2 , beamM3 )] w . writeOutput () msg = 'Retreived Beam results for ' + phase . Name . value + '(beam-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading Beam results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Beam results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getBeamResults()' ) return Status . ELEMENT_PROCESSED def getSoilResultsByPoints_Displacements ( self , filePoints = None , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if not filePoints is None : self . loadXYZNodeList ( filePoints ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getSoilResultsByPoints_Displacements' columns = 'Phase,PhaseIdent,locName,locX(m),locY(m),locZ(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),Epsxx,Epsyy,Epszz' formats = ' {} , {} , {} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} , {:f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : phaseName = phase . Name . value phaseIdent = phase . Identification . value for pt in self . NodeList : try : ux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Ux , ( pt . x , pt . y , pt . z )) uy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uy , ( pt . x , pt . y , pt . z )) uz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Uz , ( pt . x , pt . y , pt . z )) utot = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Utot , ( pt . x , pt . y , pt . z )) pux = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUx , ( pt . x , pt . y , pt . z )) puy = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUy , ( pt . x , pt . y , pt . z )) puz = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUz , ( pt . x , pt . y , pt . z )) putot = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . PUtot , ( pt . x , pt . y , pt . z )) ex = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epsxx , ( pt . x , pt . y , pt . z )) ey = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epsyy , ( pt . x , pt . y , pt . z )) ez = self . g_o . getsingleresult ( phase , self . g_o . ResultTypes . Soil . Epszz , ( pt . x , pt . y , pt . z )) w . rowsOut = [ formats . format ( phaseName , phaseIdent , pt . locname , float ( pt . x ), float ( pt . y ), float ( pt . z ), float ( ux ), float ( uy ), float ( uz ), float ( utot ), float ( pux ), float ( puy ), float ( puz ), float ( putot ), float ( ex ), float ( ey ), float ( ez ))] w . writeOutput () except Exception as e : msg = '...exception reading SoilResultsByPoints_Displacements results ' + phase . Identification . value print ( msg ) self . logger . error ( msg + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting SoilResultsByPoints_Displacements()' ) return Status . ELEMENT_PROCESSED def getInterfaceResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_Interface.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getInterfaceResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID,Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUt(m),U1(m),U2(m),U3(m),Eff NormalStress (kPa),Tot Normal Stress (kPa),Shear Stress (kPa),Rel Shear Stress (kPa),Excess Porewater (kPa),Active Porewater (kPa),Steady Porewater (kPa),Suction Porewater (kPa),Porewater (kPa),Effective Suction Porewater (kPa)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Interface results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Z , 'node' ) Mat = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . MaterialID , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . U3 , 'node' ) InterfaceEffNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceEffectiveNormalStress , 'node' ) InterfaceTotNormalStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceTotalNormalStress , 'node' ) InterfaceShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceShearStress , 'node' ) InterfaceRelShearStress = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . InterfaceRelativeShearStress , 'node' ) PExcess = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PExcess , 'node' ) PActive = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PActive , 'node' ) PSteady = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PSteady , 'node' ) PWater = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . PWater , 'node' ) Suction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . Suction , 'node' ) EffSuction = self . g_o . getresults ( phase , self . g_o . ResultTypes . Interface . EffSuction , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu ) for pname , pident , x , y , z , mat , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , ens , tns , ss , rss , pe , pa , pst , pw , su , esu in zip ( phaseName , phaseIdent , X , Y , Z , Mat , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , InterfaceEffNormalStress , InterfaceTotNormalStress , InterfaceShearStress , InterfaceRelShearStress , PExcess , PActive , PSteady , PWater , Suction , EffSuction )] w . writeOutput msg = 'Retreived Interface results for ' + phase . Name . value + '(interface-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading interface results in phase' + phase . Name . value ) self . logger . error ( '...exception reading Interface results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getInterfaceResults()' ) return Status . ELEMENT_PROCESSED def getNodeToNodeAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): #file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_NodeToNodeAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getNodeToNodeAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting NodeToNodeAnchor results for Phase ' , phase . Name . value , phase . Identification . value ) try : X = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Z , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . U3 , 'node' ) Force3D = self . g_o . getresults ( phase , self . g_o . NodeToNodeAnchor . AnchorForce3D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( phaseName , phaseIdent , X , Y , Z , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , Force3D )] w . writeOutput msg = 'Retreived Node2NodeAnchor results for ' + phase . Name . value + '(nodetonodeanchor-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading node2nodeanchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading node2nodeanchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getNode2NodeAnchoreResults()' ) return Status . ELEMENT_PROCESSED def getFixedEndAnchorResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): # file:///C:/Program%20Files/Plaxis/PLAXIS%203D/manuals/english/output_objects/objects_FixedEndAnchor.html self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getFixedEndAnchorResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),Ux(m),Uy(m),Uz(m),Utot(m),PUx(m),PUy(m),PUz(m),PUtot(m),U1(m),U2(m),U3(m),N(kN)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : print ( 'Getting FixedEndAnchor results for ' , phase . Name . value ) try : X = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Z , 'node' ) Ux = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Ux , 'node' ) Uy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Uy , 'node' ) Uz = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Uz , 'node' ) Ut = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . Utot , 'node' ) PUx = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUx , 'node' ) PUy = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUy , 'node' ) PUz = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUz , 'node' ) PUt = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . PUtot , 'node' ) U1 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U1 , 'node' ) U2 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U2 , 'node' ) U3 = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . U3 , 'node' ) Force3D = self . g_o . getresults ( phase , self . g_o . FixedEndAnchor . AnchorForce3D , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d ) for pname , pident , x , y , z , ux , uy , uz , ut , pux , puy , puz , put , u1 , u2 , u3 , f3d in zip ( phaseName , phaseIdent , X , Y , Z , Ux , Uy , Uz , Ut , PUx , PUy , PUz , PUt , U1 , U2 , U3 , Force3D )] w . writeOutput msg = 'Retreived FixedEndAnchor results for ' + phase . Name . value + '(nodetonodeanchor-' + phase . Identification . value + ')' print ( msg ) self . logger . info ( msg ) except Exception as e : print ( 'Exception reading fixedendanchor results in phase' + phase . Name . value ) self . logger . error ( '...exception reading node2nodeanchor results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getFixedEndAnchoreResults()' ) return Status . ELEMENT_PROCESSED def getPlateEnvelopeResults ( self , fileOut = None , tableOut = None , sphaseOrder = None , sphaseStart = None , sphaseEnd = None , mode = 'new' ): self . setPhaseOrder ( sphaseOrder , sphaseStart , sphaseEnd ) if self . phaseOrder is None : print ( 'No phases found for results' ) return - 1 if ( self . IsDbFile ( fileOut ) and not tableOut ): tableOut = 'getPlateEnvelopeResults' columns = 'Phase,PhaseIdent,X(m),Y(m),Z(m),MaterialID, ElementID, Ux_max(m),Ux_min(m),Uy_max(m),Uy_min(m),Uz_max(m),Uz_min(m),Utot_max(m),PUx_max(m),PUx_min(m),PUy_max(m),PUy_min(m),PUz_max(m),PUz_min(m),PUt_max(m),N11_max(kN/m),N11_min(kN/m),N22_max(kN/m),N22_max(kN/m),Q12_max(kN/m),Q12_min(kN/m),Q23_max(kN/m),Q23_min(kN/m),Q13_max(kN/m),Q13_min(kN/m),M11_max(kNm/m),M11_min(kNm/m),M12_max(kNm/m),M12_min(kNm/m),M22_max(kNm/m),M22_min(kN/m)' formats = ' {} , {} , {:2f} , {:2f} , {:2f} , {:0} , {:0} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} , {:2f} ' w = GetWriter ( fileOut , tableOut , columns , formats , self . logger , mode ) print ( 'FileOut=' , w . fileOut ) for phase in self . phaseOrder : msg = 'Getting Plate results for {0} ( {1} )' . format ( phase . Name . value , phase . Identification . value ) print ( msg ) self . logger . info ( msg ) try : X = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . X , 'node' ) Y = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Y , 'node' ) Z = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Z , 'node' ) Materal = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . MaterialID , 'node' ) Element = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . ElementID , 'node' ) Ux_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMin , 'node' ) Ux_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UxMax , 'node' ) Uy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMin , 'node' ) Uy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UyMax , 'node' ) Uz_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UzMin , 'node' ) Uz_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UzMax , 'node' ) Ut_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . UtotMax , 'node' ) PUx_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMin , 'node' ) PUx_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUxMax , 'node' ) PUy_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMin , 'node' ) PUy_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUyMax , 'node' ) PUz_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUzMin , 'node' ) PUz_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUzMax , 'node' ) PUt_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . PUtotMax , 'node' ) N11_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11_EnvelopeMax , 'node' ) N11_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N11_EnvelopeMin , 'node' ) N22_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22_EnvelopeMax , 'node' ) N22_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . N22_EnvelopeMin , 'node' ) Q12_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12_EnvelopeMax , 'node' ) Q12_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q12_EnvelopeMin , 'node' ) Q13_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13_EnvelopeMax , 'node' ) Q13_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q13_EnvelopeMin , 'node' ) Q23_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23_EnvelopeMax , 'node' ) Q23_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . Q23_EnvelopeMin , 'node' ) M11_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11_EnvelopeMax , 'node' ) M11_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M11_EnvelopeMin , 'node' ) M22_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22_EnvelopeMax , 'node' ) M22_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M22_EnvelopeMin , 'node' ) M12_max = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12_EnvelopeMax , 'node' ) M12_min = self . g_o . getresults ( phase , self . g_o . ResultTypes . Plate . M12_EnvelopeMin , 'node' ) phaseName = [] phaseIdent = [] for x in range ( len ( X )): phaseName . append ( phase . Name . value ) phaseIdent . append ( phase . Identification . value ) w . rowsOut = [ formats . format ( pname , pident , x , y , z , material , element , ux_max , ux_min , uy_max , uy_min , uz_max , uz_min , ut_max , pux_max , pux_min , puy_max , puy_min , puz_max , puz_min , put_max , n11_max , n11_min , n22_max , n22_min , q12_max , q12_min , q23_max , q23_min , q13_max , q13_min , m11_max , m11_min , m12_max , m12_min , m22_max , m22_min ) for pname , pident , x , y , z , material , element , ux_max , ux_min , uy_max , uy_min , uz_max , uz_min , ut_max , pux_max , pux_min , puy_max , puy_min , puz_max , puz_min , put_max , n11_max , n11_min , n22_max , n22_min , q12_max , q12_min , q23_max , q23_min , q13_max , q13_min , m11_max , m11_min , m12_max , m12_min , m22_max , m22_min in zip ( phaseName , phaseIdent , X , Y , Z , Material , Element , Ux_max , Ux_min , Uy_max , Uy_min , Uz_max , Uz_min , Ut_max , PUx_max , PUx_min , PUy_max , PUy_min , PUz_max , PUz_min , PUt_max , N11_max , N11_min , N22_max , N22_min , Q12_max , Q12_min , Q23_min , Q23_min , Q13_max , Q13_min , M11_max , M11_min , M12_max , M12_min , M22_max , M22_min )] w . writeOutput () except Exception as e : print ( 'Exception reading PlateEnvelopeResults in phase' + phase . Identification . value + str ( e )) self . logger . error ( '...exception reading PlateEnvelope results ' + str ( e )) if not self . is_connected (): print ( 'Connection lost ' ) self . logger . error ( 'Connection lost ' ) return Status . CONNECTION_LOST print ( 'Exiting getPlateEnvelopeResults()' ) return Status . ELEMENT_PROCESSED","title":"Plaxis3dResultsConnect"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.PlaxisScripting","text":"Bases: object Source code in src\\ge_lib\\plaxis\\PlaxisScripting.pyclass PlaxisScripting ( object ): def __init__ ( self , ps = None , host = None , port = None , password = None , task_log = None , plx_log = None ): print ( 'getting Connected...' ) if ps is None : if password is None : password = '' self . s_o , self . g_o = new_server ( address = host , port = port , timeout = TIMEOUT , request_timeout = REQUEST_TIMEOUT , password = password ) if task_log is not None : if _is_file_like ( task_log ): hdlr = logging . StreamHandler ( task_log ) else : hdlr = logging . FileHandler ( task_log ) else : hdlr = logging . StreamHandler () formatter = logging . Formatter ( ' %(asctime)s %(levelname)s %(message)s ' ) hdlr . setFormatter ( formatter ) self . logger = logging . getLogger ( host + '_PlaxisResults' ) self . logger . addHandler ( hdlr ) self . logger . setLevel ( logging . INFO ) if plx_log is not None : if _is_file_like ( plx_log ): self . s_o . enable_logging ( buffer = plx_log ) else : self . s_o . enable_logging ( path = plx_log ) if ( self . s_o . is_2d is False and self . s_o . is_3d is False ): print ( '..no connection' ) raise ValueError ( \"Not Connected\" ) else : print ( 'Connected:' , host , port , self . s_o . name , self . s_o . major_version , self . s_o . minor_version , 'Is2d=' , self . s_o . is_2d , 'Is3d=' , self . s_o . is_3d ) self . NodeList = [] else : self . s_o = ps . s_o self . g_o = ps . g_o self . logger = ps . logger self . NodeList = ps . NodeList def match ( self , ** kwargs ): return all ( getattr ( self , key ) == val for ( key , val ) in kwargs . items ()) def connect ( self , host , port , password ): self . s_o , self . g_o = new_server ( address = host , port = port , password = password ) print ( 'Connected:' , host , port , self . s_o . name , self . s_o . major_version , self . s_o . minor_version , 'Is2d=' , self . s_o . is_2d , 'Is3d=' , self . s_o . is_3d ) def is_connected ( self ): if ( self . s_o is not None ): return self . s_o . active return False def clearNodeList ( self ): self . NodeList = [] def printNodeListXYZ ( self ): formats = ' {} , {:.3f} , {:.3f} , {:.3f} ' for point in self . NodeList : print ( formats . format ( point . name , point . x , point . y , point . z )) # print(point.name, point.x, point.y, point.z) class PointXY ( object ): def __init__ ( self , name , x , y ): self . name = name self . x = float ( x ) self . y = float ( y ) self . coord = ' {0:.3f} , {1:.3f} ' . format ( float ( x ), float ( y )) class PointXYZ ( object ): def __init__ ( self , name , x , y , z ): self . name = name self . x = float ( x ) self . y = float ( y ) self . z = float ( z ) self . coord = ' {0:.3f} , {1:.3f} , {2:.3f} ' . format ( float ( x ), float ( y ), float ( z )) def is_number ( self , s ): try : float ( s ) return True except ValueError : return False def isfloat ( self , s , value_false ): try : if s == 'NaN' : return value_false if s == 'not found' : return value_false else : f = float ( s ) print ( 'float:' , f ) return f except ValueError : return value_false def getPhaseList ( self ): # return [ph for ph in self.gi.phases phases = [] for phase in self . g_o . Phases : phases . append ( phase . Name . value ) return phases def getPhaseInt ( self , phaseName ): count = 0 print ( 'looking for phase:' + phaseName ) for phase in self . g_o . Phases : if phase . Name . value == phaseName : print ( 'found...' , count ) return count count += 1 return - 1 def setSteps2 ( self , phase ): self . Steps = [] steps = phase [:] accessed_mapping = map ( steps . __getitem__ , self . StepList ) self . Steps = list ( accessed_mapping ) def setSteps ( self , phase ): self . Steps = [] print ( \" {0} finding selected steps {1} \" . format ( phase . Name . value , self . g_o . count ( phase . Steps ))) steps = phase [:] print ( \" {} \" . format ( len ( steps ))) for step in steps : print ( \" {} \" . format ( step )) if not self . StepList or step in self . StepList : self . Steps . append ( step ) print ( \"Added {0} {1} \" . format ( step . Name , step )) def setOutput ( self , fileOut , tableOut , columns , formats ): self . fileOut = fileOut self . tableOut = tableOut self . rowsOut = [] self . getConnected ( fileOut ) self . createTable ( tableOut , columns , formats ) if ( fileOut != None and tableOut == None ): columns += ' \\n ' formats += ' \\n ' def writeOutput ( self , clear = True ): print ( 'Outputting rows to file ' , self . fileOut , '....' ) with open ( self . fileOut , \"w\" ) as fp : fp . write ( \" \\n \" . join ( str ( row ) for row in self . rowsOut )) if ( clear == True ): self . rowsOut = [] def setPhaseOrder ( self , sphaseOrder = None , sphaseStart = None , sphaseEnd = None ): self . phaseOrder = [] if sphaseOrder == 'All' : sphaseOrder = None if sphaseOrder is None : if sphaseStart is None and sphaseEnd is None : self . phaseOrder = self . g_o . Phases [:] if self . phaseOrder is not None : print ( 'All phases added to phaseOrder' ) if sphaseStart is None and sphaseEnd is not None : id = self . getPhaseInt ( sphaseEnd ) self . phaseOrder = self . g_o . Phases [: id ] if self . phaseOrder is not None : print ( 'All phases up to' , sphaseEnd , ' added' ) if sphaseStart is not None and sphaseEnd is None : id = self . getPhaseInt ( phaseName = sphaseStart ) self . phaseOrder = self . g_o . Phases [ id :] if self . phaseOrder is not None : print ( 'All phases from ' , sphaseStart , ' added' ) if sphaseStart is not None and sphaseEnd is not None : id = self . getPhaseInt ( sphaseStart ) id2 = self . getPhaseInt ( sphaseEnd ) self . phaseOrder = self . g_o . Phases [ id : id2 + 1 ] if self . phaseOrder is not None : print ( 'All phases from ' , sphaseStart , ' to ' , sphaseEnd , ' added' ) if sphaseOrder is not None : aphaseOrder = sphaseOrder . split ( \",\" ) for sphase in aphaseOrder : id = self . getPhaseInt ( sphase ) self . phaseOrder . append ( self . g_o . Phases [ id ]) print ( 'phase:' , sphase , ' added' ) if self . phaseOrder is not None : print ( 'phaseOrder initialised with' , len ( self . phaseOrder ) , ' no. phases' ) def setRange ( self , xMin = None , xMax = None , yMin = None , yMax = None , zMin = None , zMax = None ): global g_xMin , g_xMax , g_yMin , g_yMax , g_zMin , g_zMax g_xMin = xMin g_xMax = xMax g_yMin = yMin g_yMax = yMax g_zMin = zMin g_zMax = zMax def printRange ( self ): print ( 'g_xMin' , g_xMin , 'g_xMax' , g_xMax , 'g_yMin' , g_yMin , 'g_yMax' , g_yMax ,) def inRange ( self , x_val = None , y_val = None , z_val = None ): xMinRangeOk = True xMaxRangeOk = True yMinRangeOk = True yMaxRangeOk = True zMinRangeOk = True zMaxRangeOk = True # self.printRange() # print ('x_val', x_val, # 'y_val', y_val) if g_xMin is not None and x_val is not None : if x_val >= g_xMin : xMinRangeOk = True else : xMinRangeOk = False else : xMinRangeOk = True if g_yMin is not None and y_val is not None : if y_val >= g_yMin : yMinRangeOk = True else : yMinRangeOk = False else : yMinRangeOk = True if g_xMax is not None and x_val is not None : if x_val <= g_xMax : xMaxRangeOk = True else : xMaxRangeOk = False else : xMaxRangeOk = True if g_yMax is not None and y_val is not None : if y_val <= g_yMax : yMaxRangeOk = True else : yMaxRangeOk = False else : yMaxRangeOk = True if g_zMax is not None and z_val is not None : if z_val <= g_zMax : zMaxRangeOk = True else : zMaxRangeOk = False else : zMaxRangeOk = True if g_zMin is not None and z_val is not None : if z_val >= g_zMin : zMinRangeOk = True else : zMinRangeOk = False else : zMinRangeOk = True if xMinRangeOk and xMaxRangeOk and yMinRangeOk and yMaxRangeOk and zMinRangeOk and zMaxRangeOk : # print ('inRange x_val', x_val, # 'y_val', y_val) return True else : return False def setXYZNodeList ( self , xMin = 0.0 , xMax = 0.0 , yMin = 0.0 , yMax = 0.0 , zMin = 0.0 , zMax = 0.0 ): phase = self . phaseOrder [ 0 ] count = 0 self . setRange ( xMin , xMax , yMin , yMax , zMin , zMax ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) soilZ = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Z , 'node' ) print ( 'Coordinates retrieved for Phase ' , phase . Name . value ) for x , y , z in zip ( soilX , soilY , soilZ ): if self . inRange ( x_val = x , y_val = y , z_val = z ) == True : count = count + 1 self . NodeList . append ( self . PointXYZ ( count , x , y , z )) print ( 'Added node at (' , x , y , z , ')' ) print ( len ( self . NodeList ), ' nodes added to NodeList' ) def setXYZNodeList2 ( self , xMin = 0.0 , xMax = 0.0 , yMin = 0.0 , yMax = 0.0 , zMin = 0.0 , zMax = 0.0 ): phase = self . phaseOrder [ 0 ] count = 0 self . setRange ( xMin , xMax , yMin , yMax , zMin , zMax ) soilN = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . NodeID , 'node' ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) soilZ = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Z , 'node' ) print ( 'Coordinates retrieved for Phase ' , phase . Name . value ) for x , y , z , n in zip ( soilX , soilY , soilZ , soilN ): if self . inRange ( x_val = x , y_val = y , z_val = z ) == True : count = count + 1 self . NodeList . append ( self . PointXYZ ( n , x , y , z )) print ( 'Added node ' , n , ' at (' , x , y , z , ')' ) print ( len ( self . NodeList ), ' nodes added to NodeList' ) def setXYNodeList ( self , xMin = 0.0 , xMax = 0.0 , yMin = 0.0 , yMax = 0.0 ): phase = self . phaseOrder [ 0 ] count = 0 self . setRange ( xMin , xMax , yMin , yMax , zMin = None , zMax = None ) soilX = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . X , 'node' ) soilY = self . g_o . getresults ( phase , self . g_o . ResultTypes . Soil . Y , 'node' ) print ( 'Coordinates retrieved for Phase ' , phase . Name . value ) for x , y in zip ( soilX , soilY ): if self . inRange ( x_val = x , y_val = y , z_val = None ) == True : count = count + 1 self . NodeList . append ( self . PointXY ( count , x , y )) print ( 'Added node at (' , x , y , ')' ) print ( len ( self . NodeList ), ' nodes added to NodeList' ) def addXYNode ( self , name , x = 0.0 , y = 0.0 ): self . NodeList . append ( self . PointXY ( name , x , y )) print ( 'Added node at (' , name , x , y , ')' ) def addXYZNode ( self , name , x = 0.0 , y = 0.0 , z = 0.0 ): self . NodeList . append ( self . PointXYZ ( name , x , y )) print ( 'Added node at (' , name , x , y , z , ')' ) def createXYArc ( self , name = None , xCen = 0.00 , yCen = 0.00 , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 ): ref = name count = 0 arc_array = [] x = 0.0 y = 0.0 arc_array = self . getArcCoordsArray ( xCen , yCen , rad , degStart , degEnd , degStep ) for coord in arc_array : x , y = coord self . NodeList . append ( self . PointXY ( name , x , y )) print ( 'Added node at (' , name , x , y , ')' ) def createXYZArc_XYPlane ( self , name = None , xCen = 0.00 , yCen = 0.00 , zCen = 0.00 , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 ): ref = name count = 0 arc_array = [] x = 0.0 z = 0.0 arc_array = self . getArcCoordsArray ( xCen , yCen , rad , degStart , degEnd , degStep ) for coord in arc_array : x , y = coord self . NodeList . append ( self . PointXYZ ( name , x , y , zCen )) print ( 'Added node at (' , name , x , y , zCen , ')' ) def createXYZArc_XZPlane ( self , name = None , xCen = 0.00 , yCen = 0.00 , zCen = 0.00 , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 ): ref = name count = 0 arc_array = [] x = 0.0 z = 0.0 arc_array = self . getArcCoordsArray ( xCen , zCen , rad , degStart , degEnd , degStep ) for coord in arc_array : x , z = coord self . NodeList . append ( self . PointXYZ ( name , x , yCen , z )) print ( 'Added node at (' , name , x , yCen , z , ')' ) def createXYZArc_YZPlane ( self , name = None , xCen = 0.00 , yCen = 0.00 , zCen = 0.00 , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 ): ref = name count = 0 arc_array = [] y = 0.0 z = 0.0 arc_array = self . getArcCoordsArray ( yCen , zCen , rad , degStart , degEnd , degStep ) for coord in arc_array : y , z = coord self . NodeList . append ( self . PointXYZ ( name , xCen , y , z )) print ( 'Added node at (' , name , xCen , y , z , ')' ) def getArcCoordsArray ( self , iCen = 0.00 , jCen = 0.00 , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 ): i_coord = 0.0 j_coord = 0.0 coords = [] # direction vector for 0 degree (j=1; i=0) # diection vector for 90 degree (j=0, i=1) deg = degStart while ( deg < degEnd ): i_coord = iCen + rad * math . sin ( math . radians ( deg )) j_coord = jCen + rad * math . cos ( math . radians ( deg )) coord = ( i_coord , j_coord ) coords . append ( coord ) deg = deg + degStep return coords ; def createXYZCylinder ( self , name = None , rad = 0.00 , degStart = 0.00 , degEnd = 0.00 , degStep = 0.00 , xMin = 0.0 , xMax = 0.0 , xStep = 0.0 , yMin = 0.0 , yMax = 0.0 , yStep = 0.0 , zMin = 0.0 , zMax = 0.0 , zStep = 0.0 , ): count = 0 arc_coords = [] x = 0.0 y = 0.0 z = 0.0 if xStep == 0 : xcount = 1 else : xcount = int ( abs (( xMax - xMin ) / xStep ) + 0.1 ) + 1 if yStep == 0 : ycount = 1 else : ycount = int ( abs (( yMax - yMin ) / yStep ) + 0.1 ) + 1 if zStep == 0 : zcount = 1 else : zcount = int ( abs (( zMax - zMin ) / zStep ) + 0.1 ) + 1 if ( ycount == 1 and zcount == 1 ): # cyclinder direction in x axis, arc in zy plane arc_coords = self . getArcCoordsArray ( yMin , zMin , rad , degStart , degEnd , degStep ) if ( xcount == 1 and zcount == 1 ): # cyclinder direction in y axis, arc in zx plane arc_coords = self . getArcCoordsArray ( xMin , zMin , rad , degStart , degEnd , degStep ) if ( xcount == 1 and ycount == 1 ): # cyclinder direction in z axis, arc in xy plane arc_coords = self . getArcCoordsArray ( xMin , yMin , rad , degStart , degEnd , degStep ) for ix in range ( 0 , xcount , 1 ): x = xMin + xStep * ix for iy in range ( 0 , ycount , 1 ): y = yMin + yStep * iy for iz in range ( 0 , zcount , 1 ): z = zMin + zStep * iz if ( ycount == 1 and zcount == 1 ): # cyclinder direction in x axis, arc in zy plane for coord in arc_coords : y_arc , z_arc = coord self . NodeList . append ( self . PointXYZ ( name , x , y_arc , z_arc )) if ( xcount == 1 and zcount == 1 ): # cyclinder direction in y axis, arc in zx plane for coord in arc_coords : x_arc , z_arc = coord self . NodeList . append ( self . PointXYZ ( name , x_arc , y , z_arc )) if ( xcount == 1 and ycount == 1 ): # cyclinder direction in z axis, arc in xy plane for coord in arc_coords : x_arc , y_arc = coord self . NodeList . append ( self . PointXYZ ( name , x_arc , y_arc , z )) def getXYNodeListItem ( self , x , y ): find_coord = \" {0:.3f} , {1:.3f} \" . format ( float ( x ), float ( y )) for p in self . NodeList : # print (p.coord, find_coord) if ( p . coord == find_coord ): return p return None def createXYZGrid ( self , name = None , xMin = 0.0 , xMax = 0.0 , xStep = 0.0 , yMin = 0.0 , yMax = 0.0 , yStep = 0.0 , zMin = 0.0 , zMax = 0.0 , zStep = 0.0 , ): ref = name count = 0 x = 0.0 y = 0.0 z = 0.0 if xStep == 0 : xcount = 1 else : xcount = int ( abs (( xMax - xMin ) / xStep ) + 0.1 ) + 1 if yStep == 0 : ycount = 1 else : ycount = int ( abs (( yMax - yMin ) / yStep ) + 0.1 ) + 1 if zStep == 0 : zcount = 1 else : zcount = int ( abs (( zMax - zMin ) / zStep ) + 0.1 ) + 1 # print ('array size(', xcount, ycount, zcount, ')') self . setRange ( xMin , xMax , yMin , yMax , zMin , zMax ) for ix in range ( 0 , xcount , 1 ): x = xMin + xStep * ix for iy in range ( 0 , ycount , 1 ): y = yMin + yStep * iy for iz in range ( 0 , zcount , 1 ): z = zMin + zStep * iz count = count + 1 if name is None : ref = count self . NodeList . append ( self . PointXYZ ( ref , x , y , z )) # print ('Added node at (', x, y, z, ')') def createXYGrid ( self , name = None , xMin = 0.0 , xMax = 0.0 , xStep = 0.0 , yMin = 0.0 , yMax = 0.0 , yStep = 0.0 ): count = 0 ix = 0 iy = 0 x = 0.0 y = 0.0 self . setRange ( xMin , xMax , yMin , yMax ) if xStep == 0 : xcount = 1 else : xcount = int ( abs (( xMax - xMin ) / xStep ) + 0.1 ) + 1 if yStep == 0 : ycount = 1 else : ycount = int ( abs (( yMax - yMin ) / yStep ) + 0.1 ) + 1 for ix in range ( 1 , xcount , 1 ): x = xMin + xStep * ix for iy in range ( 1 , ycount , 1 ): y = yMin + yStep * iy count = count + 1 if name is None : ref = count self . NodeList . append ( self . PointXY ( ref , x , y )) print ( 'Added node at (' , x , y , ')' ) def loadXYZNodeList ( self , fileIn , append = False ): fpoint = open ( fileIn , \"r\" ) if ( append == False ): self . NodeList = [] while True : in_line = fpoint . readline () if in_line == \"\" : break if ',' in in_line : [ name , nx , ny , nz ] = in_line . split ( ',' ) if self . is_number ( nx ): if self . is_number ( ny ): if self . is_number ( nz ): self . NodeList . append ( self . PointXYZ ( name , nx , ny , nz )) print ( 'Node Added {} , {:3f} , {:3f} , {:3f} ' . format ( name , float ( nx ), float ( ny ), float ( nz ))) fpoint . close () def loadXYNodeList ( self , fileIn , append = False ): fpoint = open ( fileIn , \"r\" ) if ( append == False ): self . NodeList = [] while True : in_line = fpoint . readline () if in_line == \"\" : break if ',' in in_line : [ name , nx , ny ] = in_line . split ( ',' ) if self . is_number ( nx ): if self . is_number ( ny ): self . NodeList . append ( self . PointXY ( name , nx , ny )) print ( 'Node Added {} , {:3f} , {:3f} ' . format ( name , float ( nx ), float ( ny ))) fpoint . close () def loadStepList ( self , fileIn , append = False ): fpoint = open ( fileIn , \"r\" ) if ( append == False ): self . StepList = [] while True : in_line = fpoint . readline () in_line = in_line . replace ( ' \\n ' , '' ) if in_line == \"\" : break self . StepList . append ( int ( in_line )) fpoint . close () def IsDbFile ( self , db_file = None ): retvar = False if ( db_file != None ): if ( db_file [ - 4 :] == '.mdb' ): retvar = True if ( db_file [ - 6 :] == '.accdb' ): retvar = True return retvar def getConnected ( self , db_file ): self . conn_string = r 'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=' + db_file + ';' file = '' if ( os . path . isfile ( db_file )): self . conn = pyodbc . connect ( self . conn_string ) print ( 'connecting to existing db:' + db_file ) else : if db_file [ - 6 :] == '.accdb' : file = db_file [: - 6 ] if db_file [ - 4 :] == '.mdb' : file = db_file [: - 4 ] if not file : file = db_file self . conn = pyodbc . win_create_mdb ( file ) print ( 'connecting to new db:' + db_file ) db_file = file + '.mdb' self . db_file = db_file def setFields ( self , fields , formats ): self . columns = fields . split ( ',' ) self . formats = formats . split ( ',' ) self . types = formats . split ( ',' ) for i in range ( len ( self . types )): if ( self . formats [ i ] == ' {:2f} ' ): self . types [ i ] = 'float' if ( self . formats [ i ] == ' {:f} ' ): self . types [ i ] = 'float' if ( self . formats [ i ] == ' {} ' ): self . types [ i ] = 'varchar(255)' if ( self . formats [ i ] == ' {:0} ' ): self . types [ i ] = 'int' if ( self . formats [ i ] == ' {0} ' ): self . types [ i ] = 'int' def createTable ( self , tname , fields , formats ): self . tname = tname self . setFields ( fields , formats ) self . sql_insert = 'insert into ' + tname + ' (' self . sql_drop = 'drop table ' + tname self . sql_create = 'create table ' + tname + ' (id autoincrement primary key, ' self . sql_select = 'select ' separator = '' for i in range ( len ( self . columns )): if ( i > 0 ): separator = ', ' self . sql_create += separator + '[' + self . columns [ i ] + '] ' + self . types [ i ] self . sql_insert += separator + '[' + self . columns [ i ] + ']' self . sql_select += separator + '[' + self . columns [ i ] + ']' self . sql_create += ')' self . sql_insert += ')' self . sql_select += ' from ' + tname print ( self . sql_create ) cursor = self . conn . cursor () if ( self . tableExists ( tname )): cursor . execute ( self . sql_drop ) cursor . execute ( self . sql_create ) self . conn . commit () def tableExists ( self , tname ): try : cursor = self . conn . cursor () sql = 'select top 1 * from ' + tname cursor . execute ( sql ) return True except : return False def insertValues ( self , data ): self . sql_data = self . sql_insert + ' values (' separator = '' for i in range ( len ( data )): if ( i > 0 ): separator = ', ' if ( self . types [ i ] . find ( 'varchar' ) >= 0 ): self . sql_data += separator + ' \\' ' + str ( data [ i ]) + ' \\' ' else : self . sql_data += separator + str ( data [ i ]) self . sql_data += ')' cursor = self . conn . cursor () cursor . execute ( self . sql_data ) self . conn . commit ()","title":"PlaxisScripting"},{"location":"plaxis/#ge_lib.plaxis.PlaxisResults.GetPlaxisResults","text":"Source code in src\\ge_lib\\plaxis\\PlaxisResults.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def GetPlaxisResults ( host = None , port = None , password = None , version = None , task_log = None , plx_log = None ): ps = PlaxisScripting ( ps = None , host = host , port = port , password = password , task_log = task_log , plx_log = plx_log ) if ( ps . is_connected == False ): return None if ( version != None ): if version not in versions : version = None if ( version == None ): if ( ps . s_o . is_3d ): if ( ps . s_o . major_version == 2023 ): return Plaxis3dResults2023 ( ps ) if ( ps . s_o . major_version == 22.0 ): return Plaxis3dResultsConnect ( ps ) if ( ps . s_o . major_version == 21.0 ): return Plaxis3dResultsConnect ( ps ) if ( ps . s_o . major_version == 20.0 ): return Plaxis3dResultsConnect ( ps ) if ( ps . s_o . major_version == 9.0 ): return Plaxis3dResults2018 ( ps ) if ( ps . s_o . major_version < 9.0 ): return Plaxis3dResults ( ps ) ## if (ps.s_o.minor_version==1422) if ( ps . s_o . is_2d ): if ( ps . s_o . major_version == 2023 ): return Plaxis2dResults2023 ( ps ) if ( ps . s_o . major_version == 22.0 ): return Plaxis2dResultsConnectV22 ( ps ) if ( ps . s_o . major_version == 21.0 ): return Plaxis2dResultsConnectV2 ( ps ) if ( ps . s_o . major_version == 20.0 ): return Plaxis2dResultsConnectV2 ( ps ) if ( ps . s_o . major_version == 9.0 ): return Plaxis2dResults2019 ( ps ) if ( ps . s_o . major_version == 8.0 ): return Plaxis2dResults2016 ( ps ) return ps else : if ( version == 'Plaxis2d' ): return Plaxis2dResults ( ps ) if ( version == 'Plaxis2d2016' ): return Plaxis2dResults2016 ( ps ) if ( version == 'Plaxis2d2019' ): return Plaxis2dResults2019 ( ps ) if ( version == 'Plaxis2dConnectV2' or version == 'Plaxis2dConnectV21' or version == 'Plaxis2dConnectV20' or version == 'Plaxis2dConnect' ): return Plaxis2dResultsConnectV2 ( ps ) if ( version == 'Plaxis2dConnectV22' ): return Plaxis2dResultsConnectV22 ( ps ) if ( version == 'Plaxis3d' ): return Plaxis3dResults ( ps ) if ( version == 'Plaxis3d2018' ): return Plaxis3dResults2018 ( ps ) if ( version == 'Plaxis3dConnect' ): return Plaxis3dResultsConnect ( ps )","title":"GetPlaxisResults"},{"location":"release-notes/","text":"Release Notes version 0.0.1 14 Feb 2024 version 0.0.2 17 Feb 2024 version 0.0.3 18 Feb 2024 Seismic Motions code replaced with latest modules from Manos","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"version 0.0.1 14 Feb 2024 version 0.0.2 17 Feb 2024 version 0.0.3 18 Feb 2024 Seismic Motions code replaced with latest modules from Manos","title":"Release Notes"},{"location":"setup/","text":"Setting up your machine To use the ground engineering python function library in your applications or to contribute functions to the library itself you will need to set your machine up Install Python Got to https://python.org and download the python version you need. The current ge_lib requires Python 3.7 or later. Install Git Git is a repository that provides collaborative working environment with full version control WINDOWS: https://git-scm.com/download/win LINUX: $ sudo apt-get install git Install Visual Code Go to https://code.visualstudio.com/download to download Microsoft visual code Install Pylance Extension From within code editor add the Pylance extension (CTRL+SHFT+X) (ms-python.vscode-pylance) Create and activate a virtual Environment Having installed the pylance extension from the command menu in visual code(CTRL+SHFT+P) select \"Python:Create Environment\". This will create a .venv folder in your project folder which contains the virtual environment folders. The project specific python version and site-packages will be located here. To activate this environment: WINDOWS: > .venv\\\\scripts\\\\activate LINUX: $ source .venv/bin/activate Installing and using the ge_lib code library Using the function library in your projects you'll need the main (default) branch, this is installed directly from github using pip install git+https://github.com/simon969/ge_lib.git or using the pyPI Python Packaging Index repository pip install ge_lib Maintaining and Contributing to the ge_lib code library The main branch is the default branch of the latest QA/QC version for installing in projects (pip install). As with all evolving work mistakes and errors do occur. While every effort is made to ensure that the library performance correctly, but we cannot always anticipate all the use cases that might occur. Please report any unusual behaviour or suspect results particularly give details of the circumstances under which they have occurred so they can be investigated by the development team. It is only with this constant vigilance that we reduce and minimise error for all users. To contributing to the function library you'll need the development (dev) branch The development (dev) branch is for downloading (pull requests). Amendments and additions are then submitted (merge requests). Periodically the development branch is merged back into the main branch as the next new version","title":"Using the function library"},{"location":"setup/#setting-up-your-machine","text":"To use the ground engineering python function library in your applications or to contribute functions to the library itself you will need to set your machine up Install Python Got to https://python.org and download the python version you need. The current ge_lib requires Python 3.7 or later. Install Git Git is a repository that provides collaborative working environment with full version control WINDOWS: https://git-scm.com/download/win LINUX: $ sudo apt-get install git Install Visual Code Go to https://code.visualstudio.com/download to download Microsoft visual code Install Pylance Extension From within code editor add the Pylance extension (CTRL+SHFT+X) (ms-python.vscode-pylance) Create and activate a virtual Environment Having installed the pylance extension from the command menu in visual code(CTRL+SHFT+P) select \"Python:Create Environment\". This will create a .venv folder in your project folder which contains the virtual environment folders. The project specific python version and site-packages will be located here. To activate this environment: WINDOWS: > .venv\\\\scripts\\\\activate LINUX: $ source .venv/bin/activate Installing and using the ge_lib code library Using the function library in your projects you'll need the main (default) branch, this is installed directly from github using pip install git+https://github.com/simon969/ge_lib.git or using the pyPI Python Packaging Index repository pip install ge_lib Maintaining and Contributing to the ge_lib code library The main branch is the default branch of the latest QA/QC version for installing in projects (pip install). As with all evolving work mistakes and errors do occur. While every effort is made to ensure that the library performance correctly, but we cannot always anticipate all the use cases that might occur. Please report any unusual behaviour or suspect results particularly give details of the circumstances under which they have occurred so they can be investigated by the development team. It is only with this constant vigilance that we reduce and minimise error for all users. To contributing to the function library you'll need the development (dev) branch The development (dev) branch is for downloading (pull requests). Amendments and additions are then submitted (merge requests). Periodically the development branch is merged back into the main branch as the next new version","title":"Setting up your machine"},{"location":"tunnels/","text":"Tunnel Analysis Functions","title":"Tunnel Analysis Functions"},{"location":"tunnels/#tunnel-analysis-functions","text":"","title":"Tunnel Analysis Functions"}]}